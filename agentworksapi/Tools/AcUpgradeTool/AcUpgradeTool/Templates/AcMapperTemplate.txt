//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using AutoMapper.Configuration;

namespace MoneyGram.AgentConnect.Repository.EntityMapper
{
    public static class AcMapper
    {
        private static readonly MapperConfigurationExpression ConfigurationExpression = new MapperConfigurationExpression();
        private static IMapper _mapper;

        public static void Configure()
        {
            {DomainModelExtensions}

            {ServiceModelExtensions}

            var mappingConfig = new MapperConfiguration(ConfigurationExpression);

            mappingConfig.AssertConfigurationIsValid();

            _mapper = mappingConfig.CreateMapper();
        }

        public static TDestination Map<TSource, TDestination>(TSource source)
        {
            return _mapper.Map<TSource, TDestination>(source);
        }

        public static TDestination Map<TSource, TDestination>(TSource source, TDestination destination)
        {
            return _mapper.Map<TSource, TDestination>(source, destination);
        }

        public static IMappingExpression<TSource, TDestination> CreateMap<TSource, TDestination>()
        {
            return ConfigurationExpression.CreateMap<TSource, TDestination>();
        }
        public static IMappingExpression<TSource, TDestination> Ignore<TSource, TDestination>(
            this IMappingExpression<TSource, TDestination> map,
            Expression<Func<TDestination, object>> selector)
        {
            map.ForMember(selector, config => config.Ignore());
            return map;
        }

        public static IMappingExpression<TSource, TDestination> IgnoreSpecifiedProperties<TSource, TDestination>(this IMappingExpression<TSource, TDestination> mappingExpression)
        {
            mappingExpression.ForAllMembers(x =>
            {
                if (x.DestinationMember.Name.ToLower().EndsWith("specified"))
                {
                    x.Ignore();
                }
            });
            
            return mappingExpression;
        }

        public static List<T> ArrayToList<T>(this T[] array)
        {
            if(array == null)
            {
                return null;
            }
            Type typeOfArray = typeof(T).GetElementType();
            var outputList = new List<T>();
            foreach (var element in array)
            {
                outputList.Add((T)element);
            }
            return outputList;
        }

        public static T[] ListToArray<T>(this List<T> list)
        {
            if (list == null)
            {
                return null;
            }
            Type typeOfArray = typeof(T).GetElementType();
            var outputList = list.ToArray();

            return outputList;
        }
    }
}