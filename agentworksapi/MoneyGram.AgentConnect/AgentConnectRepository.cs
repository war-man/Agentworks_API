//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Threading.Tasks;
using MoneyGram.AgentConnect.DomainModel;
using MoneyGram.AgentConnect.EntityMapper;
using MoneyGram.Common.Extensions;
using DOMAIN = MoneyGram.AgentConnect.DomainModel.Transaction;
using SERVICE = MoneyGram.AgentConnect.Service;

namespace MoneyGram.AgentConnect
{
	public class AgentConnectRepository : IAgentConnect
	{
		protected IAgentConnectProxyFactory AgentConnectProxyFactory { get; }

		public AgentConnectRepository(IAgentConnectProxyFactory agentConnectProxyFactory)
        {
            agentConnectProxyFactory.ThrowIfNull(nameof(agentConnectProxyFactory));

            AgentConnectProxyFactory = agentConnectProxyFactory;
        }

		protected void PopulateRequestWithConfig(SERVICE.Request acRequest, Agent agent)
        {
            acRequest.timeStamp = DateTime.Now;
            acRequest.agentID = agent.AgentId;
            acRequest.agentSequence = agent.AgentSequence;
            // Temporary until  RCDMS matches the AC schema of 20 char.
            acRequest.operatorName = agent.OperatorName.Truncate(7);
            acRequest.language = agent.Language;

            if (agent.UnitProfileId.HasValue)
            {
                acRequest.unitProfileID = agent.UnitProfileId.Value;
                acRequest.unitProfileIDSpecified = true;
            }
        }

		public DOMAIN.AmendValidationResponse AmendValidation(Agent agent, DOMAIN.AmendValidationRequest amendValidationRequest)
		{
		    Task<DOMAIN.AmendValidationResponse> callTask = Task.Run(() => this.AmendValidationAsync(agent, amendValidationRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.AmendValidationResponse> AmendValidationAsync(Agent agent, DOMAIN.AmendValidationRequest amendValidationRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    amendValidationRequest.ThrowIfNull(nameof(amendValidationRequest));

		    var request = DomainToServiceExtensions.ToService(amendValidationRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.amendValidationAsync(new SERVICE.amendValidationRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.amendValidationResponse);
		}
		public DOMAIN.BillerSearchResponse BillerSearch(Agent agent, DOMAIN.BillerSearchRequest billerSearchRequest)
		{
		    Task<DOMAIN.BillerSearchResponse> callTask = Task.Run(() => this.BillerSearchAsync(agent, billerSearchRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.BillerSearchResponse> BillerSearchAsync(Agent agent, DOMAIN.BillerSearchRequest billerSearchRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    billerSearchRequest.ThrowIfNull(nameof(billerSearchRequest));

		    var request = DomainToServiceExtensions.ToService(billerSearchRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.billerSearchAsync(new SERVICE.billerSearchRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.billerSearchResponse);
		}
		public DOMAIN.BillPaymentDetailReportResponse BillPaymentDetailReport(Agent agent, DOMAIN.BillPaymentDetailReportRequest billPaymentDetailReportRequest)
		{
		    Task<DOMAIN.BillPaymentDetailReportResponse> callTask = Task.Run(() => this.BillPaymentDetailReportAsync(agent, billPaymentDetailReportRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.BillPaymentDetailReportResponse> BillPaymentDetailReportAsync(Agent agent, DOMAIN.BillPaymentDetailReportRequest billPaymentDetailReportRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    billPaymentDetailReportRequest.ThrowIfNull(nameof(billPaymentDetailReportRequest));

		    var request = DomainToServiceExtensions.ToService(billPaymentDetailReportRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.billPaymentDetailReportAsync(new SERVICE.billPaymentDetailReportRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.billPaymentDetailReportResponse);
		}
		public DOMAIN.BillPaymentSummaryReportResponse BillPaymentSummaryReport(Agent agent, DOMAIN.BillPaymentSummaryReportRequest billPaymentSummaryReportRequest)
		{
		    Task<DOMAIN.BillPaymentSummaryReportResponse> callTask = Task.Run(() => this.BillPaymentSummaryReportAsync(agent, billPaymentSummaryReportRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.BillPaymentSummaryReportResponse> BillPaymentSummaryReportAsync(Agent agent, DOMAIN.BillPaymentSummaryReportRequest billPaymentSummaryReportRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    billPaymentSummaryReportRequest.ThrowIfNull(nameof(billPaymentSummaryReportRequest));

		    var request = DomainToServiceExtensions.ToService(billPaymentSummaryReportRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.billPaymentSummaryReportAsync(new SERVICE.billPaymentSummaryReportRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.billPaymentSummaryReportResponse);
		}
		public DOMAIN.BPValidationResponse BpValidation(Agent agent, DOMAIN.BPValidationRequest bpValidationRequest)
		{
		    Task<DOMAIN.BPValidationResponse> callTask = Task.Run(() => this.BpValidationAsync(agent, bpValidationRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.BPValidationResponse> BpValidationAsync(Agent agent, DOMAIN.BPValidationRequest bpValidationRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    bpValidationRequest.ThrowIfNull(nameof(bpValidationRequest));

		    var request = DomainToServiceExtensions.ToService(bpValidationRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.bpValidationAsync(new SERVICE.bpValidationRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.bpValidationResponse);
		}
		public DOMAIN.CheckInResponse CheckIn(Agent agent, DOMAIN.CheckInRequest checkInRequest)
		{
		    Task<DOMAIN.CheckInResponse> callTask = Task.Run(() => this.CheckInAsync(agent, checkInRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.CheckInResponse> CheckInAsync(Agent agent, DOMAIN.CheckInRequest checkInRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    checkInRequest.ThrowIfNull(nameof(checkInRequest));

		    var request = DomainToServiceExtensions.ToService(checkInRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.checkInAsync(new SERVICE.checkInRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.checkInResponse);
		}
		public DOMAIN.CityListResponse CityList(Agent agent, DOMAIN.CityListRequest cityListRequest)
		{
		    Task<DOMAIN.CityListResponse> callTask = Task.Run(() => this.CityListAsync(agent, cityListRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.CityListResponse> CityListAsync(Agent agent, DOMAIN.CityListRequest cityListRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    cityListRequest.ThrowIfNull(nameof(cityListRequest));

		    var request = DomainToServiceExtensions.ToService(cityListRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.cityListAsync(new SERVICE.cityListRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.cityListResponse);
		}
		public DOMAIN.CompleteSessionResponse CompleteSession(Agent agent, DOMAIN.CompleteSessionRequest completeSessionRequest)
		{
		    Task<DOMAIN.CompleteSessionResponse> callTask = Task.Run(() => this.CompleteSessionAsync(agent, completeSessionRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.CompleteSessionResponse> CompleteSessionAsync(Agent agent, DOMAIN.CompleteSessionRequest completeSessionRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    completeSessionRequest.ThrowIfNull(nameof(completeSessionRequest));

		    var request = DomainToServiceExtensions.ToService(completeSessionRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.completeSessionAsync(new SERVICE.completeSessionRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.completeSessionResponse);
		}
		public DOMAIN.ComplianceTransactionResponse ComplianceTransaction(Agent agent, DOMAIN.ComplianceTransactionRequest complianceTransactionRequest)
		{
		    Task<DOMAIN.ComplianceTransactionResponse> callTask = Task.Run(() => this.ComplianceTransactionAsync(agent, complianceTransactionRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.ComplianceTransactionResponse> ComplianceTransactionAsync(Agent agent, DOMAIN.ComplianceTransactionRequest complianceTransactionRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    complianceTransactionRequest.ThrowIfNull(nameof(complianceTransactionRequest));

		    var request = DomainToServiceExtensions.ToService(complianceTransactionRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.complianceTransactionAsync(new SERVICE.complianceTransactionRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.complianceTransactionResponse);
		}
		public DOMAIN.ConfirmTokenResponse ConfirmToken(Agent agent, DOMAIN.ConfirmTokenRequest confirmTokenRequest)
		{
		    Task<DOMAIN.ConfirmTokenResponse> callTask = Task.Run(() => this.ConfirmTokenAsync(agent, confirmTokenRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.ConfirmTokenResponse> ConfirmTokenAsync(Agent agent, DOMAIN.ConfirmTokenRequest confirmTokenRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    confirmTokenRequest.ThrowIfNull(nameof(confirmTokenRequest));

		    var request = DomainToServiceExtensions.ToService(confirmTokenRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.confirmTokenAsync(new SERVICE.confirmTokenRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.confirmTokenResponse);
		}
		public DOMAIN.ConsumerHistoryLookupResponse ConsumerHistoryLookup(Agent agent, DOMAIN.ConsumerHistoryLookupRequest consumerHistoryLookupRequest)
		{
		    Task<DOMAIN.ConsumerHistoryLookupResponse> callTask = Task.Run(() => this.ConsumerHistoryLookupAsync(agent, consumerHistoryLookupRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.ConsumerHistoryLookupResponse> ConsumerHistoryLookupAsync(Agent agent, DOMAIN.ConsumerHistoryLookupRequest consumerHistoryLookupRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    consumerHistoryLookupRequest.ThrowIfNull(nameof(consumerHistoryLookupRequest));

		    var request = DomainToServiceExtensions.ToService(consumerHistoryLookupRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.consumerHistoryLookupAsync(new SERVICE.consumerHistoryLookupRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.consumerHistoryLookupResponse);
		}
		public DOMAIN.CreateOrUpdateProfileConsumerResponse CreateOrUpdateProfileConsumer(Agent agent, DOMAIN.CreateOrUpdateProfileConsumerRequest createOrUpdateProfileConsumerRequest)
		{
		    Task<DOMAIN.CreateOrUpdateProfileConsumerResponse> callTask = Task.Run(() => this.CreateOrUpdateProfileConsumerAsync(agent, createOrUpdateProfileConsumerRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.CreateOrUpdateProfileConsumerResponse> CreateOrUpdateProfileConsumerAsync(Agent agent, DOMAIN.CreateOrUpdateProfileConsumerRequest createOrUpdateProfileConsumerRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    createOrUpdateProfileConsumerRequest.ThrowIfNull(nameof(createOrUpdateProfileConsumerRequest));

		    var request = DomainToServiceExtensions.ToService(createOrUpdateProfileConsumerRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.createOrUpdateProfileConsumerAsync(new SERVICE.createOrUpdateProfileConsumerRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.createOrUpdateProfileConsumerResponse);
		}
		public DOMAIN.CreateOrUpdateProfileReceiverResponse CreateOrUpdateProfileReceiver(Agent agent, DOMAIN.CreateOrUpdateProfileReceiverRequest createOrUpdateProfileReceiverRequest)
		{
		    Task<DOMAIN.CreateOrUpdateProfileReceiverResponse> callTask = Task.Run(() => this.CreateOrUpdateProfileReceiverAsync(agent, createOrUpdateProfileReceiverRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.CreateOrUpdateProfileReceiverResponse> CreateOrUpdateProfileReceiverAsync(Agent agent, DOMAIN.CreateOrUpdateProfileReceiverRequest createOrUpdateProfileReceiverRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    createOrUpdateProfileReceiverRequest.ThrowIfNull(nameof(createOrUpdateProfileReceiverRequest));

		    var request = DomainToServiceExtensions.ToService(createOrUpdateProfileReceiverRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.createOrUpdateProfileReceiverAsync(new SERVICE.createOrUpdateProfileReceiverRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.createOrUpdateProfileReceiverResponse);
		}
		public DOMAIN.CreateOrUpdateProfileSenderResponse CreateOrUpdateProfileSender(Agent agent, DOMAIN.CreateOrUpdateProfileSenderRequest createOrUpdateProfileSenderRequest)
		{
		    Task<DOMAIN.CreateOrUpdateProfileSenderResponse> callTask = Task.Run(() => this.CreateOrUpdateProfileSenderAsync(agent, createOrUpdateProfileSenderRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.CreateOrUpdateProfileSenderResponse> CreateOrUpdateProfileSenderAsync(Agent agent, DOMAIN.CreateOrUpdateProfileSenderRequest createOrUpdateProfileSenderRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    createOrUpdateProfileSenderRequest.ThrowIfNull(nameof(createOrUpdateProfileSenderRequest));

		    var request = DomainToServiceExtensions.ToService(createOrUpdateProfileSenderRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.createOrUpdateProfileSenderAsync(new SERVICE.createOrUpdateProfileSenderRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.createOrUpdateProfileSenderResponse);
		}
		public DOMAIN.DepositAnnouncementResponse DepositAnnouncement(Agent agent, DOMAIN.DepositAnnouncementRequest depositAnnouncementRequest)
		{
		    Task<DOMAIN.DepositAnnouncementResponse> callTask = Task.Run(() => this.DepositAnnouncementAsync(agent, depositAnnouncementRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.DepositAnnouncementResponse> DepositAnnouncementAsync(Agent agent, DOMAIN.DepositAnnouncementRequest depositAnnouncementRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    depositAnnouncementRequest.ThrowIfNull(nameof(depositAnnouncementRequest));

		    var request = DomainToServiceExtensions.ToService(depositAnnouncementRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.depositAnnouncementAsync(new SERVICE.depositAnnouncementRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.depositAnnouncementResponse);
		}
		public DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponse DirectoryOfAgentsByAreaCodePrefix(Agent agent, DOMAIN.DirectoryOfAgentsByAreaCodePrefixRequest directoryOfAgentsByAreaCodePrefixRequest)
		{
		    Task<DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponse> callTask = Task.Run(() => this.DirectoryOfAgentsByAreaCodePrefixAsync(agent, directoryOfAgentsByAreaCodePrefixRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponse> DirectoryOfAgentsByAreaCodePrefixAsync(Agent agent, DOMAIN.DirectoryOfAgentsByAreaCodePrefixRequest directoryOfAgentsByAreaCodePrefixRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    directoryOfAgentsByAreaCodePrefixRequest.ThrowIfNull(nameof(directoryOfAgentsByAreaCodePrefixRequest));

		    var request = DomainToServiceExtensions.ToService(directoryOfAgentsByAreaCodePrefixRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.directoryOfAgentsByAreaCodePrefixAsync(new SERVICE.directoryOfAgentsByAreaCodePrefixRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.directoryOfAgentsByAreaCodePrefixResponse);
		}
		public DOMAIN.DirectoryOfAgentsByCityResponse DirectoryOfAgentsByCity(Agent agent, DOMAIN.DirectoryOfAgentsByCityRequest directoryOfAgentsByCityRequest)
		{
		    Task<DOMAIN.DirectoryOfAgentsByCityResponse> callTask = Task.Run(() => this.DirectoryOfAgentsByCityAsync(agent, directoryOfAgentsByCityRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.DirectoryOfAgentsByCityResponse> DirectoryOfAgentsByCityAsync(Agent agent, DOMAIN.DirectoryOfAgentsByCityRequest directoryOfAgentsByCityRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    directoryOfAgentsByCityRequest.ThrowIfNull(nameof(directoryOfAgentsByCityRequest));

		    var request = DomainToServiceExtensions.ToService(directoryOfAgentsByCityRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.directoryOfAgentsByCityAsync(new SERVICE.directoryOfAgentsByCityRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.directoryOfAgentsByCityResponse);
		}
		public DOMAIN.DirectoryOfAgentsByZipResponse DirectoryOfAgentsByZip(Agent agent, DOMAIN.DirectoryOfAgentsByZipRequest directoryOfAgentsByZipRequest)
		{
		    Task<DOMAIN.DirectoryOfAgentsByZipResponse> callTask = Task.Run(() => this.DirectoryOfAgentsByZipAsync(agent, directoryOfAgentsByZipRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.DirectoryOfAgentsByZipResponse> DirectoryOfAgentsByZipAsync(Agent agent, DOMAIN.DirectoryOfAgentsByZipRequest directoryOfAgentsByZipRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    directoryOfAgentsByZipRequest.ThrowIfNull(nameof(directoryOfAgentsByZipRequest));

		    var request = DomainToServiceExtensions.ToService(directoryOfAgentsByZipRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.directoryOfAgentsByZipAsync(new SERVICE.directoryOfAgentsByZipRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.directoryOfAgentsByZipResponse);
		}
		public DOMAIN.DisclosureTextDetailsResponse DisclosureTextDetails(Agent agent, DOMAIN.DisclosureTextDetailsRequest disclosureTextDetailsRequest)
		{
		    Task<DOMAIN.DisclosureTextDetailsResponse> callTask = Task.Run(() => this.DisclosureTextDetailsAsync(agent, disclosureTextDetailsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.DisclosureTextDetailsResponse> DisclosureTextDetailsAsync(Agent agent, DOMAIN.DisclosureTextDetailsRequest disclosureTextDetailsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    disclosureTextDetailsRequest.ThrowIfNull(nameof(disclosureTextDetailsRequest));

		    var request = DomainToServiceExtensions.ToService(disclosureTextDetailsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.disclosureTextDetailsAsync(new SERVICE.disclosureTextDetailsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.disclosureTextDetailsResponse);
		}
		public DOMAIN.DoddFrankStateRegulatorInfoResponse DoddFrankStateRegulatorInfo(Agent agent, DOMAIN.DoddFrankStateRegulatorInfoRequest doddFrankStateRegulatorInfoRequest)
		{
		    Task<DOMAIN.DoddFrankStateRegulatorInfoResponse> callTask = Task.Run(() => this.DoddFrankStateRegulatorInfoAsync(agent, doddFrankStateRegulatorInfoRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.DoddFrankStateRegulatorInfoResponse> DoddFrankStateRegulatorInfoAsync(Agent agent, DOMAIN.DoddFrankStateRegulatorInfoRequest doddFrankStateRegulatorInfoRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    doddFrankStateRegulatorInfoRequest.ThrowIfNull(nameof(doddFrankStateRegulatorInfoRequest));

		    var request = DomainToServiceExtensions.ToService(doddFrankStateRegulatorInfoRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.doddFrankStateRegulatorInfoAsync(new SERVICE.doddFrankStateRegulatorInfoRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.doddFrankStateRegulatorInfoResponse);
		}
		public DOMAIN.DwInitialSetupResponse DwInitialSetup(Agent agent, DOMAIN.DwInitialSetupRequest dwInitialSetupRequest)
		{
		    Task<DOMAIN.DwInitialSetupResponse> callTask = Task.Run(() => this.DwInitialSetupAsync(agent, dwInitialSetupRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.DwInitialSetupResponse> DwInitialSetupAsync(Agent agent, DOMAIN.DwInitialSetupRequest dwInitialSetupRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    dwInitialSetupRequest.ThrowIfNull(nameof(dwInitialSetupRequest));

		    var request = DomainToServiceExtensions.ToService(dwInitialSetupRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.dwInitialSetupAsync(new SERVICE.dwInitialSetupRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.dwInitialSetupResponse);
		}
		public DOMAIN.DwPasswordResponse DwPassword(Agent agent, DOMAIN.DwPasswordRequest dwPasswordRequest)
		{
		    Task<DOMAIN.DwPasswordResponse> callTask = Task.Run(() => this.DwPasswordAsync(agent, dwPasswordRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.DwPasswordResponse> DwPasswordAsync(Agent agent, DOMAIN.DwPasswordRequest dwPasswordRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    dwPasswordRequest.ThrowIfNull(nameof(dwPasswordRequest));

		    var request = DomainToServiceExtensions.ToService(dwPasswordRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.dwPasswordAsync(new SERVICE.dwPasswordRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.dwPasswordResponse);
		}
		public DOMAIN.DwProfileResponse DwProfile(Agent agent, DOMAIN.DwProfileRequest dwProfileRequest)
		{
		    Task<DOMAIN.DwProfileResponse> callTask = Task.Run(() => this.DwProfileAsync(agent, dwProfileRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.DwProfileResponse> DwProfileAsync(Agent agent, DOMAIN.DwProfileRequest dwProfileRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    dwProfileRequest.ThrowIfNull(nameof(dwProfileRequest));

		    var request = DomainToServiceExtensions.ToService(dwProfileRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.dwProfileAsync(new SERVICE.dwProfileRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.dwProfileResponse);
		}
		public DOMAIN.FeeLookupResponse FeeLookup(Agent agent, DOMAIN.FeeLookupRequest feeLookupRequest)
		{
		    Task<DOMAIN.FeeLookupResponse> callTask = Task.Run(() => this.FeeLookupAsync(agent, feeLookupRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.FeeLookupResponse> FeeLookupAsync(Agent agent, DOMAIN.FeeLookupRequest feeLookupRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    feeLookupRequest.ThrowIfNull(nameof(feeLookupRequest));

		    var request = DomainToServiceExtensions.ToService(feeLookupRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.feeLookupAsync(new SERVICE.feeLookupRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.feeLookupResponse);
		}
		public DOMAIN.FeeLookupBySendCountryResponse FeeLookupBySendCountry(Agent agent, DOMAIN.FeeLookupBySendCountryRequest feeLookupBySendCountryRequest)
		{
		    Task<DOMAIN.FeeLookupBySendCountryResponse> callTask = Task.Run(() => this.FeeLookupBySendCountryAsync(agent, feeLookupBySendCountryRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.FeeLookupBySendCountryResponse> FeeLookupBySendCountryAsync(Agent agent, DOMAIN.FeeLookupBySendCountryRequest feeLookupBySendCountryRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    feeLookupBySendCountryRequest.ThrowIfNull(nameof(feeLookupBySendCountryRequest));

		    var request = DomainToServiceExtensions.ToService(feeLookupBySendCountryRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.feeLookupBySendCountryAsync(new SERVICE.feeLookupBySendCountryRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.feeLookupBySendCountryResponse);
		}
		public DOMAIN.GetAllErrorsResponse GetAllErrors(Agent agent, DOMAIN.GetAllErrorsRequest getAllErrorsRequest)
		{
		    Task<DOMAIN.GetAllErrorsResponse> callTask = Task.Run(() => this.GetAllErrorsAsync(agent, getAllErrorsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetAllErrorsResponse> GetAllErrorsAsync(Agent agent, DOMAIN.GetAllErrorsRequest getAllErrorsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getAllErrorsRequest.ThrowIfNull(nameof(getAllErrorsRequest));

		    var request = DomainToServiceExtensions.ToService(getAllErrorsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getAllErrorsAsync(new SERVICE.getAllErrorsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getAllErrorsResponse);
		}
		public DOMAIN.GetAllFieldsResponse GetAllFields(Agent agent, DOMAIN.GetAllFieldsRequest getAllFieldsRequest)
		{
		    Task<DOMAIN.GetAllFieldsResponse> callTask = Task.Run(() => this.GetAllFieldsAsync(agent, getAllFieldsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetAllFieldsResponse> GetAllFieldsAsync(Agent agent, DOMAIN.GetAllFieldsRequest getAllFieldsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getAllFieldsRequest.ThrowIfNull(nameof(getAllFieldsRequest));

		    var request = DomainToServiceExtensions.ToService(getAllFieldsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getAllFieldsAsync(new SERVICE.getAllFieldsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getAllFieldsResponse);
		}
		public DOMAIN.GetBankDetailsResponse GetBankDetails(Agent agent, DOMAIN.GetBankDetailsRequest getBankDetailsRequest)
		{
		    Task<DOMAIN.GetBankDetailsResponse> callTask = Task.Run(() => this.GetBankDetailsAsync(agent, getBankDetailsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetBankDetailsResponse> GetBankDetailsAsync(Agent agent, DOMAIN.GetBankDetailsRequest getBankDetailsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getBankDetailsRequest.ThrowIfNull(nameof(getBankDetailsRequest));

		    var request = DomainToServiceExtensions.ToService(getBankDetailsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getBankDetailsAsync(new SERVICE.getBankDetailsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getBankDetailsResponse);
		}
		public DOMAIN.GetBankDetailsByLevelResponse GetBankDetailsByLevel(Agent agent, DOMAIN.GetBankDetailsByLevelRequest getBankDetailsByLevelRequest)
		{
		    Task<DOMAIN.GetBankDetailsByLevelResponse> callTask = Task.Run(() => this.GetBankDetailsByLevelAsync(agent, getBankDetailsByLevelRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetBankDetailsByLevelResponse> GetBankDetailsByLevelAsync(Agent agent, DOMAIN.GetBankDetailsByLevelRequest getBankDetailsByLevelRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getBankDetailsByLevelRequest.ThrowIfNull(nameof(getBankDetailsByLevelRequest));

		    var request = DomainToServiceExtensions.ToService(getBankDetailsByLevelRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getBankDetailsByLevelAsync(new SERVICE.getBankDetailsByLevelRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getBankDetailsByLevelResponse);
		}
		public DOMAIN.GetBroadcastMessagesResponse GetBroadcastMessages(Agent agent, DOMAIN.GetBroadcastMessagesRequest getBroadcastMessagesRequest)
		{
		    Task<DOMAIN.GetBroadcastMessagesResponse> callTask = Task.Run(() => this.GetBroadcastMessagesAsync(agent, getBroadcastMessagesRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetBroadcastMessagesResponse> GetBroadcastMessagesAsync(Agent agent, DOMAIN.GetBroadcastMessagesRequest getBroadcastMessagesRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getBroadcastMessagesRequest.ThrowIfNull(nameof(getBroadcastMessagesRequest));

		    var request = DomainToServiceExtensions.ToService(getBroadcastMessagesRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getBroadcastMessagesAsync(new SERVICE.getBroadcastMessagesRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getBroadcastMessagesResponse);
		}
		public DOMAIN.GetConsumerProfileDocumentResponse GetConsumerProfileDocument(Agent agent, DOMAIN.GetConsumerProfileDocumentRequest getConsumerProfileDocumentRequest)
		{
		    Task<DOMAIN.GetConsumerProfileDocumentResponse> callTask = Task.Run(() => this.GetConsumerProfileDocumentAsync(agent, getConsumerProfileDocumentRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetConsumerProfileDocumentResponse> GetConsumerProfileDocumentAsync(Agent agent, DOMAIN.GetConsumerProfileDocumentRequest getConsumerProfileDocumentRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getConsumerProfileDocumentRequest.ThrowIfNull(nameof(getConsumerProfileDocumentRequest));

		    var request = DomainToServiceExtensions.ToService(getConsumerProfileDocumentRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getConsumerProfileDocumentAsync(new SERVICE.getConsumerProfileDocumentRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getConsumerProfileDocumentResponse);
		}
		public DOMAIN.GetConsumerProfileTransactionHistoryResponse GetConsumerProfileTransactionHistory(Agent agent, DOMAIN.GetConsumerProfileTransactionHistoryRequest getConsumerProfileTransactionHistoryRequest)
		{
		    Task<DOMAIN.GetConsumerProfileTransactionHistoryResponse> callTask = Task.Run(() => this.GetConsumerProfileTransactionHistoryAsync(agent, getConsumerProfileTransactionHistoryRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetConsumerProfileTransactionHistoryResponse> GetConsumerProfileTransactionHistoryAsync(Agent agent, DOMAIN.GetConsumerProfileTransactionHistoryRequest getConsumerProfileTransactionHistoryRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getConsumerProfileTransactionHistoryRequest.ThrowIfNull(nameof(getConsumerProfileTransactionHistoryRequest));

		    var request = DomainToServiceExtensions.ToService(getConsumerProfileTransactionHistoryRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getConsumerProfileTransactionHistoryAsync(new SERVICE.getConsumerProfileTransactionHistoryRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getConsumerProfileTransactionHistoryResponse);
		}
		public DOMAIN.GetCountryInfoResponse GetCountryInfo(Agent agent, DOMAIN.GetCountryInfoRequest getCountryInfoRequest)
		{
		    Task<DOMAIN.GetCountryInfoResponse> callTask = Task.Run(() => this.GetCountryInfoAsync(agent, getCountryInfoRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetCountryInfoResponse> GetCountryInfoAsync(Agent agent, DOMAIN.GetCountryInfoRequest getCountryInfoRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getCountryInfoRequest.ThrowIfNull(nameof(getCountryInfoRequest));

		    var request = DomainToServiceExtensions.ToService(getCountryInfoRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getCountryInfoAsync(new SERVICE.getCountryInfoRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getCountryInfoResponse);
		}
		public DOMAIN.GetCountrySubdivisionResponse GetCountrySubdivision(Agent agent, DOMAIN.GetCountrySubdivisionRequest getCountrySubdivisionRequest)
		{
		    Task<DOMAIN.GetCountrySubdivisionResponse> callTask = Task.Run(() => this.GetCountrySubdivisionAsync(agent, getCountrySubdivisionRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetCountrySubdivisionResponse> GetCountrySubdivisionAsync(Agent agent, DOMAIN.GetCountrySubdivisionRequest getCountrySubdivisionRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getCountrySubdivisionRequest.ThrowIfNull(nameof(getCountrySubdivisionRequest));

		    var request = DomainToServiceExtensions.ToService(getCountrySubdivisionRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getCountrySubdivisionAsync(new SERVICE.getCountrySubdivisionRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getCountrySubdivisionResponse);
		}
		public DOMAIN.GetCurrencyInfoResponse GetCurrencyInfo(Agent agent, DOMAIN.GetCurrencyInfoRequest getCurrencyInfoRequest)
		{
		    Task<DOMAIN.GetCurrencyInfoResponse> callTask = Task.Run(() => this.GetCurrencyInfoAsync(agent, getCurrencyInfoRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetCurrencyInfoResponse> GetCurrencyInfoAsync(Agent agent, DOMAIN.GetCurrencyInfoRequest getCurrencyInfoRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getCurrencyInfoRequest.ThrowIfNull(nameof(getCurrencyInfoRequest));

		    var request = DomainToServiceExtensions.ToService(getCurrencyInfoRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getCurrencyInfoAsync(new SERVICE.getCurrencyInfoRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getCurrencyInfoResponse);
		}
		public DOMAIN.GetDebugDataResponse GetDebugData(Agent agent, DOMAIN.GetDebugDataRequest getDebugDataRequest)
		{
		    Task<DOMAIN.GetDebugDataResponse> callTask = Task.Run(() => this.GetDebugDataAsync(agent, getDebugDataRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetDebugDataResponse> GetDebugDataAsync(Agent agent, DOMAIN.GetDebugDataRequest getDebugDataRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getDebugDataRequest.ThrowIfNull(nameof(getDebugDataRequest));

		    var request = DomainToServiceExtensions.ToService(getDebugDataRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getDebugDataAsync(new SERVICE.getDebugDataRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getDebugDataResponse);
		}
		public DOMAIN.GetDepositBankListResponse GetDepositBankList(Agent agent, DOMAIN.GetDepositBankListRequest getDepositBankListRequest)
		{
		    Task<DOMAIN.GetDepositBankListResponse> callTask = Task.Run(() => this.GetDepositBankListAsync(agent, getDepositBankListRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetDepositBankListResponse> GetDepositBankListAsync(Agent agent, DOMAIN.GetDepositBankListRequest getDepositBankListRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getDepositBankListRequest.ThrowIfNull(nameof(getDepositBankListRequest));

		    var request = DomainToServiceExtensions.ToService(getDepositBankListRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getDepositBankListAsync(new SERVICE.getDepositBankListRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getDepositBankListResponse);
		}
		public DOMAIN.GetDepositInformationResponse GetDepositInformation(Agent agent, DOMAIN.GetDepositInformationRequest getDepositInformationRequest)
		{
		    Task<DOMAIN.GetDepositInformationResponse> callTask = Task.Run(() => this.GetDepositInformationAsync(agent, getDepositInformationRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetDepositInformationResponse> GetDepositInformationAsync(Agent agent, DOMAIN.GetDepositInformationRequest getDepositInformationRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getDepositInformationRequest.ThrowIfNull(nameof(getDepositInformationRequest));

		    var request = DomainToServiceExtensions.ToService(getDepositInformationRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getDepositInformationAsync(new SERVICE.getDepositInformationRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getDepositInformationResponse);
		}
		public DOMAIN.GetEnumerationsResponse GetEnumerations(Agent agent, DOMAIN.GetEnumerationsRequest getEnumerationsRequest)
		{
		    Task<DOMAIN.GetEnumerationsResponse> callTask = Task.Run(() => this.GetEnumerationsAsync(agent, getEnumerationsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetEnumerationsResponse> GetEnumerationsAsync(Agent agent, DOMAIN.GetEnumerationsRequest getEnumerationsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getEnumerationsRequest.ThrowIfNull(nameof(getEnumerationsRequest));

		    var request = DomainToServiceExtensions.ToService(getEnumerationsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getEnumerationsAsync(new SERVICE.getEnumerationsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getEnumerationsResponse);
		}
		public DOMAIN.GetPersonalIDImageResponse GetPersonalIDImage(Agent agent, DOMAIN.GetPersonalIDImageRequest getPersonalIDImageRequest)
		{
		    Task<DOMAIN.GetPersonalIDImageResponse> callTask = Task.Run(() => this.GetPersonalIDImageAsync(agent, getPersonalIDImageRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetPersonalIDImageResponse> GetPersonalIDImageAsync(Agent agent, DOMAIN.GetPersonalIDImageRequest getPersonalIDImageRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getPersonalIDImageRequest.ThrowIfNull(nameof(getPersonalIDImageRequest));

		    var request = DomainToServiceExtensions.ToService(getPersonalIDImageRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getPersonalIDImageAsync(new SERVICE.getPersonalIDImageRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getPersonalIDImageResponse);
		}
		public DOMAIN.GetProfileConsumerResponse GetProfileConsumer(Agent agent, DOMAIN.GetProfileConsumerRequest getProfileConsumerRequest)
		{
		    Task<DOMAIN.GetProfileConsumerResponse> callTask = Task.Run(() => this.GetProfileConsumerAsync(agent, getProfileConsumerRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetProfileConsumerResponse> GetProfileConsumerAsync(Agent agent, DOMAIN.GetProfileConsumerRequest getProfileConsumerRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getProfileConsumerRequest.ThrowIfNull(nameof(getProfileConsumerRequest));

		    var request = DomainToServiceExtensions.ToService(getProfileConsumerRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getProfileConsumerAsync(new SERVICE.getProfileConsumerRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getProfileConsumerResponse);
		}
		public DOMAIN.GetProfileReceiverResponse GetProfileReceiver(Agent agent, DOMAIN.GetProfileReceiverRequest getProfileReceiverRequest)
		{
		    Task<DOMAIN.GetProfileReceiverResponse> callTask = Task.Run(() => this.GetProfileReceiverAsync(agent, getProfileReceiverRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetProfileReceiverResponse> GetProfileReceiverAsync(Agent agent, DOMAIN.GetProfileReceiverRequest getProfileReceiverRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getProfileReceiverRequest.ThrowIfNull(nameof(getProfileReceiverRequest));

		    var request = DomainToServiceExtensions.ToService(getProfileReceiverRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getProfileReceiverAsync(new SERVICE.getProfileReceiverRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getProfileReceiverResponse);
		}
		public DOMAIN.GetProfileSenderResponse GetProfileSender(Agent agent, DOMAIN.GetProfileSenderRequest getProfileSenderRequest)
		{
		    Task<DOMAIN.GetProfileSenderResponse> callTask = Task.Run(() => this.GetProfileSenderAsync(agent, getProfileSenderRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetProfileSenderResponse> GetProfileSenderAsync(Agent agent, DOMAIN.GetProfileSenderRequest getProfileSenderRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getProfileSenderRequest.ThrowIfNull(nameof(getProfileSenderRequest));

		    var request = DomainToServiceExtensions.ToService(getProfileSenderRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getProfileSenderAsync(new SERVICE.getProfileSenderRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getProfileSenderResponse);
		}
		public DOMAIN.GetReceiptForReprintResponse GetReceiptForReprint(Agent agent, DOMAIN.GetReceiptForReprintRequest getReceiptForReprintRequest)
		{
		    Task<DOMAIN.GetReceiptForReprintResponse> callTask = Task.Run(() => this.GetReceiptForReprintAsync(agent, getReceiptForReprintRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetReceiptForReprintResponse> GetReceiptForReprintAsync(Agent agent, DOMAIN.GetReceiptForReprintRequest getReceiptForReprintRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getReceiptForReprintRequest.ThrowIfNull(nameof(getReceiptForReprintRequest));

		    var request = DomainToServiceExtensions.ToService(getReceiptForReprintRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getReceiptForReprintAsync(new SERVICE.getReceiptForReprintRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getReceiptForReprintResponse);
		}
		public DOMAIN.GetServiceOptionsResponse GetServiceOptions(Agent agent, DOMAIN.GetServiceOptionsRequest getServiceOptionsRequest)
		{
		    Task<DOMAIN.GetServiceOptionsResponse> callTask = Task.Run(() => this.GetServiceOptionsAsync(agent, getServiceOptionsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetServiceOptionsResponse> GetServiceOptionsAsync(Agent agent, DOMAIN.GetServiceOptionsRequest getServiceOptionsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getServiceOptionsRequest.ThrowIfNull(nameof(getServiceOptionsRequest));

		    var request = DomainToServiceExtensions.ToService(getServiceOptionsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getServiceOptionsAsync(new SERVICE.getServiceOptionsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getServiceOptionsResponse);
		}
		public DOMAIN.GetUCPByConsumerAttributesResponse GetUCPByConsumerAttributes(Agent agent, DOMAIN.GetUCPByConsumerAttributesRequest getUCPByConsumerAttributesRequest)
		{
		    Task<DOMAIN.GetUCPByConsumerAttributesResponse> callTask = Task.Run(() => this.GetUCPByConsumerAttributesAsync(agent, getUCPByConsumerAttributesRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.GetUCPByConsumerAttributesResponse> GetUCPByConsumerAttributesAsync(Agent agent, DOMAIN.GetUCPByConsumerAttributesRequest getUCPByConsumerAttributesRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    getUCPByConsumerAttributesRequest.ThrowIfNull(nameof(getUCPByConsumerAttributesRequest));

		    var request = DomainToServiceExtensions.ToService(getUCPByConsumerAttributesRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.getUCPByConsumerAttributesAsync(new SERVICE.getUCPByConsumerAttributesRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.getUCPByConsumerAttributesResponse);
		}
		public DOMAIN.IndustryResponse Industry(Agent agent, DOMAIN.IndustryRequest industryRequest)
		{
		    Task<DOMAIN.IndustryResponse> callTask = Task.Run(() => this.IndustryAsync(agent, industryRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.IndustryResponse> IndustryAsync(Agent agent, DOMAIN.IndustryRequest industryRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    industryRequest.ThrowIfNull(nameof(industryRequest));

		    var request = DomainToServiceExtensions.ToService(industryRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.industryAsync(new SERVICE.industryRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.industryResponse);
		}
		public DOMAIN.InitialSetupResponse InitialSetup(Agent agent, DOMAIN.InitialSetupRequest initialSetupRequest)
		{
		    Task<DOMAIN.InitialSetupResponse> callTask = Task.Run(() => this.InitialSetupAsync(agent, initialSetupRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.InitialSetupResponse> InitialSetupAsync(Agent agent, DOMAIN.InitialSetupRequest initialSetupRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    initialSetupRequest.ThrowIfNull(nameof(initialSetupRequest));

		    var request = DomainToServiceExtensions.ToService(initialSetupRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.initialSetupAsync(new SERVICE.initialSetupRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.initialSetupResponse);
		}
		public DOMAIN.InjectedInstructionResponse InjectedInstruction(Agent agent, DOMAIN.InjectedInstructionRequest injectedInstructionRequest)
		{
		    Task<DOMAIN.InjectedInstructionResponse> callTask = Task.Run(() => this.InjectedInstructionAsync(agent, injectedInstructionRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.InjectedInstructionResponse> InjectedInstructionAsync(Agent agent, DOMAIN.InjectedInstructionRequest injectedInstructionRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    injectedInstructionRequest.ThrowIfNull(nameof(injectedInstructionRequest));

		    var request = DomainToServiceExtensions.ToService(injectedInstructionRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.injectedInstructionAsync(new SERVICE.injectedInstructionRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.injectedInstructionResponse);
		}
		public DOMAIN.MoneyGramReceiveDetailReportResponse MoneyGramReceiveDetailReport(Agent agent, DOMAIN.MoneyGramReceiveDetailReportRequest moneyGramReceiveDetailReportRequest)
		{
		    Task<DOMAIN.MoneyGramReceiveDetailReportResponse> callTask = Task.Run(() => this.MoneyGramReceiveDetailReportAsync(agent, moneyGramReceiveDetailReportRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.MoneyGramReceiveDetailReportResponse> MoneyGramReceiveDetailReportAsync(Agent agent, DOMAIN.MoneyGramReceiveDetailReportRequest moneyGramReceiveDetailReportRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    moneyGramReceiveDetailReportRequest.ThrowIfNull(nameof(moneyGramReceiveDetailReportRequest));

		    var request = DomainToServiceExtensions.ToService(moneyGramReceiveDetailReportRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.moneyGramReceiveDetailReportAsync(new SERVICE.moneyGramReceiveDetailReportRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.moneyGramReceiveDetailReportResponse);
		}
		public DOMAIN.MoneyGramReceiveSummaryReportResponse MoneyGramReceiveSummaryReport(Agent agent, DOMAIN.MoneyGramReceiveSummaryReportRequest moneyGramReceiveSummaryReportRequest)
		{
		    Task<DOMAIN.MoneyGramReceiveSummaryReportResponse> callTask = Task.Run(() => this.MoneyGramReceiveSummaryReportAsync(agent, moneyGramReceiveSummaryReportRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.MoneyGramReceiveSummaryReportResponse> MoneyGramReceiveSummaryReportAsync(Agent agent, DOMAIN.MoneyGramReceiveSummaryReportRequest moneyGramReceiveSummaryReportRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    moneyGramReceiveSummaryReportRequest.ThrowIfNull(nameof(moneyGramReceiveSummaryReportRequest));

		    var request = DomainToServiceExtensions.ToService(moneyGramReceiveSummaryReportRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.moneyGramReceiveSummaryReportAsync(new SERVICE.moneyGramReceiveSummaryReportRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.moneyGramReceiveSummaryReportResponse);
		}
		public DOMAIN.MoneyGramSendDetailReportResponse MoneyGramSendDetailReport(Agent agent, DOMAIN.MoneyGramSendDetailReportRequest moneyGramSendDetailReportRequest)
		{
		    Task<DOMAIN.MoneyGramSendDetailReportResponse> callTask = Task.Run(() => this.MoneyGramSendDetailReportAsync(agent, moneyGramSendDetailReportRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.MoneyGramSendDetailReportResponse> MoneyGramSendDetailReportAsync(Agent agent, DOMAIN.MoneyGramSendDetailReportRequest moneyGramSendDetailReportRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    moneyGramSendDetailReportRequest.ThrowIfNull(nameof(moneyGramSendDetailReportRequest));

		    var request = DomainToServiceExtensions.ToService(moneyGramSendDetailReportRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.moneyGramSendDetailReportAsync(new SERVICE.moneyGramSendDetailReportRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.moneyGramSendDetailReportResponse);
		}
		public DOMAIN.MoneyGramSendDetailReportWithTaxResponse MoneyGramSendDetailReportWithTax(Agent agent, DOMAIN.MoneyGramSendDetailReportWithTaxRequest moneyGramSendDetailReportWithTaxRequest)
		{
		    Task<DOMAIN.MoneyGramSendDetailReportWithTaxResponse> callTask = Task.Run(() => this.MoneyGramSendDetailReportWithTaxAsync(agent, moneyGramSendDetailReportWithTaxRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.MoneyGramSendDetailReportWithTaxResponse> MoneyGramSendDetailReportWithTaxAsync(Agent agent, DOMAIN.MoneyGramSendDetailReportWithTaxRequest moneyGramSendDetailReportWithTaxRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    moneyGramSendDetailReportWithTaxRequest.ThrowIfNull(nameof(moneyGramSendDetailReportWithTaxRequest));

		    var request = DomainToServiceExtensions.ToService(moneyGramSendDetailReportWithTaxRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.moneyGramSendDetailReportWithTaxAsync(new SERVICE.moneyGramSendDetailReportWithTaxRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.moneyGramSendDetailReportWithTaxResponse);
		}
		public DOMAIN.MoneyGramSendSummaryReportResponse MoneyGramSendSummaryReport(Agent agent, DOMAIN.MoneyGramSendSummaryReportRequest moneyGramSendSummaryReportRequest)
		{
		    Task<DOMAIN.MoneyGramSendSummaryReportResponse> callTask = Task.Run(() => this.MoneyGramSendSummaryReportAsync(agent, moneyGramSendSummaryReportRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.MoneyGramSendSummaryReportResponse> MoneyGramSendSummaryReportAsync(Agent agent, DOMAIN.MoneyGramSendSummaryReportRequest moneyGramSendSummaryReportRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    moneyGramSendSummaryReportRequest.ThrowIfNull(nameof(moneyGramSendSummaryReportRequest));

		    var request = DomainToServiceExtensions.ToService(moneyGramSendSummaryReportRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.moneyGramSendSummaryReportAsync(new SERVICE.moneyGramSendSummaryReportRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.moneyGramSendSummaryReportResponse);
		}
		public DOMAIN.MoneyOrderTotalResponse MoneyOrderTotal(Agent agent, DOMAIN.MoneyOrderTotalRequest moneyOrderTotalRequest)
		{
		    Task<DOMAIN.MoneyOrderTotalResponse> callTask = Task.Run(() => this.MoneyOrderTotalAsync(agent, moneyOrderTotalRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.MoneyOrderTotalResponse> MoneyOrderTotalAsync(Agent agent, DOMAIN.MoneyOrderTotalRequest moneyOrderTotalRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    moneyOrderTotalRequest.ThrowIfNull(nameof(moneyOrderTotalRequest));

		    var request = DomainToServiceExtensions.ToService(moneyOrderTotalRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.moneyOrderTotalAsync(new SERVICE.moneyOrderTotalRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.moneyOrderTotalResponse);
		}
		public DOMAIN.OpenOTPLoginResponse OpenOTPLogin(Agent agent, DOMAIN.OpenOTPLoginRequest openOTPLoginRequest)
		{
		    Task<DOMAIN.OpenOTPLoginResponse> callTask = Task.Run(() => this.OpenOTPLoginAsync(agent, openOTPLoginRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.OpenOTPLoginResponse> OpenOTPLoginAsync(Agent agent, DOMAIN.OpenOTPLoginRequest openOTPLoginRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    openOTPLoginRequest.ThrowIfNull(nameof(openOTPLoginRequest));

		    var request = DomainToServiceExtensions.ToService(openOTPLoginRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.openOTPLoginAsync(new SERVICE.openOTPLoginRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.openOTPLoginResponse);
		}
		public DOMAIN.ProfileResponse Profile(Agent agent, DOMAIN.ProfileRequest profileRequest)
		{
		    Task<DOMAIN.ProfileResponse> callTask = Task.Run(() => this.ProfileAsync(agent, profileRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.ProfileResponse> ProfileAsync(Agent agent, DOMAIN.ProfileRequest profileRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    profileRequest.ThrowIfNull(nameof(profileRequest));

		    var request = DomainToServiceExtensions.ToService(profileRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.profileAsync(new SERVICE.profileRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.profileResponse);
		}
		public DOMAIN.ProfileChangeResponse ProfileChange(Agent agent, DOMAIN.ProfileChangeRequest profileChangeRequest)
		{
		    Task<DOMAIN.ProfileChangeResponse> callTask = Task.Run(() => this.ProfileChangeAsync(agent, profileChangeRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.ProfileChangeResponse> ProfileChangeAsync(Agent agent, DOMAIN.ProfileChangeRequest profileChangeRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    profileChangeRequest.ThrowIfNull(nameof(profileChangeRequest));

		    var request = DomainToServiceExtensions.ToService(profileChangeRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.profileChangeAsync(new SERVICE.profileChangeRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.profileChangeResponse);
		}
		public DOMAIN.PromotionLookupByCodeResponse PromotionLookupByCode(Agent agent, DOMAIN.PromotionLookupByCodeRequest promotionLookupByCodeRequest)
		{
		    Task<DOMAIN.PromotionLookupByCodeResponse> callTask = Task.Run(() => this.PromotionLookupByCodeAsync(agent, promotionLookupByCodeRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.PromotionLookupByCodeResponse> PromotionLookupByCodeAsync(Agent agent, DOMAIN.PromotionLookupByCodeRequest promotionLookupByCodeRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    promotionLookupByCodeRequest.ThrowIfNull(nameof(promotionLookupByCodeRequest));

		    var request = DomainToServiceExtensions.ToService(promotionLookupByCodeRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.promotionLookupByCodeAsync(new SERVICE.promotionLookupByCodeRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.promotionLookupByCodeResponse);
		}
		public DOMAIN.ReceiptsFormatDetailsResponse ReceiptsFormatDetails(Agent agent, DOMAIN.ReceiptsFormatDetailsRequest receiptsFormatDetailsRequest)
		{
		    Task<DOMAIN.ReceiptsFormatDetailsResponse> callTask = Task.Run(() => this.ReceiptsFormatDetailsAsync(agent, receiptsFormatDetailsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.ReceiptsFormatDetailsResponse> ReceiptsFormatDetailsAsync(Agent agent, DOMAIN.ReceiptsFormatDetailsRequest receiptsFormatDetailsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    receiptsFormatDetailsRequest.ThrowIfNull(nameof(receiptsFormatDetailsRequest));

		    var request = DomainToServiceExtensions.ToService(receiptsFormatDetailsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.receiptsFormatDetailsAsync(new SERVICE.receiptsFormatDetailsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.receiptsFormatDetailsResponse);
		}
		public DOMAIN.ReceiveReversalValidationResponse ReceiveReversalValidation(Agent agent, DOMAIN.ReceiveReversalValidationRequest receiveReversalValidationRequest)
		{
		    Task<DOMAIN.ReceiveReversalValidationResponse> callTask = Task.Run(() => this.ReceiveReversalValidationAsync(agent, receiveReversalValidationRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.ReceiveReversalValidationResponse> ReceiveReversalValidationAsync(Agent agent, DOMAIN.ReceiveReversalValidationRequest receiveReversalValidationRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    receiveReversalValidationRequest.ThrowIfNull(nameof(receiveReversalValidationRequest));

		    var request = DomainToServiceExtensions.ToService(receiveReversalValidationRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.receiveReversalValidationAsync(new SERVICE.receiveReversalValidationRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.receiveReversalValidationResponse);
		}
		public DOMAIN.ReceiveValidationResponse ReceiveValidation(Agent agent, DOMAIN.ReceiveValidationRequest receiveValidationRequest)
		{
		    Task<DOMAIN.ReceiveValidationResponse> callTask = Task.Run(() => this.ReceiveValidationAsync(agent, receiveValidationRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.ReceiveValidationResponse> ReceiveValidationAsync(Agent agent, DOMAIN.ReceiveValidationRequest receiveValidationRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    receiveValidationRequest.ThrowIfNull(nameof(receiveValidationRequest));

		    var request = DomainToServiceExtensions.ToService(receiveValidationRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.receiveValidationAsync(new SERVICE.receiveValidationRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.receiveValidationResponse);
		}
		public DOMAIN.RegisterHardTokenResponse RegisterHardToken(Agent agent, DOMAIN.RegisterHardTokenRequest registerHardTokenRequest)
		{
		    Task<DOMAIN.RegisterHardTokenResponse> callTask = Task.Run(() => this.RegisterHardTokenAsync(agent, registerHardTokenRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.RegisterHardTokenResponse> RegisterHardTokenAsync(Agent agent, DOMAIN.RegisterHardTokenRequest registerHardTokenRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    registerHardTokenRequest.ThrowIfNull(nameof(registerHardTokenRequest));

		    var request = DomainToServiceExtensions.ToService(registerHardTokenRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.registerHardTokenAsync(new SERVICE.registerHardTokenRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.registerHardTokenResponse);
		}
		public DOMAIN.SaveConsumerProfileDocumentResponse SaveConsumerProfileDocument(Agent agent, DOMAIN.SaveConsumerProfileDocumentRequest saveConsumerProfileDocumentRequest)
		{
		    Task<DOMAIN.SaveConsumerProfileDocumentResponse> callTask = Task.Run(() => this.SaveConsumerProfileDocumentAsync(agent, saveConsumerProfileDocumentRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SaveConsumerProfileDocumentResponse> SaveConsumerProfileDocumentAsync(Agent agent, DOMAIN.SaveConsumerProfileDocumentRequest saveConsumerProfileDocumentRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    saveConsumerProfileDocumentRequest.ThrowIfNull(nameof(saveConsumerProfileDocumentRequest));

		    var request = DomainToServiceExtensions.ToService(saveConsumerProfileDocumentRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.saveConsumerProfileDocumentAsync(new SERVICE.saveConsumerProfileDocumentRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.saveConsumerProfileDocumentResponse);
		}
		public DOMAIN.SaveConsumerProfileImageResponse SaveConsumerProfileImage(Agent agent, DOMAIN.SaveConsumerProfileImageRequest saveConsumerProfileImageRequest)
		{
		    Task<DOMAIN.SaveConsumerProfileImageResponse> callTask = Task.Run(() => this.SaveConsumerProfileImageAsync(agent, saveConsumerProfileImageRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SaveConsumerProfileImageResponse> SaveConsumerProfileImageAsync(Agent agent, DOMAIN.SaveConsumerProfileImageRequest saveConsumerProfileImageRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    saveConsumerProfileImageRequest.ThrowIfNull(nameof(saveConsumerProfileImageRequest));

		    var request = DomainToServiceExtensions.ToService(saveConsumerProfileImageRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.saveConsumerProfileImageAsync(new SERVICE.saveConsumerProfileImageRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.saveConsumerProfileImageResponse);
		}
		public DOMAIN.SaveDebugDataResponse SaveDebugData(Agent agent, DOMAIN.SaveDebugDataRequest saveDebugDataRequest)
		{
		    Task<DOMAIN.SaveDebugDataResponse> callTask = Task.Run(() => this.SaveDebugDataAsync(agent, saveDebugDataRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SaveDebugDataResponse> SaveDebugDataAsync(Agent agent, DOMAIN.SaveDebugDataRequest saveDebugDataRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    saveDebugDataRequest.ThrowIfNull(nameof(saveDebugDataRequest));

		    var request = DomainToServiceExtensions.ToService(saveDebugDataRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.saveDebugDataAsync(new SERVICE.saveDebugDataRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.saveDebugDataResponse);
		}
		public DOMAIN.SavePersonalIDImageResponse SavePersonalIDImage(Agent agent, DOMAIN.SavePersonalIDImageRequest savePersonalIDImageRequest)
		{
		    Task<DOMAIN.SavePersonalIDImageResponse> callTask = Task.Run(() => this.SavePersonalIDImageAsync(agent, savePersonalIDImageRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SavePersonalIDImageResponse> SavePersonalIDImageAsync(Agent agent, DOMAIN.SavePersonalIDImageRequest savePersonalIDImageRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    savePersonalIDImageRequest.ThrowIfNull(nameof(savePersonalIDImageRequest));

		    var request = DomainToServiceExtensions.ToService(savePersonalIDImageRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.savePersonalIDImageAsync(new SERVICE.savePersonalIDImageRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.savePersonalIDImageResponse);
		}
		public DOMAIN.SaveProfileResponse SaveProfile(Agent agent, DOMAIN.SaveProfileRequest saveProfileRequest)
		{
		    Task<DOMAIN.SaveProfileResponse> callTask = Task.Run(() => this.SaveProfileAsync(agent, saveProfileRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SaveProfileResponse> SaveProfileAsync(Agent agent, DOMAIN.SaveProfileRequest saveProfileRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    saveProfileRequest.ThrowIfNull(nameof(saveProfileRequest));

		    var request = DomainToServiceExtensions.ToService(saveProfileRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.saveProfileAsync(new SERVICE.saveProfileRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.saveProfileResponse);
		}
		public DOMAIN.SaveSubagentsResponse SaveSubagents(Agent agent, DOMAIN.SaveSubagentsRequest saveSubagentsRequest)
		{
		    Task<DOMAIN.SaveSubagentsResponse> callTask = Task.Run(() => this.SaveSubagentsAsync(agent, saveSubagentsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SaveSubagentsResponse> SaveSubagentsAsync(Agent agent, DOMAIN.SaveSubagentsRequest saveSubagentsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    saveSubagentsRequest.ThrowIfNull(nameof(saveSubagentsRequest));

		    var request = DomainToServiceExtensions.ToService(saveSubagentsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.saveSubagentsAsync(new SERVICE.saveSubagentsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.saveSubagentsResponse);
		}
		public DOMAIN.SaveTransactionDocumentResponse SaveTransactionDocument(Agent agent, DOMAIN.SaveTransactionDocumentRequest saveTransactionDocumentRequest)
		{
		    Task<DOMAIN.SaveTransactionDocumentResponse> callTask = Task.Run(() => this.SaveTransactionDocumentAsync(agent, saveTransactionDocumentRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SaveTransactionDocumentResponse> SaveTransactionDocumentAsync(Agent agent, DOMAIN.SaveTransactionDocumentRequest saveTransactionDocumentRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    saveTransactionDocumentRequest.ThrowIfNull(nameof(saveTransactionDocumentRequest));

		    var request = DomainToServiceExtensions.ToService(saveTransactionDocumentRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.saveTransactionDocumentAsync(new SERVICE.saveTransactionDocumentRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.saveTransactionDocumentResponse);
		}
		public DOMAIN.SearchConsumerProfilesResponse SearchConsumerProfiles(Agent agent, DOMAIN.SearchConsumerProfilesRequest searchConsumerProfilesRequest)
		{
		    Task<DOMAIN.SearchConsumerProfilesResponse> callTask = Task.Run(() => this.SearchConsumerProfilesAsync(agent, searchConsumerProfilesRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SearchConsumerProfilesResponse> SearchConsumerProfilesAsync(Agent agent, DOMAIN.SearchConsumerProfilesRequest searchConsumerProfilesRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    searchConsumerProfilesRequest.ThrowIfNull(nameof(searchConsumerProfilesRequest));

		    var request = DomainToServiceExtensions.ToService(searchConsumerProfilesRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.searchConsumerProfilesAsync(new SERVICE.searchConsumerProfilesRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.searchConsumerProfilesResponse);
		}
		public DOMAIN.SearchStagedTransactionsResponse SearchStagedTransactions(Agent agent, DOMAIN.SearchStagedTransactionsRequest searchStagedTransactionsRequest)
		{
		    Task<DOMAIN.SearchStagedTransactionsResponse> callTask = Task.Run(() => this.SearchStagedTransactionsAsync(agent, searchStagedTransactionsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SearchStagedTransactionsResponse> SearchStagedTransactionsAsync(Agent agent, DOMAIN.SearchStagedTransactionsRequest searchStagedTransactionsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    searchStagedTransactionsRequest.ThrowIfNull(nameof(searchStagedTransactionsRequest));

		    var request = DomainToServiceExtensions.ToService(searchStagedTransactionsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.searchStagedTransactionsAsync(new SERVICE.searchStagedTransactionsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.searchStagedTransactionsResponse);
		}
		public DOMAIN.SendReversalValidationResponse SendReversalValidation(Agent agent, DOMAIN.SendReversalValidationRequest sendReversalValidationRequest)
		{
		    Task<DOMAIN.SendReversalValidationResponse> callTask = Task.Run(() => this.SendReversalValidationAsync(agent, sendReversalValidationRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SendReversalValidationResponse> SendReversalValidationAsync(Agent agent, DOMAIN.SendReversalValidationRequest sendReversalValidationRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    sendReversalValidationRequest.ThrowIfNull(nameof(sendReversalValidationRequest));

		    var request = DomainToServiceExtensions.ToService(sendReversalValidationRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.sendReversalValidationAsync(new SERVICE.sendReversalValidationRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.sendReversalValidationResponse);
		}
		public DOMAIN.SendValidationResponse SendValidation(Agent agent, DOMAIN.SendValidationRequest sendValidationRequest)
		{
		    Task<DOMAIN.SendValidationResponse> callTask = Task.Run(() => this.SendValidationAsync(agent, sendValidationRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SendValidationResponse> SendValidationAsync(Agent agent, DOMAIN.SendValidationRequest sendValidationRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    sendValidationRequest.ThrowIfNull(nameof(sendValidationRequest));

		    var request = DomainToServiceExtensions.ToService(sendValidationRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.sendValidationAsync(new SERVICE.sendValidationRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.sendValidationResponse);
		}
		public DOMAIN.SubagentsResponse Subagents(Agent agent, DOMAIN.SubagentsRequest subagentsRequest)
		{
		    Task<DOMAIN.SubagentsResponse> callTask = Task.Run(() => this.SubagentsAsync(agent, subagentsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.SubagentsResponse> SubagentsAsync(Agent agent, DOMAIN.SubagentsRequest subagentsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    subagentsRequest.ThrowIfNull(nameof(subagentsRequest));

		    var request = DomainToServiceExtensions.ToService(subagentsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.subagentsAsync(new SERVICE.subagentsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.subagentsResponse);
		}
		public DOMAIN.TransactionLookupResponse TransactionLookup(Agent agent, DOMAIN.TransactionLookupRequest transactionLookupRequest)
		{
		    Task<DOMAIN.TransactionLookupResponse> callTask = Task.Run(() => this.TransactionLookupAsync(agent, transactionLookupRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.TransactionLookupResponse> TransactionLookupAsync(Agent agent, DOMAIN.TransactionLookupRequest transactionLookupRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    transactionLookupRequest.ThrowIfNull(nameof(transactionLookupRequest));

		    var request = DomainToServiceExtensions.ToService(transactionLookupRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.transactionLookupAsync(new SERVICE.transactionLookupRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.transactionLookupResponse);
		}
		public DOMAIN.TranslationsResponse Translations(Agent agent, DOMAIN.TranslationsRequest translationsRequest)
		{
		    Task<DOMAIN.TranslationsResponse> callTask = Task.Run(() => this.TranslationsAsync(agent, translationsRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.TranslationsResponse> TranslationsAsync(Agent agent, DOMAIN.TranslationsRequest translationsRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    translationsRequest.ThrowIfNull(nameof(translationsRequest));

		    var request = DomainToServiceExtensions.ToService(translationsRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.translationsAsync(new SERVICE.translationsRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.translationsResponse);
		}
		public DOMAIN.VariableReceiptInfoResponse VariableReceiptInfo(Agent agent, DOMAIN.VariableReceiptInfoRequest variableReceiptInfoRequest)
		{
		    Task<DOMAIN.VariableReceiptInfoResponse> callTask = Task.Run(() => this.VariableReceiptInfoAsync(agent, variableReceiptInfoRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.VariableReceiptInfoResponse> VariableReceiptInfoAsync(Agent agent, DOMAIN.VariableReceiptInfoRequest variableReceiptInfoRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    variableReceiptInfoRequest.ThrowIfNull(nameof(variableReceiptInfoRequest));

		    var request = DomainToServiceExtensions.ToService(variableReceiptInfoRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.variableReceiptInfoAsync(new SERVICE.variableReceiptInfoRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.variableReceiptInfoResponse);
		}
		public DOMAIN.VersionManifestResponse VersionManifest(Agent agent, DOMAIN.VersionManifestRequest versionManifestRequest)
		{
		    Task<DOMAIN.VersionManifestResponse> callTask = Task.Run(() => this.VersionManifestAsync(agent, versionManifestRequest));
		    callTask.Wait();
		    return callTask.Result;
		}

		public async Task<DOMAIN.VersionManifestResponse> VersionManifestAsync(Agent agent, DOMAIN.VersionManifestRequest versionManifestRequest)
		{
		    agent.ThrowIfNull(nameof(agent));
		    versionManifestRequest.ThrowIfNull(nameof(versionManifestRequest));

		    var request = DomainToServiceExtensions.ToService(versionManifestRequest, agent);

		    PopulateRequestWithConfig(request, agent);

		    var response = await AgentConnectProxyFactory.UseService(
		        serviceCall => serviceCall.versionManifestAsync(new SERVICE.versionManifestRequest1(request)), agent);

		    return ServiceToDomainExtensions.ToDomain(response.versionManifestResponse);
		}
    }
}