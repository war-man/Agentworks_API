//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Threading.Tasks;
using MoneyGram.AgentConnect.DomainModel;
using MoneyGram.AgentConnect.DomainModel.Transaction;
using MoneyGram.AgentConnect;
using MoneyGram.Common.Extensions;

namespace MoneyGram.AgentConnect
{
    /// <summary>
    ///     Class that acts as a quick decorator to enable
    ///     intercepting and overriding the behavior or specific Agent Connect calls.
    /// </summary>
    public abstract class AgentConnectDecorator : IAgentConnect
    {
        protected readonly IAgentConnect AgentConnect;

		public AgentConnectDecorator(IAgentConnect agentConnect)
        {
            agentConnect.ThrowIfNull(nameof(agentConnect));

            AgentConnect = agentConnect;
        }

		public virtual AmendValidationResponse AmendValidation(Agent agent, AmendValidationRequest amendValidationRequest)
		{
			return AgentConnect.AmendValidation(agent, amendValidationRequest);
		}

		public virtual async Task<AmendValidationResponse> AmendValidationAsync(Agent agent, AmendValidationRequest amendValidationRequest)
		{
			return await AgentConnect.AmendValidationAsync(agent, amendValidationRequest);
		}
		public virtual BillerSearchResponse BillerSearch(Agent agent, BillerSearchRequest billerSearchRequest)
		{
			return AgentConnect.BillerSearch(agent, billerSearchRequest);
		}

		public virtual async Task<BillerSearchResponse> BillerSearchAsync(Agent agent, BillerSearchRequest billerSearchRequest)
		{
			return await AgentConnect.BillerSearchAsync(agent, billerSearchRequest);
		}
		public virtual BillPaymentDetailReportResponse BillPaymentDetailReport(Agent agent, BillPaymentDetailReportRequest billPaymentDetailReportRequest)
		{
			return AgentConnect.BillPaymentDetailReport(agent, billPaymentDetailReportRequest);
		}

		public virtual async Task<BillPaymentDetailReportResponse> BillPaymentDetailReportAsync(Agent agent, BillPaymentDetailReportRequest billPaymentDetailReportRequest)
		{
			return await AgentConnect.BillPaymentDetailReportAsync(agent, billPaymentDetailReportRequest);
		}
		public virtual BillPaymentSummaryReportResponse BillPaymentSummaryReport(Agent agent, BillPaymentSummaryReportRequest billPaymentSummaryReportRequest)
		{
			return AgentConnect.BillPaymentSummaryReport(agent, billPaymentSummaryReportRequest);
		}

		public virtual async Task<BillPaymentSummaryReportResponse> BillPaymentSummaryReportAsync(Agent agent, BillPaymentSummaryReportRequest billPaymentSummaryReportRequest)
		{
			return await AgentConnect.BillPaymentSummaryReportAsync(agent, billPaymentSummaryReportRequest);
		}
		public virtual BPValidationResponse BpValidation(Agent agent, BPValidationRequest bpValidationRequest)
		{
			return AgentConnect.BpValidation(agent, bpValidationRequest);
		}

		public virtual async Task<BPValidationResponse> BpValidationAsync(Agent agent, BPValidationRequest bpValidationRequest)
		{
			return await AgentConnect.BpValidationAsync(agent, bpValidationRequest);
		}
		public virtual CheckInResponse CheckIn(Agent agent, CheckInRequest checkInRequest)
		{
			return AgentConnect.CheckIn(agent, checkInRequest);
		}

		public virtual async Task<CheckInResponse> CheckInAsync(Agent agent, CheckInRequest checkInRequest)
		{
			return await AgentConnect.CheckInAsync(agent, checkInRequest);
		}
		public virtual CityListResponse CityList(Agent agent, CityListRequest cityListRequest)
		{
			return AgentConnect.CityList(agent, cityListRequest);
		}

		public virtual async Task<CityListResponse> CityListAsync(Agent agent, CityListRequest cityListRequest)
		{
			return await AgentConnect.CityListAsync(agent, cityListRequest);
		}
		public virtual CompleteSessionResponse CompleteSession(Agent agent, CompleteSessionRequest completeSessionRequest)
		{
			return AgentConnect.CompleteSession(agent, completeSessionRequest);
		}

		public virtual async Task<CompleteSessionResponse> CompleteSessionAsync(Agent agent, CompleteSessionRequest completeSessionRequest)
		{
			return await AgentConnect.CompleteSessionAsync(agent, completeSessionRequest);
		}
		public virtual ComplianceTransactionResponse ComplianceTransaction(Agent agent, ComplianceTransactionRequest complianceTransactionRequest)
		{
			return AgentConnect.ComplianceTransaction(agent, complianceTransactionRequest);
		}

		public virtual async Task<ComplianceTransactionResponse> ComplianceTransactionAsync(Agent agent, ComplianceTransactionRequest complianceTransactionRequest)
		{
			return await AgentConnect.ComplianceTransactionAsync(agent, complianceTransactionRequest);
		}
		public virtual ConfirmTokenResponse ConfirmToken(Agent agent, ConfirmTokenRequest confirmTokenRequest)
		{
			return AgentConnect.ConfirmToken(agent, confirmTokenRequest);
		}

		public virtual async Task<ConfirmTokenResponse> ConfirmTokenAsync(Agent agent, ConfirmTokenRequest confirmTokenRequest)
		{
			return await AgentConnect.ConfirmTokenAsync(agent, confirmTokenRequest);
		}
		public virtual ConsumerHistoryLookupResponse ConsumerHistoryLookup(Agent agent, ConsumerHistoryLookupRequest consumerHistoryLookupRequest)
		{
			return AgentConnect.ConsumerHistoryLookup(agent, consumerHistoryLookupRequest);
		}

		public virtual async Task<ConsumerHistoryLookupResponse> ConsumerHistoryLookupAsync(Agent agent, ConsumerHistoryLookupRequest consumerHistoryLookupRequest)
		{
			return await AgentConnect.ConsumerHistoryLookupAsync(agent, consumerHistoryLookupRequest);
		}
		public virtual CreateOrUpdateProfileConsumerResponse CreateOrUpdateProfileConsumer(Agent agent, CreateOrUpdateProfileConsumerRequest createOrUpdateProfileConsumerRequest)
		{
			return AgentConnect.CreateOrUpdateProfileConsumer(agent, createOrUpdateProfileConsumerRequest);
		}

		public virtual async Task<CreateOrUpdateProfileConsumerResponse> CreateOrUpdateProfileConsumerAsync(Agent agent, CreateOrUpdateProfileConsumerRequest createOrUpdateProfileConsumerRequest)
		{
			return await AgentConnect.CreateOrUpdateProfileConsumerAsync(agent, createOrUpdateProfileConsumerRequest);
		}
		public virtual CreateOrUpdateProfileReceiverResponse CreateOrUpdateProfileReceiver(Agent agent, CreateOrUpdateProfileReceiverRequest createOrUpdateProfileReceiverRequest)
		{
			return AgentConnect.CreateOrUpdateProfileReceiver(agent, createOrUpdateProfileReceiverRequest);
		}

		public virtual async Task<CreateOrUpdateProfileReceiverResponse> CreateOrUpdateProfileReceiverAsync(Agent agent, CreateOrUpdateProfileReceiverRequest createOrUpdateProfileReceiverRequest)
		{
			return await AgentConnect.CreateOrUpdateProfileReceiverAsync(agent, createOrUpdateProfileReceiverRequest);
		}
		public virtual CreateOrUpdateProfileSenderResponse CreateOrUpdateProfileSender(Agent agent, CreateOrUpdateProfileSenderRequest createOrUpdateProfileSenderRequest)
		{
			return AgentConnect.CreateOrUpdateProfileSender(agent, createOrUpdateProfileSenderRequest);
		}

		public virtual async Task<CreateOrUpdateProfileSenderResponse> CreateOrUpdateProfileSenderAsync(Agent agent, CreateOrUpdateProfileSenderRequest createOrUpdateProfileSenderRequest)
		{
			return await AgentConnect.CreateOrUpdateProfileSenderAsync(agent, createOrUpdateProfileSenderRequest);
		}
		public virtual DepositAnnouncementResponse DepositAnnouncement(Agent agent, DepositAnnouncementRequest depositAnnouncementRequest)
		{
			return AgentConnect.DepositAnnouncement(agent, depositAnnouncementRequest);
		}

		public virtual async Task<DepositAnnouncementResponse> DepositAnnouncementAsync(Agent agent, DepositAnnouncementRequest depositAnnouncementRequest)
		{
			return await AgentConnect.DepositAnnouncementAsync(agent, depositAnnouncementRequest);
		}
		public virtual DirectoryOfAgentsByAreaCodePrefixResponse DirectoryOfAgentsByAreaCodePrefix(Agent agent, DirectoryOfAgentsByAreaCodePrefixRequest directoryOfAgentsByAreaCodePrefixRequest)
		{
			return AgentConnect.DirectoryOfAgentsByAreaCodePrefix(agent, directoryOfAgentsByAreaCodePrefixRequest);
		}

		public virtual async Task<DirectoryOfAgentsByAreaCodePrefixResponse> DirectoryOfAgentsByAreaCodePrefixAsync(Agent agent, DirectoryOfAgentsByAreaCodePrefixRequest directoryOfAgentsByAreaCodePrefixRequest)
		{
			return await AgentConnect.DirectoryOfAgentsByAreaCodePrefixAsync(agent, directoryOfAgentsByAreaCodePrefixRequest);
		}
		public virtual DirectoryOfAgentsByCityResponse DirectoryOfAgentsByCity(Agent agent, DirectoryOfAgentsByCityRequest directoryOfAgentsByCityRequest)
		{
			return AgentConnect.DirectoryOfAgentsByCity(agent, directoryOfAgentsByCityRequest);
		}

		public virtual async Task<DirectoryOfAgentsByCityResponse> DirectoryOfAgentsByCityAsync(Agent agent, DirectoryOfAgentsByCityRequest directoryOfAgentsByCityRequest)
		{
			return await AgentConnect.DirectoryOfAgentsByCityAsync(agent, directoryOfAgentsByCityRequest);
		}
		public virtual DirectoryOfAgentsByZipResponse DirectoryOfAgentsByZip(Agent agent, DirectoryOfAgentsByZipRequest directoryOfAgentsByZipRequest)
		{
			return AgentConnect.DirectoryOfAgentsByZip(agent, directoryOfAgentsByZipRequest);
		}

		public virtual async Task<DirectoryOfAgentsByZipResponse> DirectoryOfAgentsByZipAsync(Agent agent, DirectoryOfAgentsByZipRequest directoryOfAgentsByZipRequest)
		{
			return await AgentConnect.DirectoryOfAgentsByZipAsync(agent, directoryOfAgentsByZipRequest);
		}
		public virtual DisclosureTextDetailsResponse DisclosureTextDetails(Agent agent, DisclosureTextDetailsRequest disclosureTextDetailsRequest)
		{
			return AgentConnect.DisclosureTextDetails(agent, disclosureTextDetailsRequest);
		}

		public virtual async Task<DisclosureTextDetailsResponse> DisclosureTextDetailsAsync(Agent agent, DisclosureTextDetailsRequest disclosureTextDetailsRequest)
		{
			return await AgentConnect.DisclosureTextDetailsAsync(agent, disclosureTextDetailsRequest);
		}
		public virtual DoddFrankStateRegulatorInfoResponse DoddFrankStateRegulatorInfo(Agent agent, DoddFrankStateRegulatorInfoRequest doddFrankStateRegulatorInfoRequest)
		{
			return AgentConnect.DoddFrankStateRegulatorInfo(agent, doddFrankStateRegulatorInfoRequest);
		}

		public virtual async Task<DoddFrankStateRegulatorInfoResponse> DoddFrankStateRegulatorInfoAsync(Agent agent, DoddFrankStateRegulatorInfoRequest doddFrankStateRegulatorInfoRequest)
		{
			return await AgentConnect.DoddFrankStateRegulatorInfoAsync(agent, doddFrankStateRegulatorInfoRequest);
		}
		public virtual DwInitialSetupResponse DwInitialSetup(Agent agent, DwInitialSetupRequest dwInitialSetupRequest)
		{
			return AgentConnect.DwInitialSetup(agent, dwInitialSetupRequest);
		}

		public virtual async Task<DwInitialSetupResponse> DwInitialSetupAsync(Agent agent, DwInitialSetupRequest dwInitialSetupRequest)
		{
			return await AgentConnect.DwInitialSetupAsync(agent, dwInitialSetupRequest);
		}
		public virtual DwPasswordResponse DwPassword(Agent agent, DwPasswordRequest dwPasswordRequest)
		{
			return AgentConnect.DwPassword(agent, dwPasswordRequest);
		}

		public virtual async Task<DwPasswordResponse> DwPasswordAsync(Agent agent, DwPasswordRequest dwPasswordRequest)
		{
			return await AgentConnect.DwPasswordAsync(agent, dwPasswordRequest);
		}
		public virtual DwProfileResponse DwProfile(Agent agent, DwProfileRequest dwProfileRequest)
		{
			return AgentConnect.DwProfile(agent, dwProfileRequest);
		}

		public virtual async Task<DwProfileResponse> DwProfileAsync(Agent agent, DwProfileRequest dwProfileRequest)
		{
			return await AgentConnect.DwProfileAsync(agent, dwProfileRequest);
		}
		public virtual FeeLookupResponse FeeLookup(Agent agent, FeeLookupRequest feeLookupRequest)
		{
			return AgentConnect.FeeLookup(agent, feeLookupRequest);
		}

		public virtual async Task<FeeLookupResponse> FeeLookupAsync(Agent agent, FeeLookupRequest feeLookupRequest)
		{
			return await AgentConnect.FeeLookupAsync(agent, feeLookupRequest);
		}
		public virtual FeeLookupBySendCountryResponse FeeLookupBySendCountry(Agent agent, FeeLookupBySendCountryRequest feeLookupBySendCountryRequest)
		{
			return AgentConnect.FeeLookupBySendCountry(agent, feeLookupBySendCountryRequest);
		}

		public virtual async Task<FeeLookupBySendCountryResponse> FeeLookupBySendCountryAsync(Agent agent, FeeLookupBySendCountryRequest feeLookupBySendCountryRequest)
		{
			return await AgentConnect.FeeLookupBySendCountryAsync(agent, feeLookupBySendCountryRequest);
		}
		public virtual GetAllErrorsResponse GetAllErrors(Agent agent, GetAllErrorsRequest getAllErrorsRequest)
		{
			return AgentConnect.GetAllErrors(agent, getAllErrorsRequest);
		}

		public virtual async Task<GetAllErrorsResponse> GetAllErrorsAsync(Agent agent, GetAllErrorsRequest getAllErrorsRequest)
		{
			return await AgentConnect.GetAllErrorsAsync(agent, getAllErrorsRequest);
		}
		public virtual GetAllFieldsResponse GetAllFields(Agent agent, GetAllFieldsRequest getAllFieldsRequest)
		{
			return AgentConnect.GetAllFields(agent, getAllFieldsRequest);
		}

		public virtual async Task<GetAllFieldsResponse> GetAllFieldsAsync(Agent agent, GetAllFieldsRequest getAllFieldsRequest)
		{
			return await AgentConnect.GetAllFieldsAsync(agent, getAllFieldsRequest);
		}
		public virtual GetBankDetailsResponse GetBankDetails(Agent agent, GetBankDetailsRequest getBankDetailsRequest)
		{
			return AgentConnect.GetBankDetails(agent, getBankDetailsRequest);
		}

		public virtual async Task<GetBankDetailsResponse> GetBankDetailsAsync(Agent agent, GetBankDetailsRequest getBankDetailsRequest)
		{
			return await AgentConnect.GetBankDetailsAsync(agent, getBankDetailsRequest);
		}
		public virtual GetBankDetailsByLevelResponse GetBankDetailsByLevel(Agent agent, GetBankDetailsByLevelRequest getBankDetailsByLevelRequest)
		{
			return AgentConnect.GetBankDetailsByLevel(agent, getBankDetailsByLevelRequest);
		}

		public virtual async Task<GetBankDetailsByLevelResponse> GetBankDetailsByLevelAsync(Agent agent, GetBankDetailsByLevelRequest getBankDetailsByLevelRequest)
		{
			return await AgentConnect.GetBankDetailsByLevelAsync(agent, getBankDetailsByLevelRequest);
		}
		public virtual GetBroadcastMessagesResponse GetBroadcastMessages(Agent agent, GetBroadcastMessagesRequest getBroadcastMessagesRequest)
		{
			return AgentConnect.GetBroadcastMessages(agent, getBroadcastMessagesRequest);
		}

		public virtual async Task<GetBroadcastMessagesResponse> GetBroadcastMessagesAsync(Agent agent, GetBroadcastMessagesRequest getBroadcastMessagesRequest)
		{
			return await AgentConnect.GetBroadcastMessagesAsync(agent, getBroadcastMessagesRequest);
		}
		public virtual GetConsumerProfileDocumentResponse GetConsumerProfileDocument(Agent agent, GetConsumerProfileDocumentRequest getConsumerProfileDocumentRequest)
		{
			return AgentConnect.GetConsumerProfileDocument(agent, getConsumerProfileDocumentRequest);
		}

		public virtual async Task<GetConsumerProfileDocumentResponse> GetConsumerProfileDocumentAsync(Agent agent, GetConsumerProfileDocumentRequest getConsumerProfileDocumentRequest)
		{
			return await AgentConnect.GetConsumerProfileDocumentAsync(agent, getConsumerProfileDocumentRequest);
		}
		public virtual GetConsumerProfileTransactionHistoryResponse GetConsumerProfileTransactionHistory(Agent agent, GetConsumerProfileTransactionHistoryRequest getConsumerProfileTransactionHistoryRequest)
		{
			return AgentConnect.GetConsumerProfileTransactionHistory(agent, getConsumerProfileTransactionHistoryRequest);
		}

		public virtual async Task<GetConsumerProfileTransactionHistoryResponse> GetConsumerProfileTransactionHistoryAsync(Agent agent, GetConsumerProfileTransactionHistoryRequest getConsumerProfileTransactionHistoryRequest)
		{
			return await AgentConnect.GetConsumerProfileTransactionHistoryAsync(agent, getConsumerProfileTransactionHistoryRequest);
		}
		public virtual GetCountryInfoResponse GetCountryInfo(Agent agent, GetCountryInfoRequest getCountryInfoRequest)
		{
			return AgentConnect.GetCountryInfo(agent, getCountryInfoRequest);
		}

		public virtual async Task<GetCountryInfoResponse> GetCountryInfoAsync(Agent agent, GetCountryInfoRequest getCountryInfoRequest)
		{
			return await AgentConnect.GetCountryInfoAsync(agent, getCountryInfoRequest);
		}
		public virtual GetCountrySubdivisionResponse GetCountrySubdivision(Agent agent, GetCountrySubdivisionRequest getCountrySubdivisionRequest)
		{
			return AgentConnect.GetCountrySubdivision(agent, getCountrySubdivisionRequest);
		}

		public virtual async Task<GetCountrySubdivisionResponse> GetCountrySubdivisionAsync(Agent agent, GetCountrySubdivisionRequest getCountrySubdivisionRequest)
		{
			return await AgentConnect.GetCountrySubdivisionAsync(agent, getCountrySubdivisionRequest);
		}
		public virtual GetCurrencyInfoResponse GetCurrencyInfo(Agent agent, GetCurrencyInfoRequest getCurrencyInfoRequest)
		{
			return AgentConnect.GetCurrencyInfo(agent, getCurrencyInfoRequest);
		}

		public virtual async Task<GetCurrencyInfoResponse> GetCurrencyInfoAsync(Agent agent, GetCurrencyInfoRequest getCurrencyInfoRequest)
		{
			return await AgentConnect.GetCurrencyInfoAsync(agent, getCurrencyInfoRequest);
		}
		public virtual GetDebugDataResponse GetDebugData(Agent agent, GetDebugDataRequest getDebugDataRequest)
		{
			return AgentConnect.GetDebugData(agent, getDebugDataRequest);
		}

		public virtual async Task<GetDebugDataResponse> GetDebugDataAsync(Agent agent, GetDebugDataRequest getDebugDataRequest)
		{
			return await AgentConnect.GetDebugDataAsync(agent, getDebugDataRequest);
		}
		public virtual GetDepositBankListResponse GetDepositBankList(Agent agent, GetDepositBankListRequest getDepositBankListRequest)
		{
			return AgentConnect.GetDepositBankList(agent, getDepositBankListRequest);
		}

		public virtual async Task<GetDepositBankListResponse> GetDepositBankListAsync(Agent agent, GetDepositBankListRequest getDepositBankListRequest)
		{
			return await AgentConnect.GetDepositBankListAsync(agent, getDepositBankListRequest);
		}
		public virtual GetDepositInformationResponse GetDepositInformation(Agent agent, GetDepositInformationRequest getDepositInformationRequest)
		{
			return AgentConnect.GetDepositInformation(agent, getDepositInformationRequest);
		}

		public virtual async Task<GetDepositInformationResponse> GetDepositInformationAsync(Agent agent, GetDepositInformationRequest getDepositInformationRequest)
		{
			return await AgentConnect.GetDepositInformationAsync(agent, getDepositInformationRequest);
		}
		public virtual GetEnumerationsResponse GetEnumerations(Agent agent, GetEnumerationsRequest getEnumerationsRequest)
		{
			return AgentConnect.GetEnumerations(agent, getEnumerationsRequest);
		}

		public virtual async Task<GetEnumerationsResponse> GetEnumerationsAsync(Agent agent, GetEnumerationsRequest getEnumerationsRequest)
		{
			return await AgentConnect.GetEnumerationsAsync(agent, getEnumerationsRequest);
		}
		public virtual GetPersonalIDImageResponse GetPersonalIDImage(Agent agent, GetPersonalIDImageRequest getPersonalIDImageRequest)
		{
			return AgentConnect.GetPersonalIDImage(agent, getPersonalIDImageRequest);
		}

		public virtual async Task<GetPersonalIDImageResponse> GetPersonalIDImageAsync(Agent agent, GetPersonalIDImageRequest getPersonalIDImageRequest)
		{
			return await AgentConnect.GetPersonalIDImageAsync(agent, getPersonalIDImageRequest);
		}
		public virtual GetProfileConsumerResponse GetProfileConsumer(Agent agent, GetProfileConsumerRequest getProfileConsumerRequest)
		{
			return AgentConnect.GetProfileConsumer(agent, getProfileConsumerRequest);
		}

		public virtual async Task<GetProfileConsumerResponse> GetProfileConsumerAsync(Agent agent, GetProfileConsumerRequest getProfileConsumerRequest)
		{
			return await AgentConnect.GetProfileConsumerAsync(agent, getProfileConsumerRequest);
		}
		public virtual GetProfileReceiverResponse GetProfileReceiver(Agent agent, GetProfileReceiverRequest getProfileReceiverRequest)
		{
			return AgentConnect.GetProfileReceiver(agent, getProfileReceiverRequest);
		}

		public virtual async Task<GetProfileReceiverResponse> GetProfileReceiverAsync(Agent agent, GetProfileReceiverRequest getProfileReceiverRequest)
		{
			return await AgentConnect.GetProfileReceiverAsync(agent, getProfileReceiverRequest);
		}
		public virtual GetProfileSenderResponse GetProfileSender(Agent agent, GetProfileSenderRequest getProfileSenderRequest)
		{
			return AgentConnect.GetProfileSender(agent, getProfileSenderRequest);
		}

		public virtual async Task<GetProfileSenderResponse> GetProfileSenderAsync(Agent agent, GetProfileSenderRequest getProfileSenderRequest)
		{
			return await AgentConnect.GetProfileSenderAsync(agent, getProfileSenderRequest);
		}
		public virtual GetReceiptForReprintResponse GetReceiptForReprint(Agent agent, GetReceiptForReprintRequest getReceiptForReprintRequest)
		{
			return AgentConnect.GetReceiptForReprint(agent, getReceiptForReprintRequest);
		}

		public virtual async Task<GetReceiptForReprintResponse> GetReceiptForReprintAsync(Agent agent, GetReceiptForReprintRequest getReceiptForReprintRequest)
		{
			return await AgentConnect.GetReceiptForReprintAsync(agent, getReceiptForReprintRequest);
		}
		public virtual GetServiceOptionsResponse GetServiceOptions(Agent agent, GetServiceOptionsRequest getServiceOptionsRequest)
		{
			return AgentConnect.GetServiceOptions(agent, getServiceOptionsRequest);
		}

		public virtual async Task<GetServiceOptionsResponse> GetServiceOptionsAsync(Agent agent, GetServiceOptionsRequest getServiceOptionsRequest)
		{
			return await AgentConnect.GetServiceOptionsAsync(agent, getServiceOptionsRequest);
		}
		public virtual GetUCPByConsumerAttributesResponse GetUCPByConsumerAttributes(Agent agent, GetUCPByConsumerAttributesRequest getUCPByConsumerAttributesRequest)
		{
			return AgentConnect.GetUCPByConsumerAttributes(agent, getUCPByConsumerAttributesRequest);
		}

		public virtual async Task<GetUCPByConsumerAttributesResponse> GetUCPByConsumerAttributesAsync(Agent agent, GetUCPByConsumerAttributesRequest getUCPByConsumerAttributesRequest)
		{
			return await AgentConnect.GetUCPByConsumerAttributesAsync(agent, getUCPByConsumerAttributesRequest);
		}
		public virtual IndustryResponse Industry(Agent agent, IndustryRequest industryRequest)
		{
			return AgentConnect.Industry(agent, industryRequest);
		}

		public virtual async Task<IndustryResponse> IndustryAsync(Agent agent, IndustryRequest industryRequest)
		{
			return await AgentConnect.IndustryAsync(agent, industryRequest);
		}
		public virtual InitialSetupResponse InitialSetup(Agent agent, InitialSetupRequest initialSetupRequest)
		{
			return AgentConnect.InitialSetup(agent, initialSetupRequest);
		}

		public virtual async Task<InitialSetupResponse> InitialSetupAsync(Agent agent, InitialSetupRequest initialSetupRequest)
		{
			return await AgentConnect.InitialSetupAsync(agent, initialSetupRequest);
		}
		public virtual InjectedInstructionResponse InjectedInstruction(Agent agent, InjectedInstructionRequest injectedInstructionRequest)
		{
			return AgentConnect.InjectedInstruction(agent, injectedInstructionRequest);
		}

		public virtual async Task<InjectedInstructionResponse> InjectedInstructionAsync(Agent agent, InjectedInstructionRequest injectedInstructionRequest)
		{
			return await AgentConnect.InjectedInstructionAsync(agent, injectedInstructionRequest);
		}
		public virtual MoneyGramReceiveDetailReportResponse MoneyGramReceiveDetailReport(Agent agent, MoneyGramReceiveDetailReportRequest moneyGramReceiveDetailReportRequest)
		{
			return AgentConnect.MoneyGramReceiveDetailReport(agent, moneyGramReceiveDetailReportRequest);
		}

		public virtual async Task<MoneyGramReceiveDetailReportResponse> MoneyGramReceiveDetailReportAsync(Agent agent, MoneyGramReceiveDetailReportRequest moneyGramReceiveDetailReportRequest)
		{
			return await AgentConnect.MoneyGramReceiveDetailReportAsync(agent, moneyGramReceiveDetailReportRequest);
		}
		public virtual MoneyGramReceiveSummaryReportResponse MoneyGramReceiveSummaryReport(Agent agent, MoneyGramReceiveSummaryReportRequest moneyGramReceiveSummaryReportRequest)
		{
			return AgentConnect.MoneyGramReceiveSummaryReport(agent, moneyGramReceiveSummaryReportRequest);
		}

		public virtual async Task<MoneyGramReceiveSummaryReportResponse> MoneyGramReceiveSummaryReportAsync(Agent agent, MoneyGramReceiveSummaryReportRequest moneyGramReceiveSummaryReportRequest)
		{
			return await AgentConnect.MoneyGramReceiveSummaryReportAsync(agent, moneyGramReceiveSummaryReportRequest);
		}
		public virtual MoneyGramSendDetailReportResponse MoneyGramSendDetailReport(Agent agent, MoneyGramSendDetailReportRequest moneyGramSendDetailReportRequest)
		{
			return AgentConnect.MoneyGramSendDetailReport(agent, moneyGramSendDetailReportRequest);
		}

		public virtual async Task<MoneyGramSendDetailReportResponse> MoneyGramSendDetailReportAsync(Agent agent, MoneyGramSendDetailReportRequest moneyGramSendDetailReportRequest)
		{
			return await AgentConnect.MoneyGramSendDetailReportAsync(agent, moneyGramSendDetailReportRequest);
		}
		public virtual MoneyGramSendDetailReportWithTaxResponse MoneyGramSendDetailReportWithTax(Agent agent, MoneyGramSendDetailReportWithTaxRequest moneyGramSendDetailReportWithTaxRequest)
		{
			return AgentConnect.MoneyGramSendDetailReportWithTax(agent, moneyGramSendDetailReportWithTaxRequest);
		}

		public virtual async Task<MoneyGramSendDetailReportWithTaxResponse> MoneyGramSendDetailReportWithTaxAsync(Agent agent, MoneyGramSendDetailReportWithTaxRequest moneyGramSendDetailReportWithTaxRequest)
		{
			return await AgentConnect.MoneyGramSendDetailReportWithTaxAsync(agent, moneyGramSendDetailReportWithTaxRequest);
		}
		public virtual MoneyGramSendSummaryReportResponse MoneyGramSendSummaryReport(Agent agent, MoneyGramSendSummaryReportRequest moneyGramSendSummaryReportRequest)
		{
			return AgentConnect.MoneyGramSendSummaryReport(agent, moneyGramSendSummaryReportRequest);
		}

		public virtual async Task<MoneyGramSendSummaryReportResponse> MoneyGramSendSummaryReportAsync(Agent agent, MoneyGramSendSummaryReportRequest moneyGramSendSummaryReportRequest)
		{
			return await AgentConnect.MoneyGramSendSummaryReportAsync(agent, moneyGramSendSummaryReportRequest);
		}
		public virtual MoneyOrderTotalResponse MoneyOrderTotal(Agent agent, MoneyOrderTotalRequest moneyOrderTotalRequest)
		{
			return AgentConnect.MoneyOrderTotal(agent, moneyOrderTotalRequest);
		}

		public virtual async Task<MoneyOrderTotalResponse> MoneyOrderTotalAsync(Agent agent, MoneyOrderTotalRequest moneyOrderTotalRequest)
		{
			return await AgentConnect.MoneyOrderTotalAsync(agent, moneyOrderTotalRequest);
		}
		public virtual OpenOTPLoginResponse OpenOTPLogin(Agent agent, OpenOTPLoginRequest openOTPLoginRequest)
		{
			return AgentConnect.OpenOTPLogin(agent, openOTPLoginRequest);
		}

		public virtual async Task<OpenOTPLoginResponse> OpenOTPLoginAsync(Agent agent, OpenOTPLoginRequest openOTPLoginRequest)
		{
			return await AgentConnect.OpenOTPLoginAsync(agent, openOTPLoginRequest);
		}
		public virtual ProfileResponse Profile(Agent agent, ProfileRequest profileRequest)
		{
			return AgentConnect.Profile(agent, profileRequest);
		}

		public virtual async Task<ProfileResponse> ProfileAsync(Agent agent, ProfileRequest profileRequest)
		{
			return await AgentConnect.ProfileAsync(agent, profileRequest);
		}
		public virtual ProfileChangeResponse ProfileChange(Agent agent, ProfileChangeRequest profileChangeRequest)
		{
			return AgentConnect.ProfileChange(agent, profileChangeRequest);
		}

		public virtual async Task<ProfileChangeResponse> ProfileChangeAsync(Agent agent, ProfileChangeRequest profileChangeRequest)
		{
			return await AgentConnect.ProfileChangeAsync(agent, profileChangeRequest);
		}
		public virtual PromotionLookupByCodeResponse PromotionLookupByCode(Agent agent, PromotionLookupByCodeRequest promotionLookupByCodeRequest)
		{
			return AgentConnect.PromotionLookupByCode(agent, promotionLookupByCodeRequest);
		}

		public virtual async Task<PromotionLookupByCodeResponse> PromotionLookupByCodeAsync(Agent agent, PromotionLookupByCodeRequest promotionLookupByCodeRequest)
		{
			return await AgentConnect.PromotionLookupByCodeAsync(agent, promotionLookupByCodeRequest);
		}
		public virtual ReceiptsFormatDetailsResponse ReceiptsFormatDetails(Agent agent, ReceiptsFormatDetailsRequest receiptsFormatDetailsRequest)
		{
			return AgentConnect.ReceiptsFormatDetails(agent, receiptsFormatDetailsRequest);
		}

		public virtual async Task<ReceiptsFormatDetailsResponse> ReceiptsFormatDetailsAsync(Agent agent, ReceiptsFormatDetailsRequest receiptsFormatDetailsRequest)
		{
			return await AgentConnect.ReceiptsFormatDetailsAsync(agent, receiptsFormatDetailsRequest);
		}
		public virtual ReceiveReversalValidationResponse ReceiveReversalValidation(Agent agent, ReceiveReversalValidationRequest receiveReversalValidationRequest)
		{
			return AgentConnect.ReceiveReversalValidation(agent, receiveReversalValidationRequest);
		}

		public virtual async Task<ReceiveReversalValidationResponse> ReceiveReversalValidationAsync(Agent agent, ReceiveReversalValidationRequest receiveReversalValidationRequest)
		{
			return await AgentConnect.ReceiveReversalValidationAsync(agent, receiveReversalValidationRequest);
		}
		public virtual ReceiveValidationResponse ReceiveValidation(Agent agent, ReceiveValidationRequest receiveValidationRequest)
		{
			return AgentConnect.ReceiveValidation(agent, receiveValidationRequest);
		}

		public virtual async Task<ReceiveValidationResponse> ReceiveValidationAsync(Agent agent, ReceiveValidationRequest receiveValidationRequest)
		{
			return await AgentConnect.ReceiveValidationAsync(agent, receiveValidationRequest);
		}
		public virtual RegisterHardTokenResponse RegisterHardToken(Agent agent, RegisterHardTokenRequest registerHardTokenRequest)
		{
			return AgentConnect.RegisterHardToken(agent, registerHardTokenRequest);
		}

		public virtual async Task<RegisterHardTokenResponse> RegisterHardTokenAsync(Agent agent, RegisterHardTokenRequest registerHardTokenRequest)
		{
			return await AgentConnect.RegisterHardTokenAsync(agent, registerHardTokenRequest);
		}
		public virtual SaveConsumerProfileDocumentResponse SaveConsumerProfileDocument(Agent agent, SaveConsumerProfileDocumentRequest saveConsumerProfileDocumentRequest)
		{
			return AgentConnect.SaveConsumerProfileDocument(agent, saveConsumerProfileDocumentRequest);
		}

		public virtual async Task<SaveConsumerProfileDocumentResponse> SaveConsumerProfileDocumentAsync(Agent agent, SaveConsumerProfileDocumentRequest saveConsumerProfileDocumentRequest)
		{
			return await AgentConnect.SaveConsumerProfileDocumentAsync(agent, saveConsumerProfileDocumentRequest);
		}
		public virtual SaveConsumerProfileImageResponse SaveConsumerProfileImage(Agent agent, SaveConsumerProfileImageRequest saveConsumerProfileImageRequest)
		{
			return AgentConnect.SaveConsumerProfileImage(agent, saveConsumerProfileImageRequest);
		}

		public virtual async Task<SaveConsumerProfileImageResponse> SaveConsumerProfileImageAsync(Agent agent, SaveConsumerProfileImageRequest saveConsumerProfileImageRequest)
		{
			return await AgentConnect.SaveConsumerProfileImageAsync(agent, saveConsumerProfileImageRequest);
		}
		public virtual SaveDebugDataResponse SaveDebugData(Agent agent, SaveDebugDataRequest saveDebugDataRequest)
		{
			return AgentConnect.SaveDebugData(agent, saveDebugDataRequest);
		}

		public virtual async Task<SaveDebugDataResponse> SaveDebugDataAsync(Agent agent, SaveDebugDataRequest saveDebugDataRequest)
		{
			return await AgentConnect.SaveDebugDataAsync(agent, saveDebugDataRequest);
		}
		public virtual SavePersonalIDImageResponse SavePersonalIDImage(Agent agent, SavePersonalIDImageRequest savePersonalIDImageRequest)
		{
			return AgentConnect.SavePersonalIDImage(agent, savePersonalIDImageRequest);
		}

		public virtual async Task<SavePersonalIDImageResponse> SavePersonalIDImageAsync(Agent agent, SavePersonalIDImageRequest savePersonalIDImageRequest)
		{
			return await AgentConnect.SavePersonalIDImageAsync(agent, savePersonalIDImageRequest);
		}
		public virtual SaveProfileResponse SaveProfile(Agent agent, SaveProfileRequest saveProfileRequest)
		{
			return AgentConnect.SaveProfile(agent, saveProfileRequest);
		}

		public virtual async Task<SaveProfileResponse> SaveProfileAsync(Agent agent, SaveProfileRequest saveProfileRequest)
		{
			return await AgentConnect.SaveProfileAsync(agent, saveProfileRequest);
		}
		public virtual SaveSubagentsResponse SaveSubagents(Agent agent, SaveSubagentsRequest saveSubagentsRequest)
		{
			return AgentConnect.SaveSubagents(agent, saveSubagentsRequest);
		}

		public virtual async Task<SaveSubagentsResponse> SaveSubagentsAsync(Agent agent, SaveSubagentsRequest saveSubagentsRequest)
		{
			return await AgentConnect.SaveSubagentsAsync(agent, saveSubagentsRequest);
		}
		public virtual SaveTransactionDocumentResponse SaveTransactionDocument(Agent agent, SaveTransactionDocumentRequest saveTransactionDocumentRequest)
		{
			return AgentConnect.SaveTransactionDocument(agent, saveTransactionDocumentRequest);
		}

		public virtual async Task<SaveTransactionDocumentResponse> SaveTransactionDocumentAsync(Agent agent, SaveTransactionDocumentRequest saveTransactionDocumentRequest)
		{
			return await AgentConnect.SaveTransactionDocumentAsync(agent, saveTransactionDocumentRequest);
		}
		public virtual SearchConsumerProfilesResponse SearchConsumerProfiles(Agent agent, SearchConsumerProfilesRequest searchConsumerProfilesRequest)
		{
			return AgentConnect.SearchConsumerProfiles(agent, searchConsumerProfilesRequest);
		}

		public virtual async Task<SearchConsumerProfilesResponse> SearchConsumerProfilesAsync(Agent agent, SearchConsumerProfilesRequest searchConsumerProfilesRequest)
		{
			return await AgentConnect.SearchConsumerProfilesAsync(agent, searchConsumerProfilesRequest);
		}
		public virtual SearchStagedTransactionsResponse SearchStagedTransactions(Agent agent, SearchStagedTransactionsRequest searchStagedTransactionsRequest)
		{
			return AgentConnect.SearchStagedTransactions(agent, searchStagedTransactionsRequest);
		}

		public virtual async Task<SearchStagedTransactionsResponse> SearchStagedTransactionsAsync(Agent agent, SearchStagedTransactionsRequest searchStagedTransactionsRequest)
		{
			return await AgentConnect.SearchStagedTransactionsAsync(agent, searchStagedTransactionsRequest);
		}
		public virtual SendReversalValidationResponse SendReversalValidation(Agent agent, SendReversalValidationRequest sendReversalValidationRequest)
		{
			return AgentConnect.SendReversalValidation(agent, sendReversalValidationRequest);
		}

		public virtual async Task<SendReversalValidationResponse> SendReversalValidationAsync(Agent agent, SendReversalValidationRequest sendReversalValidationRequest)
		{
			return await AgentConnect.SendReversalValidationAsync(agent, sendReversalValidationRequest);
		}
		public virtual SendValidationResponse SendValidation(Agent agent, SendValidationRequest sendValidationRequest)
		{
			return AgentConnect.SendValidation(agent, sendValidationRequest);
		}

		public virtual async Task<SendValidationResponse> SendValidationAsync(Agent agent, SendValidationRequest sendValidationRequest)
		{
			return await AgentConnect.SendValidationAsync(agent, sendValidationRequest);
		}
		public virtual SubagentsResponse Subagents(Agent agent, SubagentsRequest subagentsRequest)
		{
			return AgentConnect.Subagents(agent, subagentsRequest);
		}

		public virtual async Task<SubagentsResponse> SubagentsAsync(Agent agent, SubagentsRequest subagentsRequest)
		{
			return await AgentConnect.SubagentsAsync(agent, subagentsRequest);
		}
		public virtual TransactionLookupResponse TransactionLookup(Agent agent, TransactionLookupRequest transactionLookupRequest)
		{
			return AgentConnect.TransactionLookup(agent, transactionLookupRequest);
		}

		public virtual async Task<TransactionLookupResponse> TransactionLookupAsync(Agent agent, TransactionLookupRequest transactionLookupRequest)
		{
			return await AgentConnect.TransactionLookupAsync(agent, transactionLookupRequest);
		}
		public virtual TranslationsResponse Translations(Agent agent, TranslationsRequest translationsRequest)
		{
			return AgentConnect.Translations(agent, translationsRequest);
		}

		public virtual async Task<TranslationsResponse> TranslationsAsync(Agent agent, TranslationsRequest translationsRequest)
		{
			return await AgentConnect.TranslationsAsync(agent, translationsRequest);
		}
		public virtual VariableReceiptInfoResponse VariableReceiptInfo(Agent agent, VariableReceiptInfoRequest variableReceiptInfoRequest)
		{
			return AgentConnect.VariableReceiptInfo(agent, variableReceiptInfoRequest);
		}

		public virtual async Task<VariableReceiptInfoResponse> VariableReceiptInfoAsync(Agent agent, VariableReceiptInfoRequest variableReceiptInfoRequest)
		{
			return await AgentConnect.VariableReceiptInfoAsync(agent, variableReceiptInfoRequest);
		}
		public virtual VersionManifestResponse VersionManifest(Agent agent, VersionManifestRequest versionManifestRequest)
		{
			return AgentConnect.VersionManifest(agent, versionManifestRequest);
		}

		public virtual async Task<VersionManifestResponse> VersionManifestAsync(Agent agent, VersionManifestRequest versionManifestRequest)
		{
			return await AgentConnect.VersionManifestAsync(agent, versionManifestRequest);
		}
    }
}