//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using MoneyGram.AgentConnect.DomainModel;
using DOMAIN = MoneyGram.AgentConnect.DomainModel.Transaction;
using SERVICE = MoneyGram.AgentConnect.Service;

namespace MoneyGram.AgentConnect.EntityMapper
{
	public static class DomainToServiceExtensions
	{
		public static SERVICE.SystemError ToService(DOMAIN.SystemError systemError, Agent agent)
		{
			var serviceModel = new SERVICE.SystemError {
				timeStamp = systemError.TimeStamp,
				errorCode = systemError.ErrorCode,
				errorString = systemError.ErrorString,
				subErrorCode = systemError.SubErrorCode,
				detailString = systemError.DetailString,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.VariableReceiptTextInfo ToService(DOMAIN.VariableReceiptTextInfo variableReceiptTextInfo, Agent agent)
		{
			var serviceModel = new SERVICE.VariableReceiptTextInfo {
				receiptTextType = variableReceiptTextInfo.ReceiptTextType,
				textTranslation = variableReceiptTextInfo.TextTranslation?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.TextTranslationType ToService(DOMAIN.TextTranslationType textTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.TextTranslationType {
				longLanguageCode = textTranslationType.LongLanguageCode,
				textTranslation = textTranslationType.TextTranslation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.UCPResponseProfileType ToService(DOMAIN.UCPResponseProfileType uCPResponseProfileType, Agent agent)
		{
			var serviceModel = new SERVICE.UCPResponseProfileType {
				dateOfBirth = uCPResponseProfileType.DateOfBirth ?? default(DateTime),
				dateOfBirthSpecified = uCPResponseProfileType.DateOfBirth.HasValue,
				emailAddress = uCPResponseProfileType.EmailAddress?.ConvertToService<DOMAIN.UCPResponseEmailType, SERVICE.UCPResponseEmailType>(agent).ToArray(),
				identificationDocument = uCPResponseProfileType.IdentificationDocument?.ConvertToService<DOMAIN.IdentificationDocumentType, SERVICE.IdentificationDocumentType>(agent).ToArray(),
				name = uCPResponseProfileType.Name?.ConvertToService<DOMAIN.NameType, SERVICE.NameType>(agent).ToArray(),
				phoneNumber = uCPResponseProfileType.PhoneNumber?.ConvertToService<DOMAIN.UCPResponsePhoneType, SERVICE.UCPResponsePhoneType>(agent).ToArray(),
				consumerProfileIdentifier = uCPResponseProfileType.ConsumerProfileIdentifier?.ConvertToService<DOMAIN.ConsumerProfileIdentifierType, SERVICE.ConsumerProfileIdentifierType>(agent).ToArray(),
				rawAddress = uCPResponseProfileType.RawAddress?.ConvertToService<DOMAIN.RawAddressType, SERVICE.RawAddressType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.UCPResponseEmailType ToService(DOMAIN.UCPResponseEmailType uCPResponseEmailType, Agent agent)
		{
			var serviceModel = new SERVICE.UCPResponseEmailType {
				bounceDate = uCPResponseEmailType.BounceDate ?? default(DateTime),
				bounceDateSpecified = uCPResponseEmailType.BounceDate.HasValue,
				emailAddress = uCPResponseEmailType.EmailAddress,
				endDate = uCPResponseEmailType.EndDate ?? default(DateTime),
				endDateSpecified = uCPResponseEmailType.EndDate.HasValue,
				startDate = uCPResponseEmailType.StartDate ?? default(DateTime),
				startDateSpecified = uCPResponseEmailType.StartDate.HasValue,
				status = uCPResponseEmailType.Status,
				stronglyAuthenticated = uCPResponseEmailType.StronglyAuthenticated ?? default(bool),
				stronglyAuthenticatedSpecified = uCPResponseEmailType.StronglyAuthenticated.HasValue,
				type = uCPResponseEmailType.Type,
				notificationPreference = uCPResponseEmailType.NotificationPreference?.ConvertToService<DOMAIN.NotificationPreferenceType, SERVICE.NotificationPreferenceType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.NotificationPreferenceType ToService(DOMAIN.NotificationPreferenceType notificationPreferenceType, Agent agent)
		{
			var serviceModel = new SERVICE.NotificationPreferenceType {
				endDate = notificationPreferenceType.EndDate ?? default(DateTime),
				endDateSpecified = notificationPreferenceType.EndDate.HasValue,
				frequency = notificationPreferenceType.Frequency,
				method = notificationPreferenceType.Method,
				optIn = notificationPreferenceType.OptIn ?? default(bool),
				optInSpecified = notificationPreferenceType.OptIn.HasValue,
				optOutReason = notificationPreferenceType.OptOutReason,
				preferredLanguage = notificationPreferenceType.PreferredLanguage,
				startDate = notificationPreferenceType.StartDate ?? default(DateTime),
				startDateSpecified = notificationPreferenceType.StartDate.HasValue,
				stronglyAuthenticated = notificationPreferenceType.StronglyAuthenticated ?? default(bool),
				stronglyAuthenticatedSpecified = notificationPreferenceType.StronglyAuthenticated.HasValue,
				type = notificationPreferenceType.Type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.IdentificationDocumentType ToService(DOMAIN.IdentificationDocumentType identificationDocumentType, Agent agent)
		{
			var serviceModel = new SERVICE.IdentificationDocumentType {
				endDate = identificationDocumentType.EndDate ?? default(DateTime),
				endDateSpecified = identificationDocumentType.EndDate.HasValue,
				expirationDay = identificationDocumentType.ExpirationDay,
				expirationMonth = identificationDocumentType.ExpirationMonth,
				expirationYear = identificationDocumentType.ExpirationYear,
				idIssuerAuthorityCode = identificationDocumentType.IdIssuerAuthorityCode,
				idNumber = identificationDocumentType.IdNumber,
				issueCity = identificationDocumentType.IssueCity,
				issueCountryCode = identificationDocumentType.IssueCountryCode,
				issueCountrySubDivisionCode = identificationDocumentType.IssueCountrySubDivisionCode,
				issueDay = identificationDocumentType.IssueDay,
				issueMonth = identificationDocumentType.IssueMonth,
				issueYear = identificationDocumentType.IssueYear,
				startDate = identificationDocumentType.StartDate ?? default(DateTime),
				startDateSpecified = identificationDocumentType.StartDate.HasValue,
				stronglyAuthenticated = identificationDocumentType.StronglyAuthenticated ?? default(bool),
				stronglyAuthenticatedSpecified = identificationDocumentType.StronglyAuthenticated.HasValue,
				type = identificationDocumentType.Type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.NameType ToService(DOMAIN.NameType nameType, Agent agent)
		{
			var serviceModel = new SERVICE.NameType {
				firstName = nameType.FirstName,
				lastName = nameType.LastName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.UCPResponsePhoneType ToService(DOMAIN.UCPResponsePhoneType uCPResponsePhoneType, Agent agent)
		{
			var serviceModel = new SERVICE.UCPResponsePhoneType {
				countryDialInNumber = uCPResponsePhoneType.CountryDialInNumber,
				endDate = uCPResponsePhoneType.EndDate ?? default(DateTime),
				endDateSpecified = uCPResponsePhoneType.EndDate.HasValue,
				mobileFlag = uCPResponsePhoneType.MobileFlag ?? default(bool),
				mobileFlagSpecified = uCPResponsePhoneType.MobileFlag.HasValue,
				phoneNumber = uCPResponsePhoneType.PhoneNumber,
				startDate = uCPResponsePhoneType.StartDate ?? default(DateTime),
				startDateSpecified = uCPResponsePhoneType.StartDate.HasValue,
				stronglyAuthenticated = uCPResponsePhoneType.StronglyAuthenticated ?? default(bool),
				stronglyAuthenticatedSpecified = uCPResponsePhoneType.StronglyAuthenticated.HasValue,
				type = uCPResponsePhoneType.Type,
				notificationPreference = uCPResponsePhoneType.NotificationPreference?.ConvertToService<DOMAIN.NotificationPreferenceType, SERVICE.NotificationPreferenceType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerProfileIdentifierType ToService(DOMAIN.ConsumerProfileIdentifierType consumerProfileIdentifierType, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerProfileIdentifierType {
				profileID = consumerProfileIdentifierType.ProfileID,
				startDate = consumerProfileIdentifierType.StartDate ?? default(DateTime),
				startDateSpecified = consumerProfileIdentifierType.StartDate.HasValue,
				type = consumerProfileIdentifierType.Type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.RawAddressType ToService(DOMAIN.RawAddressType rawAddressType, Agent agent)
		{
			var serviceModel = new SERVICE.RawAddressType {
				standardizedAddress = rawAddressType.StandardizedAddress != null ? rawAddressType.StandardizedAddress.ConvertToService<DOMAIN.StandardizedAddressType, SERVICE.StandardizedAddressType>(agent) : null,
				addressLine1 = rawAddressType.AddressLine1,
				addressLine2 = rawAddressType.AddressLine2,
				addressLine3 = rawAddressType.AddressLine3,
				addressLine4 = rawAddressType.AddressLine4,
				city = rawAddressType.City,
				countryCode = rawAddressType.CountryCode,
				countrySubDivisionCode = rawAddressType.CountrySubDivisionCode,
				county = rawAddressType.County,
				postalCode = rawAddressType.PostalCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.StandardizedAddressType ToService(DOMAIN.StandardizedAddressType standardizedAddressType, Agent agent)
		{
			var serviceModel = new SERVICE.StandardizedAddressType {
				addressCleansingScore = standardizedAddressType.AddressCleansingScore,
				addressLine1 = standardizedAddressType.AddressLine1,
				addressLine2 = standardizedAddressType.AddressLine2,
				addressLine3 = standardizedAddressType.AddressLine3,
				addressLine4 = standardizedAddressType.AddressLine4,
				city = standardizedAddressType.City,
				countryCode = standardizedAddressType.CountryCode,
				countrySubDivisionCode = standardizedAddressType.CountrySubDivisionCode,
				county = standardizedAddressType.County,
				postalCode = standardizedAddressType.PostalCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BaseRawAddressType ToService(DOMAIN.BaseRawAddressType baseRawAddressType, Agent agent)
		{
			var serviceModel = new SERVICE.BaseRawAddressType {
				addressLine1 = baseRawAddressType.AddressLine1,
				addressLine2 = baseRawAddressType.AddressLine2,
				addressLine3 = baseRawAddressType.AddressLine3,
				addressLine4 = baseRawAddressType.AddressLine4,
				city = baseRawAddressType.City,
				countryCode = baseRawAddressType.CountryCode,
				countrySubDivisionCode = baseRawAddressType.CountrySubDivisionCode,
				county = baseRawAddressType.County,
				postalCode = baseRawAddressType.PostalCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SubagentInfo ToService(DOMAIN.SubagentInfo subagentInfo, Agent agent)
		{
			var serviceModel = new SERVICE.SubagentInfo {
				agentID = subagentInfo.AgentID,
				sequenceNumber = subagentInfo.SequenceNumber ?? default(int),
				sequenceNumberSpecified = subagentInfo.SequenceNumber.HasValue,
				legacyAgentID = subagentInfo.LegacyAgentID,
				city = subagentInfo.City,
				branchName = subagentInfo.BranchName,
				agentStatus = subagentInfo.AgentStatus,
				storeNumber = subagentInfo.StoreNumber,
				agentStoreName = subagentInfo.AgentStoreName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.StagedTransactionInfo ToService(DOMAIN.StagedTransactionInfo stagedTransactionInfo, Agent agent)
		{
			var serviceModel = new SERVICE.StagedTransactionInfo {
				mgiSessionType = (SERVICE.SessionType)stagedTransactionInfo.MgiSessionType,
				senderFirstName = stagedTransactionInfo.SenderFirstName,
				senderMiddleName = stagedTransactionInfo.SenderMiddleName,
				senderLastName = stagedTransactionInfo.SenderLastName,
				senderLastName2 = stagedTransactionInfo.SenderLastName2,
				senderAddress = stagedTransactionInfo.SenderAddress,
				senderCity = stagedTransactionInfo.SenderCity,
				senderCountrySubdivision = stagedTransactionInfo.SenderCountrySubdivision,
				senderCountry = stagedTransactionInfo.SenderCountry,
				senderPostalCode = stagedTransactionInfo.SenderPostalCode,
				senderPhone = stagedTransactionInfo.SenderPhone,
				mgiRewardsNumber = stagedTransactionInfo.MgiRewardsNumber,
				receiverFirstName = stagedTransactionInfo.ReceiverFirstName,
				receiverMiddleName = stagedTransactionInfo.ReceiverMiddleName,
				receiverLastName = stagedTransactionInfo.ReceiverLastName,
				receiverLastName2 = stagedTransactionInfo.ReceiverLastName2,
				destinationCountrySubdivision = stagedTransactionInfo.DestinationCountrySubdivision,
				destinationCountry = stagedTransactionInfo.DestinationCountry,
				billerName = stagedTransactionInfo.BillerName,
				billerAccountNumber = stagedTransactionInfo.BillerAccountNumber,
				confirmationNumber = stagedTransactionInfo.ConfirmationNumber,
				sendAmount = stagedTransactionInfo.SendAmount,
				sendCurrency = stagedTransactionInfo.SendCurrency,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.RedirectInfo ToService(DOMAIN.RedirectInfo redirectInfo, Agent agent)
		{
			var serviceModel = new SERVICE.RedirectInfo {
				originalSendAmount = redirectInfo.OriginalSendAmount ?? default(decimal),
				originalSendAmountSpecified = redirectInfo.OriginalSendAmount.HasValue,
				originalSendCurrency = redirectInfo.OriginalSendCurrency,
				originalSendFee = redirectInfo.OriginalSendFee ?? default(decimal),
				originalSendFeeSpecified = redirectInfo.OriginalSendFee.HasValue,
				originalExchangeRate = redirectInfo.OriginalExchangeRate ?? default(decimal),
				originalExchangeRateSpecified = redirectInfo.OriginalExchangeRate.HasValue,
				originalReceiveAmount = redirectInfo.OriginalReceiveAmount ?? default(decimal),
				originalReceiveAmountSpecified = redirectInfo.OriginalReceiveAmount.HasValue,
				originalReceiveCurrency = redirectInfo.OriginalReceiveCurrency,
				originalReceiveCountry = redirectInfo.OriginalReceiveCountry,
				newSendFee = redirectInfo.NewSendFee ?? default(decimal),
				newSendFeeSpecified = redirectInfo.NewSendFee.HasValue,
				newExchangeRate = redirectInfo.NewExchangeRate ?? default(decimal),
				newExchangeRateSpecified = redirectInfo.NewExchangeRate.HasValue,
				newReceiveAmount = redirectInfo.NewReceiveAmount ?? default(decimal),
				newReceiveAmountSpecified = redirectInfo.NewReceiveAmount.HasValue,
				newReceiveCurrency = redirectInfo.NewReceiveCurrency,
				feeDifference = redirectInfo.FeeDifference ?? default(decimal),
				feeDifferenceSpecified = redirectInfo.FeeDifference.HasValue,
				redirectType = redirectInfo.RedirectType.HasValue ? (SERVICE.RedirectInfoRedirectType)redirectInfo.RedirectType : GetDefaultEnumValue<SERVICE.RedirectInfoRedirectType>(),
				redirectTypeSpecified = redirectInfo.RedirectType.HasValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PromotionLookupInfo ToService(DOMAIN.PromotionLookupInfo promotionLookupInfo, Agent agent)
		{
			var serviceModel = new SERVICE.PromotionLookupInfo {
				promotionDiscountName = promotionLookupInfo.PromotionDiscountName,
				currencyCode = promotionLookupInfo.CurrencyCode,
				promotionDiscount = promotionLookupInfo.PromotionDiscount ?? default(decimal),
				promotionDiscountSpecified = promotionLookupInfo.PromotionDiscount.HasValue,
				promotionMaxDiscountAmount = promotionLookupInfo.PromotionMaxDiscountAmount ?? default(decimal),
				promotionMaxDiscountAmountSpecified = promotionLookupInfo.PromotionMaxDiscountAmount.HasValue,
				promotionCategoryName = promotionLookupInfo.PromotionCategoryName,
				promotionName = promotionLookupInfo.PromotionName,
				promotionId = promotionLookupInfo.PromotionId ?? default(int),
				promotionIdSpecified = promotionLookupInfo.PromotionId.HasValue,
				promotionBeginDate = promotionLookupInfo.PromotionBeginDate,
				promotionEndDate = promotionLookupInfo.PromotionEndDate,
				promotionCategoryBeginDate = promotionLookupInfo.PromotionCategoryBeginDate,
				promotionCategoryEndDate = promotionLookupInfo.PromotionCategoryEndDate,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.TransactionDocumentContentType ToService(DOMAIN.TransactionDocumentContentType transactionDocumentContentType, Agent agent)
		{
			var serviceModel = new SERVICE.TransactionDocumentContentType {
				identifier = transactionDocumentContentType.Identifier,
				referenceNumber = transactionDocumentContentType.ReferenceNumber,
				mimeType = transactionDocumentContentType.MimeType,
				imageItems = transactionDocumentContentType.ImageItems?.ConvertToService<DOMAIN.ImageItemType, SERVICE.ImageItemType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ImageItemType ToService(DOMAIN.ImageItemType imageItemType, Agent agent)
		{
			var serviceModel = new SERVICE.ImageItemType {
				label = imageItemType.Label,
				image = imageItemType.Image?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PartnerCreditType ToService(DOMAIN.PartnerCreditType partnerCreditType, Agent agent)
		{
			var serviceModel = new SERVICE.PartnerCreditType {
				creditLimitInfo = partnerCreditType.CreditLimitInfo?.ConvertToService<DOMAIN.CreditLimitInfo, SERVICE.CreditLimitInfo>(agent).ToArray(),
				goodFundsAgentFlag = partnerCreditType.GoodFundsAgentFlag ?? default(bool),
				goodFundsAgentFlagSpecified = partnerCreditType.GoodFundsAgentFlag.HasValue,
				depositProofRequiredFlag = partnerCreditType.DepositProofRequiredFlag ?? default(bool),
				depositProofRequiredFlagSpecified = partnerCreditType.DepositProofRequiredFlag.HasValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreditLimitInfo ToService(DOMAIN.CreditLimitInfo creditLimitInfo, Agent agent)
		{
			var serviceModel = new SERVICE.CreditLimitInfo {
				creditLimitType = creditLimitInfo.CreditLimitType,
				creditLimitAmount = creditLimitInfo.CreditLimitAmount ?? default(decimal),
				creditLimitAmountSpecified = creditLimitInfo.CreditLimitAmount.HasValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendSummaryInfo ToService(DOMAIN.MoneyGramSendSummaryInfo moneyGramSendSummaryInfo, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendSummaryInfo {
				faceAmount = moneyGramSendSummaryInfo.FaceAmount,
				feeAmount = moneyGramSendSummaryInfo.FeeAmount,
				totalAmount = moneyGramSendSummaryInfo.TotalAmount,
				sendCurrency = moneyGramSendSummaryInfo.SendCurrency,
				agentNumber = moneyGramSendSummaryInfo.AgentNumber,
				agentName = moneyGramSendSummaryInfo.AgentName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendWithTaxDetailInfo ToService(DOMAIN.MoneyGramSendWithTaxDetailInfo moneyGramSendWithTaxDetailInfo, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendWithTaxDetailInfo {
				referenceNumber = moneyGramSendWithTaxDetailInfo.ReferenceNumber,
				faceAmount = moneyGramSendWithTaxDetailInfo.FaceAmount,
				feeAmount = moneyGramSendWithTaxDetailInfo.FeeAmount,
				totalAmount = moneyGramSendWithTaxDetailInfo.TotalAmount,
				sendCurrency = moneyGramSendWithTaxDetailInfo.SendCurrency,
				paymentType = (SERVICE.PaymentType)moneyGramSendWithTaxDetailInfo.PaymentType,
				agentName = moneyGramSendWithTaxDetailInfo.AgentName,
				taxAmount = moneyGramSendWithTaxDetailInfo.TaxAmount ?? default(decimal),
				taxAmountSpecified = moneyGramSendWithTaxDetailInfo.TaxAmount.HasValue,
				taxPercentage = moneyGramSendWithTaxDetailInfo.TaxPercentage ?? default(decimal),
				taxPercentageSpecified = moneyGramSendWithTaxDetailInfo.TaxPercentage.HasValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendDetailInfo ToService(DOMAIN.MoneyGramSendDetailInfo moneyGramSendDetailInfo, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendDetailInfo {
				referenceNumber = moneyGramSendDetailInfo.ReferenceNumber,
				faceAmount = moneyGramSendDetailInfo.FaceAmount,
				feeAmount = moneyGramSendDetailInfo.FeeAmount,
				totalAmount = moneyGramSendDetailInfo.TotalAmount,
				sendCurrency = moneyGramSendDetailInfo.SendCurrency,
				agentNumber = moneyGramSendDetailInfo.AgentNumber,
				paymentType = (SERVICE.PaymentType)moneyGramSendDetailInfo.PaymentType,
				agentName = moneyGramSendDetailInfo.AgentName,
				time = moneyGramSendDetailInfo.Time,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramReceiveSummaryInfo ToService(DOMAIN.MoneyGramReceiveSummaryInfo moneyGramReceiveSummaryInfo, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramReceiveSummaryInfo {
				agentNumber = moneyGramReceiveSummaryInfo.AgentNumber,
				agentName = moneyGramReceiveSummaryInfo.AgentName,
				cashOrCheckAmount = moneyGramReceiveSummaryInfo.CashOrCheckAmount ?? default(decimal),
				cashOrCheckAmountSpecified = moneyGramReceiveSummaryInfo.CashOrCheckAmount.HasValue,
				otherPayoutAmount = moneyGramReceiveSummaryInfo.OtherPayoutAmount ?? default(decimal),
				otherPayoutAmountSpecified = moneyGramReceiveSummaryInfo.OtherPayoutAmount.HasValue,
				receiveCurrency = moneyGramReceiveSummaryInfo.ReceiveCurrency,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramReceiveDetailInfo ToService(DOMAIN.MoneyGramReceiveDetailInfo moneyGramReceiveDetailInfo, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramReceiveDetailInfo {
				time = moneyGramReceiveDetailInfo.Time,
				referenceNumber = moneyGramReceiveDetailInfo.ReferenceNumber,
				receiverName = moneyGramReceiveDetailInfo.ReceiverName,
				checkNumber = moneyGramReceiveDetailInfo.CheckNumber,
				receiveAmount = moneyGramReceiveDetailInfo.ReceiveAmount,
				agentNumber = moneyGramReceiveDetailInfo.AgentNumber,
				payoutType = moneyGramReceiveDetailInfo.PayoutType,
				agentName = moneyGramReceiveDetailInfo.AgentName,
				accountNumber = moneyGramReceiveDetailInfo.AccountNumber,
				receiveCurrency = moneyGramReceiveDetailInfo.ReceiveCurrency,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.LoyaltyTranslationType ToService(DOMAIN.LoyaltyTranslationType loyaltyTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.LoyaltyTranslationType {
				messageId = loyaltyTranslationType.MessageId,
				messageText = loyaltyTranslationType.MessageText,
				languageCode = loyaltyTranslationType.LanguageCode,
				longLanguageCode = loyaltyTranslationType.LongLanguageCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.LoyaltyProgramTypeTranslationType ToService(DOMAIN.LoyaltyProgramTypeTranslationType loyaltyProgramTypeTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.LoyaltyProgramTypeTranslationType {
				programType = loyaltyProgramTypeTranslationType.ProgramType,
				programNameText = loyaltyProgramTypeTranslationType.ProgramNameText,
				programDescText = loyaltyProgramTypeTranslationType.ProgramDescText,
				languageCode = loyaltyProgramTypeTranslationType.LanguageCode,
				longLanguageCode = loyaltyProgramTypeTranslationType.LongLanguageCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.LoyaltyCardTypeTranslationType ToService(DOMAIN.LoyaltyCardTypeTranslationType loyaltyCardTypeTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.LoyaltyCardTypeTranslationType {
				cardType = loyaltyCardTypeTranslationType.CardType,
				messageText = loyaltyCardTypeTranslationType.MessageText,
				languageCode = loyaltyCardTypeTranslationType.LanguageCode,
				longLanguageCode = loyaltyCardTypeTranslationType.LongLanguageCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.LevelInfo ToService(DOMAIN.LevelInfo levelInfo, Agent agent)
		{
			var serviceModel = new SERVICE.LevelInfo {
				levelNumber = levelInfo.LevelNumber,
				levelValue = levelInfo.LevelValue,
				levelAttributeLabel = levelInfo.LevelAttributeLabel,
				levelAttributeTag = levelInfo.LevelAttributeTag,
				levelAttributeVal = levelInfo.LevelAttributeVal,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.LanguageTranslationType ToService(DOMAIN.LanguageTranslationType languageTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.LanguageTranslationType {
				languageCode = languageTranslationType.LanguageCode,
				longLanguageCode = languageTranslationType.LongLanguageCode,
				displayName = languageTranslationType.DisplayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.IndustryTranslationType ToService(DOMAIN.IndustryTranslationType industryTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.IndustryTranslationType {
				industryId = industryTranslationType.IndustryId,
				displayName = industryTranslationType.DisplayName,
				languageCode = industryTranslationType.LanguageCode,
				longLanguageCode = industryTranslationType.LongLanguageCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.IndustryInfo ToService(DOMAIN.IndustryInfo industryInfo, Agent agent)
		{
			var serviceModel = new SERVICE.IndustryInfo {
				industryID = industryInfo.IndustryID,
				industryName = industryInfo.IndustryName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FQDOTextTranslationType ToService(DOMAIN.FQDOTextTranslationType fQDOTextTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.FQDOTextTranslationType {
				receiveCountry = fQDOTextTranslationType.ReceiveCountry,
				serviceOption = fQDOTextTranslationType.ServiceOption,
				receiveAgentID = fQDOTextTranslationType.ReceiveAgentID,
				receiveCurrency = fQDOTextTranslationType.ReceiveCurrency,
				languageCode = fQDOTextTranslationType.LanguageCode,
				longLanguageCode = fQDOTextTranslationType.LongLanguageCode,
				serviceOptionDisplayName = fQDOTextTranslationType.ServiceOptionDisplayName,
				serviceOptionDisplayDescription = fQDOTextTranslationType.ServiceOptionDisplayDescription,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ServiceOptionInfo ToService(DOMAIN.ServiceOptionInfo serviceOptionInfo, Agent agent)
		{
			var serviceModel = new SERVICE.ServiceOptionInfo {
				serviceOption = serviceOptionInfo.ServiceOption,
				receiveCurrency = serviceOptionInfo.ReceiveCurrency,
				receiveAgentID = serviceOptionInfo.ReceiveAgentID,
				serviceOptionDisplayName = serviceOptionInfo.ServiceOptionDisplayName,
				serviceOptionDisplayDescription = serviceOptionInfo.ServiceOptionDisplayDescription,
				serviceOptionCategoryId = serviceOptionInfo.ServiceOptionCategoryId,
				serviceOptionCategoryDisplayName = serviceOptionInfo.ServiceOptionCategoryDisplayName,
				localCurrency = serviceOptionInfo.LocalCurrency,
				indicativeRateAvailable = serviceOptionInfo.IndicativeRateAvailable,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DestinationCountryInfo ToService(DOMAIN.DestinationCountryInfo destinationCountryInfo, Agent agent)
		{
			var serviceModel = new SERVICE.DestinationCountryInfo {
				destinationCountry = destinationCountryInfo.DestinationCountry,
				serviceOptionInfos = destinationCountryInfo.ServiceOptionInfos?.ConvertToService<DOMAIN.ServiceOptionInfo, SERVICE.ServiceOptionInfo>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DepositAndProofInfo ToService(DOMAIN.DepositAndProofInfo depositAndProofInfo, Agent agent)
		{
			var serviceModel = new SERVICE.DepositAndProofInfo {
				mgiEmployeeAutoAccept = depositAndProofInfo.MgiEmployeeAutoAccept ?? default(bool),
				mgiEmployeeAutoAcceptSpecified = depositAndProofInfo.MgiEmployeeAutoAccept.HasValue,
				depositReferenceNumber = depositAndProofInfo.DepositReferenceNumber,
				depositDate = depositAndProofInfo.DepositDate,
				announcementDate = depositAndProofInfo.AnnouncementDate,
				announcementAmount = depositAndProofInfo.AnnouncementAmount ?? default(decimal),
				announcementAmountSpecified = depositAndProofInfo.AnnouncementAmount.HasValue,
				announcementCurrencyCode = depositAndProofInfo.AnnouncementCurrencyCode,
				paymentTypeCode = depositAndProofInfo.PaymentTypeCode,
				bankShortCode = depositAndProofInfo.BankShortCode,
				bankName = depositAndProofInfo.BankName,
				announcementRemarks = depositAndProofInfo.AnnouncementRemarks,
				announcementStatus = depositAndProofInfo.AnnouncementStatus,
				customerAccountSiteID = depositAndProofInfo.CustomerAccountSiteID,
				agentEmployeeID = depositAndProofInfo.AgentEmployeeID,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DeliveryOptionTranslationType ToService(DOMAIN.DeliveryOptionTranslationType deliveryOptionTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.DeliveryOptionTranslationType {
				serviceOption = deliveryOptionTranslationType.ServiceOption,
				languageCode = deliveryOptionTranslationType.LanguageCode,
				longLanguageCode = deliveryOptionTranslationType.LongLanguageCode,
				displayName = deliveryOptionTranslationType.DisplayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CurrencyTranslationType ToService(DOMAIN.CurrencyTranslationType currencyTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.CurrencyTranslationType {
				currencyCode = currencyTranslationType.CurrencyCode,
				languageCode = currencyTranslationType.LanguageCode,
				longLanguageCode = currencyTranslationType.LongLanguageCode,
				displayName = currencyTranslationType.DisplayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CountryTranslationType ToService(DOMAIN.CountryTranslationType countryTranslationType, Agent agent)
		{
			var serviceModel = new SERVICE.CountryTranslationType {
				countryCode = countryTranslationType.CountryCode,
				languageCode = countryTranslationType.LanguageCode,
				longLanguageCode = countryTranslationType.LongLanguageCode,
				displayName = countryTranslationType.DisplayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerProfileSearchInfo ToService(DOMAIN.ConsumerProfileSearchInfo consumerProfileSearchInfo, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerProfileSearchInfo {
				consumerProfileID = consumerProfileSearchInfo.ConsumerProfileID,
				consumerProfileIDType = consumerProfileSearchInfo.ConsumerProfileIDType,
				currentValues = consumerProfileSearchInfo.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.KeyValuePairType ToService(DOMAIN.KeyValuePairType keyValuePairType, Agent agent)
		{
			var serviceModel = new SERVICE.KeyValuePairType {
				infoKey = keyValuePairType.InfoKey,
				value = keyValuePairType.Value,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PaymentTypeInfo ToService(DOMAIN.PaymentTypeInfo paymentTypeInfo, Agent agent)
		{
			var serviceModel = new SERVICE.PaymentTypeInfo {
				paymentTypeCode = paymentTypeInfo.PaymentTypeCode,
				paymentTypeName = paymentTypeInfo.PaymentTypeName,
				paymentTypeDisplayName = paymentTypeInfo.PaymentTypeDisplayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BankInfo ToService(DOMAIN.BankInfo bankInfo, Agent agent)
		{
			var serviceModel = new SERVICE.BankInfo {
				bankId = bankInfo.BankId,
				bankShortCode = bankInfo.BankShortCode,
				bankName = bankInfo.BankName,
				bankDisplayName = bankInfo.BankDisplayName,
				paymentType = bankInfo.PaymentType?.ConvertToService<DOMAIN.PaymentTypeInfo, SERVICE.PaymentTypeInfo>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.AgentAddressType ToService(DOMAIN.AgentAddressType agentAddressType, Agent agent)
		{
			var serviceModel = new SERVICE.AgentAddressType {
				agentAddress = agentAddressType.AgentAddress?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CurrencyInfo ToService(DOMAIN.CurrencyInfo currencyInfo, Agent agent)
		{
			var serviceModel = new SERVICE.CurrencyInfo {
				currencyCode = currencyInfo.CurrencyCode,
				currencyName = currencyInfo.CurrencyName,
				currencyPrecision = currencyInfo.CurrencyPrecision,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SubdivisionInfo ToService(DOMAIN.SubdivisionInfo subdivisionInfo, Agent agent)
		{
			var serviceModel = new SERVICE.SubdivisionInfo {
				countrySubdivisionCode = subdivisionInfo.CountrySubdivisionCode,
				countrySubdivisionName = subdivisionInfo.CountrySubdivisionName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CountrySubdivisionInfo ToService(DOMAIN.CountrySubdivisionInfo countrySubdivisionInfo, Agent agent)
		{
			var serviceModel = new SERVICE.CountrySubdivisionInfo {
				countryCode = countrySubdivisionInfo.CountryCode,
				subdivisions = countrySubdivisionInfo.Subdivisions?.ConvertToService<DOMAIN.SubdivisionInfo, SERVICE.SubdivisionInfo>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CountryInfo ToService(DOMAIN.CountryInfo countryInfo, Agent agent)
		{
			var serviceModel = new SERVICE.CountryInfo {
				countryCode = countryInfo.CountryCode,
				countryName = countryInfo.CountryName,
				baseCurrency = countryInfo.BaseCurrency,
				lookupKeys = countryInfo.LookupKeys?.ToArray(),
				receiveCurrencies = countryInfo.ReceiveCurrencies?.ToArray(),
				sendCurrencies = countryInfo.SendCurrencies?.ToArray(),
				countryDialCodes = countryInfo.CountryDialCodes?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerProfileTransactionHistoryType ToService(DOMAIN.ConsumerProfileTransactionHistoryType consumerProfileTransactionHistoryType, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerProfileTransactionHistoryType {
				currentValues = consumerProfileTransactionHistoryType.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.AttributeType ToService(DOMAIN.AttributeType attributeType, Agent agent)
		{
			var serviceModel = new SERVICE.AttributeType {
				attributeLabel = attributeType.AttributeLabel,
				attributeTag = attributeType.AttributeTag,
				attributeValue = attributeType.AttributeValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.HierarchyLevelInfo ToService(DOMAIN.HierarchyLevelInfo hierarchyLevelInfo, Agent agent)
		{
			var serviceModel = new SERVICE.HierarchyLevelInfo {
				hierarchyLevelElementNumber = hierarchyLevelInfo.HierarchyLevelElementNumber,
				hierarchyLevelValue = hierarchyLevelInfo.HierarchyLevelValue,
				attributes = hierarchyLevelInfo.Attributes?.ConvertToService<DOMAIN.AttributeType, SERVICE.AttributeType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GenericBusinessError ToService(DOMAIN.GenericBusinessError genericBusinessError, Agent agent)
		{
			var serviceModel = new SERVICE.GenericBusinessError {
				errorCode = genericBusinessError.ErrorCode,
				message = genericBusinessError.Message,
				messageShort = genericBusinessError.MessageShort,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ErrorInfo ToService(DOMAIN.ErrorInfo errorInfo, Agent agent)
		{
			var serviceModel = new SERVICE.ErrorInfo {
				errorCode = errorInfo.ErrorCode,
				errorMessages = errorInfo.ErrorMessages?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				recoverableFlag = errorInfo.RecoverableFlag,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.EstimatedReceiveAmountInfo ToService(DOMAIN.EstimatedReceiveAmountInfo estimatedReceiveAmountInfo, Agent agent)
		{
			var serviceModel = new SERVICE.EstimatedReceiveAmountInfo {
				receiveAmount = estimatedReceiveAmountInfo.ReceiveAmount ?? default(decimal),
				receiveAmountSpecified = estimatedReceiveAmountInfo.ReceiveAmount.HasValue,
				receiveCurrency = estimatedReceiveAmountInfo.ReceiveCurrency,
				validCurrencyIndicator = estimatedReceiveAmountInfo.ValidCurrencyIndicator,
				displayPayoutCurrency = estimatedReceiveAmountInfo.DisplayPayoutCurrency,
				totalReceiveFees = estimatedReceiveAmountInfo.TotalReceiveFees ?? default(decimal),
				totalReceiveFeesSpecified = estimatedReceiveAmountInfo.TotalReceiveFees.HasValue,
				totalReceiveTaxes = estimatedReceiveAmountInfo.TotalReceiveTaxes ?? default(decimal),
				totalReceiveTaxesSpecified = estimatedReceiveAmountInfo.TotalReceiveTaxes.HasValue,
				totalReceiveAmount = estimatedReceiveAmountInfo.TotalReceiveAmount ?? default(decimal),
				totalReceiveAmountSpecified = estimatedReceiveAmountInfo.TotalReceiveAmount.HasValue,
				receiveFeesAreEstimated = estimatedReceiveAmountInfo.ReceiveFeesAreEstimated,
				receiveTaxesAreEstimated = estimatedReceiveAmountInfo.ReceiveTaxesAreEstimated,
				detailEstimatedReceiveAmounts = estimatedReceiveAmountInfo.DetailEstimatedReceiveAmounts?.ConvertToService<DOMAIN.AmountInfo, SERVICE.AmountInfo>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.AmountInfo ToService(DOMAIN.AmountInfo amountInfo, Agent agent)
		{
			var serviceModel = new SERVICE.AmountInfo {
				amountType = amountInfo.AmountType,
				amount = amountInfo.Amount ?? default(decimal),
				amountSpecified = amountInfo.Amount.HasValue,
				amountCurrency = amountInfo.AmountCurrency,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FeeInfo ToService(DOMAIN.FeeInfo feeInfo, Agent agent)
		{
			var serviceModel = new SERVICE.FeeInfo {
				validReceiveAmount = feeInfo.ValidReceiveAmount,
				validReceiveCurrency = feeInfo.ValidReceiveCurrency,
				validExchangeRate = feeInfo.ValidExchangeRate,
				estimatedReceiveAmount = feeInfo.EstimatedReceiveAmount ?? default(decimal),
				estimatedReceiveAmountSpecified = feeInfo.EstimatedReceiveAmount.HasValue,
				estimatedReceiveCurrency = feeInfo.EstimatedReceiveCurrency,
				estimatedExchangeRate = feeInfo.EstimatedExchangeRate ?? default(decimal),
				estimatedExchangeRateSpecified = feeInfo.EstimatedExchangeRate.HasValue,
				displayExchangeRate = feeInfo.DisplayExchangeRate ?? default(decimal),
				displayExchangeRateSpecified = feeInfo.DisplayExchangeRate.HasValue,
				totalAmount = feeInfo.TotalAmount,
				destinationCountry = feeInfo.DestinationCountry,
				serviceOption = feeInfo.ServiceOption,
				receiveAmountAltered = feeInfo.ReceiveAmountAltered,
				saLimitAvailable = feeInfo.SaLimitAvailable ?? default(decimal),
				saLimitAvailableSpecified = feeInfo.SaLimitAvailable.HasValue,
				revisedInformationalFee = feeInfo.RevisedInformationalFee,
				serviceOptionCategoryDisplayName = feeInfo.ServiceOptionCategoryDisplayName,
				serviceOptionCategoryId = feeInfo.ServiceOptionCategoryId,
				serviceOptionDisplayName = feeInfo.ServiceOptionDisplayName,
				serviceOptionDisplayDescription = feeInfo.ServiceOptionDisplayDescription,
				displayOrder = feeInfo.DisplayOrder ?? default(int),
				displayOrderSpecified = feeInfo.DisplayOrder.HasValue,
				regAuthText = feeInfo.RegAuthText,
				receiveAgentID = feeInfo.ReceiveAgentID,
				receiveAgentName = feeInfo.ReceiveAgentName,
				receiveAgentAbbreviation = feeInfo.ReceiveAgentAbbreviation,
				mgManaged = feeInfo.MgManaged,
				disclosureText = feeInfo.DisclosureText,
				mgiSessionID = feeInfo.MgiSessionID,
				sendAmountAltered = feeInfo.SendAmountAltered,
				additionalInfoText = feeInfo.AdditionalInfoText,
				promotionInfos = feeInfo.PromotionInfos?.ConvertToService<DOMAIN.PromotionInfo, SERVICE.PromotionInfo>(agent).ToArray(),
				sendAmounts = feeInfo.SendAmounts != null ? feeInfo.SendAmounts.ConvertToService<DOMAIN.SendAmountInfo, SERVICE.SendAmountInfo>(agent) : null,
				receiveAmounts = feeInfo.ReceiveAmounts != null ? feeInfo.ReceiveAmounts.ConvertToService<DOMAIN.EstimatedReceiveAmountInfo, SERVICE.EstimatedReceiveAmountInfo>(agent) : null,
				errorInfo = feeInfo.ErrorInfo != null ? feeInfo.ErrorInfo.ConvertToService<DOMAIN.ErrorInfo, SERVICE.ErrorInfo>(agent) : null,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PromotionInfo ToService(DOMAIN.PromotionInfo promotionInfo, Agent agent)
		{
			var serviceModel = new SERVICE.PromotionInfo {
				promotionCode = promotionInfo.PromotionCode,
				promotionDiscountId = promotionInfo.PromotionDiscountId,
				promotionCategoryId = promotionInfo.PromotionCategoryId,
				promotionDiscount = promotionInfo.PromotionDiscount ?? default(decimal),
				promotionDiscountSpecified = promotionInfo.PromotionDiscount.HasValue,
				promotionDiscountAmount = promotionInfo.PromotionDiscountAmount ?? default(decimal),
				promotionDiscountAmountSpecified = promotionInfo.PromotionDiscountAmount.HasValue,
				promotionErrorCode = promotionInfo.PromotionErrorCode,
				promotionErrorMessages = promotionInfo.PromotionErrorMessages?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SendAmountInfo ToService(DOMAIN.SendAmountInfo sendAmountInfo, Agent agent)
		{
			var serviceModel = new SERVICE.SendAmountInfo {
				sendAmount = sendAmountInfo.SendAmount ?? default(decimal),
				sendAmountSpecified = sendAmountInfo.SendAmount.HasValue,
				sendCurrency = sendAmountInfo.SendCurrency,
				totalSendFees = sendAmountInfo.TotalSendFees ?? default(decimal),
				totalSendFeesSpecified = sendAmountInfo.TotalSendFees.HasValue,
				totalDiscountAmount = sendAmountInfo.TotalDiscountAmount ?? default(decimal),
				totalDiscountAmountSpecified = sendAmountInfo.TotalDiscountAmount.HasValue,
				totalSendTaxes = sendAmountInfo.TotalSendTaxes ?? default(decimal),
				totalSendTaxesSpecified = sendAmountInfo.TotalSendTaxes.HasValue,
				totalAmountToCollect = sendAmountInfo.TotalAmountToCollect ?? default(decimal),
				totalAmountToCollectSpecified = sendAmountInfo.TotalAmountToCollect.HasValue,
				detailSendAmounts = sendAmountInfo.DetailSendAmounts?.ConvertToService<DOMAIN.AmountInfo, SERVICE.AmountInfo>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CountryFeeInfo ToService(DOMAIN.CountryFeeInfo countryFeeInfo, Agent agent)
		{
			var serviceModel = new SERVICE.CountryFeeInfo {
				feeAmount = countryFeeInfo.FeeAmount ?? default(decimal),
				feeAmountSpecified = countryFeeInfo.FeeAmount.HasValue,
				sendAmount = countryFeeInfo.SendAmount ?? default(decimal),
				sendAmountSpecified = countryFeeInfo.SendAmount.HasValue,
				sendCurrency = countryFeeInfo.SendCurrency,
				validReceiveAmount = countryFeeInfo.ValidReceiveAmount ?? default(decimal),
				validReceiveAmountSpecified = countryFeeInfo.ValidReceiveAmount.HasValue,
				validReceiveCurrency = countryFeeInfo.ValidReceiveCurrency,
				validExchangeRate = countryFeeInfo.ValidExchangeRate ?? default(decimal),
				validExchangeRateSpecified = countryFeeInfo.ValidExchangeRate.HasValue,
				validIndicator = countryFeeInfo.ValidIndicator ?? default(bool),
				validIndicatorSpecified = countryFeeInfo.ValidIndicator.HasValue,
				estimatedReceiveAmount = countryFeeInfo.EstimatedReceiveAmount ?? default(decimal),
				estimatedReceiveAmountSpecified = countryFeeInfo.EstimatedReceiveAmount.HasValue,
				estimatedReceiveCurrency = countryFeeInfo.EstimatedReceiveCurrency,
				estimatedExchangeRate = countryFeeInfo.EstimatedExchangeRate ?? default(decimal),
				estimatedExchangeRateSpecified = countryFeeInfo.EstimatedExchangeRate.HasValue,
				totalAmount = countryFeeInfo.TotalAmount ?? default(decimal),
				totalAmountSpecified = countryFeeInfo.TotalAmount.HasValue,
				receiveCountry = countryFeeInfo.ReceiveCountry,
				serviceOption = countryFeeInfo.ServiceOption,
				receiveAmountAltered = countryFeeInfo.ReceiveAmountAltered ?? default(bool),
				receiveAmountAlteredSpecified = countryFeeInfo.ReceiveAmountAltered.HasValue,
				amountExceededIndicator = countryFeeInfo.AmountExceededIndicator,
				maxAmountAllowed = countryFeeInfo.MaxAmountAllowed ?? default(decimal),
				maxAmountAllowedSpecified = countryFeeInfo.MaxAmountAllowed.HasValue,
				receiveAgentID = countryFeeInfo.ReceiveAgentID,
				receiveAgentName = countryFeeInfo.ReceiveAgentName,
				receiveAgentAbbreviation = countryFeeInfo.ReceiveAgentAbbreviation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.StateRegulatorInfo ToService(DOMAIN.StateRegulatorInfo stateRegulatorInfo, Agent agent)
		{
			var serviceModel = new SERVICE.StateRegulatorInfo {
				dfJurisdiction = stateRegulatorInfo.DfJurisdiction,
				stateRegulatorURL = stateRegulatorInfo.StateRegulatorURL,
				stateRegulatorPhone = stateRegulatorInfo.StateRegulatorPhone,
				stateRegulatorName = stateRegulatorInfo.StateRegulatorName?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DynamicContentAssemblyDetailsType ToService(DOMAIN.DynamicContentAssemblyDetailsType dynamicContentAssemblyDetailsType, Agent agent)
		{
			var serviceModel = new SERVICE.DynamicContentAssemblyDetailsType {
				responseText = dynamicContentAssemblyDetailsType.ResponseText,
				errorCode = dynamicContentAssemblyDetailsType.ErrorCode,
				mimeType = dynamicContentAssemblyDetailsType.MimeType,
				mimeData = dynamicContentAssemblyDetailsType.MimeData?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiptFormatDetailsType ToService(DOMAIN.ReceiptFormatDetailsType receiptFormatDetailsType, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiptFormatDetailsType {
				receiptText = receiptFormatDetailsType.ReceiptText,
				md5CheckSum = receiptFormatDetailsType.Md5CheckSum,
				version = receiptFormatDetailsType.Version,
				longLanguageCode = receiptFormatDetailsType.LongLanguageCode,
				additionalLanguages = receiptFormatDetailsType.AdditionalLanguages?.ToArray(),
				responseText = receiptFormatDetailsType.ResponseText,
				errorCode = receiptFormatDetailsType.ErrorCode,
				mimeType = receiptFormatDetailsType.MimeType,
				mimeData = receiptFormatDetailsType.MimeData?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DisclosureTextDetailsType ToService(DOMAIN.DisclosureTextDetailsType disclosureTextDetailsType, Agent agent)
		{
			var serviceModel = new SERVICE.DisclosureTextDetailsType {
				version = disclosureTextDetailsType.Version,
				longLanguageCode = disclosureTextDetailsType.LongLanguageCode,
				disclosureTextTag = disclosureTextDetailsType.DisclosureTextTag,
				responseText = disclosureTextDetailsType.ResponseText,
				errorCode = disclosureTextDetailsType.ErrorCode,
				mimeType = disclosureTextDetailsType.MimeType,
				mimeData = disclosureTextDetailsType.MimeData?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.StoreHourInfo ToService(DOMAIN.StoreHourInfo storeHourInfo, Agent agent)
		{
			var serviceModel = new SERVICE.StoreHourInfo {
				dayOfWeek = (SERVICE.DayOfWeekType)storeHourInfo.DayOfWeek,
				openTime = storeHourInfo.OpenTime ?? default(DateTime),
				openTimeSpecified = storeHourInfo.OpenTime.HasValue,
				closeTime = storeHourInfo.CloseTime ?? default(DateTime),
				closeTimeSpecified = storeHourInfo.CloseTime.HasValue,
				closed = storeHourInfo.Closed,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.AgentInfo ToService(DOMAIN.AgentInfo agentInfo, Agent agent)
		{
			var serviceModel = new SERVICE.AgentInfo {
				agentName = agentInfo.AgentName,
				address = agentInfo.Address,
				city = agentInfo.City,
				countrySubdivisionCode = agentInfo.CountrySubdivisionCode,
				receiveCapability = agentInfo.ReceiveCapability ?? default(bool),
				receiveCapabilitySpecified = agentInfo.ReceiveCapability.HasValue,
				sendCapability = agentInfo.SendCapability ?? default(bool),
				sendCapabilitySpecified = agentInfo.SendCapability.HasValue,
				agentPhone = agentInfo.AgentPhone,
				storeHours = agentInfo.StoreHours?.ConvertToService<DOMAIN.StoreHourInfo, SERVICE.StoreHourInfo>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerProfileIDInfo ToService(DOMAIN.ConsumerProfileIDInfo consumerProfileIDInfo, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerProfileIDInfo {
				consumerProfileID = consumerProfileIDInfo.ConsumerProfileID,
				consumerProfileIDType = consumerProfileIDInfo.ConsumerProfileIDType,
				consumerProfileIDCreateDate = consumerProfileIDInfo.ConsumerProfileIDCreateDate ?? default(DateTime),
				consumerProfileIDCreateDateSpecified = consumerProfileIDInfo.ConsumerProfileIDCreateDate.HasValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillerLookupInfo ToService(DOMAIN.BillerLookupInfo billerLookupInfo, Agent agent)
		{
			var serviceModel = new SERVICE.BillerLookupInfo {
				currentValues = billerLookupInfo.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiverLookupInfo ToService(DOMAIN.ReceiverLookupInfo receiverLookupInfo, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiverLookupInfo {
				currentValues = receiverLookupInfo.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SenderLookupInfo ToService(DOMAIN.SenderLookupInfo senderLookupInfo, Agent agent)
		{
			var serviceModel = new SERVICE.SenderLookupInfo {
				currentValues = senderLookupInfo.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				receiverInfos = senderLookupInfo.ReceiverInfos?.ConvertToService<DOMAIN.ReceiverLookupInfo, SERVICE.ReceiverLookupInfo>(agent).ToArray(),
				billerInfos = senderLookupInfo.BillerInfos?.ConvertToService<DOMAIN.BillerLookupInfo, SERVICE.BillerLookupInfo>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CompletionReceiptType ToService(DOMAIN.CompletionReceiptType completionReceiptType, Agent agent)
		{
			var serviceModel = new SERVICE.CompletionReceiptType {
				receiptMimeType = completionReceiptType.ReceiptMimeType,
				charsetEncoding = completionReceiptType.CharsetEncoding,
				agentReceiptMimeData = completionReceiptType.AgentReceiptMimeData?.ConvertToService<DOMAIN.ReceiptSegmentType, SERVICE.ReceiptSegmentType>(agent).ToArray(),
				consumerReceipt1MimeData = completionReceiptType.ConsumerReceipt1MimeData?.ConvertToService<DOMAIN.ReceiptSegmentType, SERVICE.ReceiptSegmentType>(agent).ToArray(),
				consumerReceipt2MimeData = completionReceiptType.ConsumerReceipt2MimeData?.ConvertToService<DOMAIN.ReceiptSegmentType, SERVICE.ReceiptSegmentType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiptSegmentType ToService(DOMAIN.ReceiptSegmentType receiptSegmentType, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiptSegmentType {
				sequence = receiptSegmentType.Sequence ?? default(int),
				sequenceSpecified = receiptSegmentType.Sequence.HasValue,
				mimeData = receiptSegmentType.MimeData?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.TimeZoneCorrectionType ToService(DOMAIN.TimeZoneCorrectionType timeZoneCorrectionType, Agent agent)
		{
			var serviceModel = new SERVICE.TimeZoneCorrectionType {
				timeZoneId = timeZoneCorrectionType.TimeZoneId,
				offset = timeZoneCorrectionType.Offset ?? default(int),
				offsetSpecified = timeZoneCorrectionType.Offset.HasValue,
				dstSavings = timeZoneCorrectionType.DstSavings ?? default(int),
				dstSavingsSpecified = timeZoneCorrectionType.DstSavings.HasValue,
				startMode = timeZoneCorrectionType.StartMode ?? default(int),
				startModeSpecified = timeZoneCorrectionType.StartMode.HasValue,
				startDay = timeZoneCorrectionType.StartDay ?? default(int),
				startDaySpecified = timeZoneCorrectionType.StartDay.HasValue,
				startMonth = timeZoneCorrectionType.StartMonth ?? default(int),
				startMonthSpecified = timeZoneCorrectionType.StartMonth.HasValue,
				startDayOfWeek = timeZoneCorrectionType.StartDayOfWeek ?? default(int),
				startDayOfWeekSpecified = timeZoneCorrectionType.StartDayOfWeek.HasValue,
				startTime = timeZoneCorrectionType.StartTime ?? default(int),
				startTimeSpecified = timeZoneCorrectionType.StartTime.HasValue,
				startTimeMode = timeZoneCorrectionType.StartTimeMode ?? default(int),
				startTimeModeSpecified = timeZoneCorrectionType.StartTimeMode.HasValue,
				endMode = timeZoneCorrectionType.EndMode ?? default(int),
				endModeSpecified = timeZoneCorrectionType.EndMode.HasValue,
				endDay = timeZoneCorrectionType.EndDay ?? default(int),
				endDaySpecified = timeZoneCorrectionType.EndDay.HasValue,
				endMonth = timeZoneCorrectionType.EndMonth ?? default(int),
				endMonthSpecified = timeZoneCorrectionType.EndMonth.HasValue,
				endDayOfWeek = timeZoneCorrectionType.EndDayOfWeek ?? default(int),
				endDayOfWeekSpecified = timeZoneCorrectionType.EndDayOfWeek.HasValue,
				endTime = timeZoneCorrectionType.EndTime ?? default(int),
				endTimeSpecified = timeZoneCorrectionType.EndTime.HasValue,
				endTimeMode = timeZoneCorrectionType.EndTimeMode ?? default(int),
				endTimeModeSpecified = timeZoneCorrectionType.EndTimeMode.HasValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiveAmountInfo ToService(DOMAIN.ReceiveAmountInfo receiveAmountInfo, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiveAmountInfo {
				receiveAmount = receiveAmountInfo.ReceiveAmount ?? default(decimal),
				receiveAmountSpecified = receiveAmountInfo.ReceiveAmount.HasValue,
				receiveCurrency = receiveAmountInfo.ReceiveCurrency,
				validCurrencyIndicator = receiveAmountInfo.ValidCurrencyIndicator,
				payoutCurrency = receiveAmountInfo.PayoutCurrency,
				totalReceiveFees = receiveAmountInfo.TotalReceiveFees ?? default(decimal),
				totalReceiveFeesSpecified = receiveAmountInfo.TotalReceiveFees.HasValue,
				totalReceiveTaxes = receiveAmountInfo.TotalReceiveTaxes ?? default(decimal),
				totalReceiveTaxesSpecified = receiveAmountInfo.TotalReceiveTaxes.HasValue,
				totalReceiveAmount = receiveAmountInfo.TotalReceiveAmount ?? default(decimal),
				totalReceiveAmountSpecified = receiveAmountInfo.TotalReceiveAmount.HasValue,
				receiveFeesAreEstimated = receiveAmountInfo.ReceiveFeesAreEstimated,
				receiveTaxesAreEstimated = receiveAmountInfo.ReceiveTaxesAreEstimated,
				detailReceiveAmounts = receiveAmountInfo.DetailReceiveAmounts?.ConvertToService<DOMAIN.AmountInfo, SERVICE.AmountInfo>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillPaymentSummaryInfo ToService(DOMAIN.BillPaymentSummaryInfo billPaymentSummaryInfo, Agent agent)
		{
			var serviceModel = new SERVICE.BillPaymentSummaryInfo {
				productVariant = (SERVICE.ProductVariantType)billPaymentSummaryInfo.ProductVariant,
				faceAmount = billPaymentSummaryInfo.FaceAmount,
				feeAmount = billPaymentSummaryInfo.FeeAmount,
				totalAmount = billPaymentSummaryInfo.TotalAmount,
				agentNumber = billPaymentSummaryInfo.AgentNumber,
				agentName = billPaymentSummaryInfo.AgentName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillPaymentDetailInfo ToService(DOMAIN.BillPaymentDetailInfo billPaymentDetailInfo, Agent agent)
		{
			var serviceModel = new SERVICE.BillPaymentDetailInfo {
				referenceNumber = billPaymentDetailInfo.ReferenceNumber,
				productVariant = (SERVICE.ProductVariantType)billPaymentDetailInfo.ProductVariant,
				faceAmount = billPaymentDetailInfo.FaceAmount,
				feeAmount = billPaymentDetailInfo.FeeAmount,
				totalAmount = billPaymentDetailInfo.TotalAmount,
				infoFeeIndicator = billPaymentDetailInfo.InfoFeeIndicator ?? default(bool),
				infoFeeIndicatorSpecified = billPaymentDetailInfo.InfoFeeIndicator.HasValue,
				processingFee = billPaymentDetailInfo.ProcessingFee ?? default(decimal),
				processingFeeSpecified = billPaymentDetailInfo.ProcessingFee.HasValue,
				agentNumber = billPaymentDetailInfo.AgentNumber,
				paymentType = (SERVICE.PaymentType)billPaymentDetailInfo.PaymentType,
				agentName = billPaymentDetailInfo.AgentName,
				date = billPaymentDetailInfo.Date,
				status = (SERVICE.TransactionStatusType)billPaymentDetailInfo.Status,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillerInfo ToService(DOMAIN.BillerInfo billerInfo, Agent agent)
		{
			var serviceModel = new SERVICE.BillerInfo {
				receiveAgentID = billerInfo.ReceiveAgentID,
				receiveCode = billerInfo.ReceiveCode,
				internationalBankAccountNumber = billerInfo.InternationalBankAccountNumber,
				billerGroupID = billerInfo.BillerGroupID,
				billerGroupName = billerInfo.BillerGroupName,
				billerName = billerInfo.BillerName,
				address1 = billerInfo.Address1,
				address2 = billerInfo.Address2,
				address3 = billerInfo.Address3,
				billerCity = billerInfo.BillerCity,
				billerState = billerInfo.BillerState,
				serviceOfferingID = billerInfo.ServiceOfferingID,
				serviceOffering = billerInfo.ServiceOffering,
				serviceOfferingSecondary = billerInfo.ServiceOfferingSecondary,
				serviceOfferingShort = billerInfo.ServiceOfferingShort,
				serviceOfferingShortSecondary = billerInfo.ServiceOfferingShortSecondary,
				industryID = billerInfo.IndustryID?.ToArray(),
				expectedPostingTimeFrame = billerInfo.ExpectedPostingTimeFrame,
				expectedPostingTimeFrameSecondary = billerInfo.ExpectedPostingTimeFrameSecondary,
				billerNotes = billerInfo.BillerNotes,
				billerNotesSecondary = billerInfo.BillerNotesSecondary,
				secondaryLang = billerInfo.SecondaryLang,
				productVariant = (SERVICE.ProductVariantType)billerInfo.ProductVariant,
				billerCutoffTime = billerInfo.BillerCutoffTime,
				billerWebsite = billerInfo.BillerWebsite,
				billerPhoneNumber = billerInfo.BillerPhoneNumber,
				maskAccountNumber = billerInfo.MaskAccountNumber ?? default(bool),
				maskAccountNumberSpecified = billerInfo.MaskAccountNumber.HasValue,
				nationalBillerFlag = billerInfo.NationalBillerFlag ?? default(bool),
				nationalBillerFlagSpecified = billerInfo.NationalBillerFlag.HasValue,
				useStandardUBPFields = billerInfo.UseStandardUBPFields ?? default(bool),
				useStandardUBPFieldsSpecified = billerInfo.UseStandardUBPFields.HasValue,
				acctNumberNumericOnly = billerInfo.AcctNumberNumericOnly ?? default(bool),
				acctNumberNumericOnlySpecified = billerInfo.AcctNumberNumericOnly.HasValue,
				sendFixedAmountFlag = billerInfo.SendFixedAmountFlag ?? default(bool),
				sendFixedAmountFlagSpecified = billerInfo.SendFixedAmountFlag.HasValue,
				cancelWarnFlag = billerInfo.CancelWarnFlag ?? default(bool),
				cancelWarnFlagSpecified = billerInfo.CancelWarnFlag.HasValue,
				refundWarnFlag = billerInfo.RefundWarnFlag ?? default(bool),
				refundWarnFlagSpecified = billerInfo.RefundWarnFlag.HasValue,
				doubleAcctNumberEntryFlag = billerInfo.DoubleAcctNumberEntryFlag ?? default(bool),
				doubleAcctNumberEntryFlagSpecified = billerInfo.DoubleAcctNumberEntryFlag.HasValue,
				minimumFeeAmt = billerInfo.MinimumFeeAmt ?? default(decimal),
				minimumFeeAmtSpecified = billerInfo.MinimumFeeAmt.HasValue,
				feeType = billerInfo.FeeType.HasValue ? (SERVICE.FeeType)billerInfo.FeeType : GetDefaultEnumValue<SERVICE.FeeType>(),
				feeTypeSpecified = billerInfo.FeeType.HasValue,
				consolidatorLocationId = billerInfo.ConsolidatorLocationId,
				consolidatorName = billerInfo.ConsolidatorName,
				classOfTradeCode = billerInfo.ClassOfTradeCode,
				expeditedEligibleFlag = billerInfo.ExpeditedEligibleFlag ?? default(bool),
				expeditedEligibleFlagSpecified = billerInfo.ExpeditedEligibleFlag.HasValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PreCompletionReceiptType ToService(DOMAIN.PreCompletionReceiptType preCompletionReceiptType, Agent agent)
		{
			var serviceModel = new SERVICE.PreCompletionReceiptType {
				receiptMimeType = preCompletionReceiptType.ReceiptMimeType,
				charsetEncoding = preCompletionReceiptType.CharsetEncoding,
				disclosure1MimeData = preCompletionReceiptType.Disclosure1MimeData?.ConvertToService<DOMAIN.ReceiptSegmentType, SERVICE.ReceiptSegmentType>(agent).ToArray(),
				disclosure2MimeData = preCompletionReceiptType.Disclosure2MimeData?.ConvertToService<DOMAIN.ReceiptSegmentType, SERVICE.ReceiptSegmentType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ChildField ToService(DOMAIN.ChildField childField, Agent agent)
		{
			var serviceModel = new SERVICE.ChildField {
				fieldValue = childField.FieldValue,
				infos = childField.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.InfoBase ToService(DOMAIN.InfoBase infoBase, Agent agent)
		{
			var serviceModel = new SERVICE.InfoBase {
				infoKey = infoBase.InfoKey,
				label = infoBase.Label,
				labelStandAlone = infoBase.LabelStandAlone,
				displayOrder = infoBase.DisplayOrder ?? default(int),
				displayOrderSpecified = infoBase.DisplayOrder.HasValue,
				helpTextShort = infoBase.HelpTextShort,
				helpTextLong = infoBase.HelpTextLong,
				documentation = infoBase.Documentation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FieldInfo ToService(DOMAIN.FieldInfo fieldInfo, Agent agent)
		{
			var serviceModel = new SERVICE.FieldInfo {
				display = fieldInfo.Display ?? default(bool),
				displaySpecified = fieldInfo.Display.HasValue,
				dataType = fieldInfo.DataType.HasValue ? (SERVICE.DataType)fieldInfo.DataType : GetDefaultEnumValue<SERVICE.DataType>(),
				dataTypeSpecified = fieldInfo.DataType.HasValue,
				enumeration = fieldInfo.Enumeration != null ? fieldInfo.Enumeration.ConvertToService<DOMAIN.EnumeratedTypeInfo, SERVICE.EnumeratedTypeInfo>(agent) : null,
				displayValue = fieldInfo.DisplayValue,
				infoKey = fieldInfo.InfoKey,
				label = fieldInfo.Label,
				labelStandAlone = fieldInfo.LabelStandAlone,
				displayOrder = fieldInfo.DisplayOrder ?? default(int),
				displayOrderSpecified = fieldInfo.DisplayOrder.HasValue,
				helpTextShort = fieldInfo.HelpTextShort,
				helpTextLong = fieldInfo.HelpTextLong,
				documentation = fieldInfo.Documentation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.EnumeratedTypeInfo ToService(DOMAIN.EnumeratedTypeInfo enumeratedTypeInfo, Agent agent)
		{
			var serviceModel = new SERVICE.EnumeratedTypeInfo {
				name = enumeratedTypeInfo.Name,
				enumeratedItems = enumeratedTypeInfo.EnumeratedItems?.ConvertToService<DOMAIN.EnumeratedIdentifierInfo, SERVICE.EnumeratedIdentifierInfo>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.EnumeratedIdentifierInfo ToService(DOMAIN.EnumeratedIdentifierInfo enumeratedIdentifierInfo, Agent agent)
		{
			var serviceModel = new SERVICE.EnumeratedIdentifierInfo {
				identifier = enumeratedIdentifierInfo.Identifier,
				labelShort = enumeratedIdentifierInfo.LabelShort,
				label = enumeratedIdentifierInfo.Label,
				helpTextShort = enumeratedIdentifierInfo.HelpTextShort,
				helpTextLong = enumeratedIdentifierInfo.HelpTextLong,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FieldToCollectInfo ToService(DOMAIN.FieldToCollectInfo fieldToCollectInfo, Agent agent)
		{
			var serviceModel = new SERVICE.FieldToCollectInfo {
				readOnly = fieldToCollectInfo.ReadOnly ?? default(bool),
				readOnlySpecified = fieldToCollectInfo.ReadOnly.HasValue,
				required = fieldToCollectInfo.Required ?? default(bool),
				requiredSpecified = fieldToCollectInfo.Required.HasValue,
				childFieldsKnown = fieldToCollectInfo.ChildFieldsKnown ?? default(bool),
				childFieldsKnownSpecified = fieldToCollectInfo.ChildFieldsKnown.HasValue,
				fieldMin = fieldToCollectInfo.FieldMin ?? default(int),
				fieldMinSpecified = fieldToCollectInfo.FieldMin.HasValue,
				fieldMax = fieldToCollectInfo.FieldMax ?? default(int),
				fieldMaxSpecified = fieldToCollectInfo.FieldMax.HasValue,
				defaultValue = fieldToCollectInfo.DefaultValue,
				validationRegEx = fieldToCollectInfo.ValidationRegEx,
				exampleFormat = fieldToCollectInfo.ExampleFormat,
				childFields = fieldToCollectInfo.ChildFields?.ConvertToService<DOMAIN.ChildField, SERVICE.ChildField>(agent).ToArray(),
				lookupDataSource = fieldToCollectInfo.LookupDataSource,
				lookupKey = fieldToCollectInfo.LookupKey,
				display = fieldToCollectInfo.Display ?? default(bool),
				displaySpecified = fieldToCollectInfo.Display.HasValue,
				dataType = fieldToCollectInfo.DataType.HasValue ? (SERVICE.DataType)fieldToCollectInfo.DataType : GetDefaultEnumValue<SERVICE.DataType>(),
				dataTypeSpecified = fieldToCollectInfo.DataType.HasValue,
				enumeration = fieldToCollectInfo.Enumeration != null ? fieldToCollectInfo.Enumeration.ConvertToService<DOMAIN.EnumeratedTypeInfo, SERVICE.EnumeratedTypeInfo>(agent) : null,
				displayValue = fieldToCollectInfo.DisplayValue,
				infoKey = fieldToCollectInfo.InfoKey,
				label = fieldToCollectInfo.Label,
				labelStandAlone = fieldToCollectInfo.LabelStandAlone,
				displayOrder = fieldToCollectInfo.DisplayOrder ?? default(int),
				displayOrderSpecified = fieldToCollectInfo.DisplayOrder.HasValue,
				helpTextShort = fieldToCollectInfo.HelpTextShort,
				helpTextLong = fieldToCollectInfo.HelpTextLong,
				documentation = fieldToCollectInfo.Documentation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CategoryInfo ToService(DOMAIN.CategoryInfo categoryInfo, Agent agent)
		{
			var serviceModel = new SERVICE.CategoryInfo {
				infos = categoryInfo.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				infoKey = categoryInfo.InfoKey,
				label = categoryInfo.Label,
				labelStandAlone = categoryInfo.LabelStandAlone,
				displayOrder = categoryInfo.DisplayOrder ?? default(int),
				displayOrderSpecified = categoryInfo.DisplayOrder.HasValue,
				helpTextShort = categoryInfo.HelpTextShort,
				helpTextLong = categoryInfo.HelpTextLong,
				documentation = categoryInfo.Documentation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.Payload ToService(DOMAIN.Payload payload, Agent agent)
		{
			var serviceModel = new SERVICE.Payload {
				doCheckIn = payload.DoCheckIn,
				timeStamp = payload.TimeStamp,
				flags = payload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BusinessError ToService(DOMAIN.BusinessError businessError, Agent agent)
		{
			var serviceModel = new SERVICE.BusinessError {
				errorCode = businessError.ErrorCode,
				message = businessError.Message,
				subErrorCode = businessError.SubErrorCode,
				detailString = businessError.DetailString,
				offendingField = businessError.OffendingField,
				errorCategory = businessError.ErrorCategory,
				messageShort = businessError.MessageShort,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.Response ToService(DOMAIN.Response response, Agent agent)
		{
			var serviceModel = new SERVICE.Response {
				errors = response.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.VersionManifestResponse ToService(DOMAIN.VersionManifestResponse versionManifestResponse, Agent agent)
		{
			var serviceModel = new SERVICE.VersionManifestResponse {
				payload = versionManifestResponse.Payload != null ? versionManifestResponse.Payload.ConvertToService<DOMAIN.VersionManifestResponsePayload, SERVICE.VersionManifestResponsePayload>(agent) : null,
				errors = versionManifestResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.VersionManifestResponsePayload ToService(DOMAIN.VersionManifestResponsePayload versionManifestResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.VersionManifestResponsePayload {
				manifestSize = versionManifestResponsePayload.ManifestSize,
				manifestURL = versionManifestResponsePayload.ManifestURL,
				versionID = versionManifestResponsePayload.VersionID,
				unitProfileID = versionManifestResponsePayload.UnitProfileID,
				doCheckIn = versionManifestResponsePayload.DoCheckIn,
				timeStamp = versionManifestResponsePayload.TimeStamp,
				flags = versionManifestResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.VariableReceiptInfoResponse ToService(DOMAIN.VariableReceiptInfoResponse variableReceiptInfoResponse, Agent agent)
		{
			var serviceModel = new SERVICE.VariableReceiptInfoResponse {
				payload = variableReceiptInfoResponse.Payload != null ? variableReceiptInfoResponse.Payload.ConvertToService<DOMAIN.VariableReceiptInfoResponsePayload, SERVICE.VariableReceiptInfoResponsePayload>(agent) : null,
				errors = variableReceiptInfoResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.VariableReceiptInfoResponsePayload ToService(DOMAIN.VariableReceiptInfoResponsePayload variableReceiptInfoResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.VariableReceiptInfoResponsePayload {
				version = variableReceiptInfoResponsePayload.Version,
				receiptText = variableReceiptInfoResponsePayload.ReceiptText?.ConvertToService<DOMAIN.VariableReceiptTextInfo, SERVICE.VariableReceiptTextInfo>(agent).ToArray(),
				doCheckIn = variableReceiptInfoResponsePayload.DoCheckIn,
				timeStamp = variableReceiptInfoResponsePayload.TimeStamp,
				flags = variableReceiptInfoResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.TranslationsResponse ToService(DOMAIN.TranslationsResponse translationsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.TranslationsResponse {
				payload = translationsResponse.Payload != null ? translationsResponse.Payload.ConvertToService<DOMAIN.TranslationsResponsePayload, SERVICE.TranslationsResponsePayload>(agent) : null,
				errors = translationsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.TranslationsResponsePayload ToService(DOMAIN.TranslationsResponsePayload translationsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.TranslationsResponsePayload {
				translationsVersion = translationsResponsePayload.TranslationsVersion,
				countryTranslations = translationsResponsePayload.CountryTranslations?.ConvertToService<DOMAIN.CountryTranslationType, SERVICE.CountryTranslationType>(agent).ToArray(),
				deliveryOptionTranslations = translationsResponsePayload.DeliveryOptionTranslations?.ConvertToService<DOMAIN.DeliveryOptionTranslationType, SERVICE.DeliveryOptionTranslationType>(agent).ToArray(),
				currencyTranslations = translationsResponsePayload.CurrencyTranslations?.ConvertToService<DOMAIN.CurrencyTranslationType, SERVICE.CurrencyTranslationType>(agent).ToArray(),
				fqdoTextTranslations = translationsResponsePayload.FqdoTextTranslations?.ConvertToService<DOMAIN.FQDOTextTranslationType, SERVICE.FQDOTextTranslationType>(agent).ToArray(),
				industryTranslations = translationsResponsePayload.IndustryTranslations?.ConvertToService<DOMAIN.IndustryTranslationType, SERVICE.IndustryTranslationType>(agent).ToArray(),
				loyaltyTranslations = translationsResponsePayload.LoyaltyTranslations?.ConvertToService<DOMAIN.LoyaltyTranslationType, SERVICE.LoyaltyTranslationType>(agent).ToArray(),
				loyaltyCardTypeTranslations = translationsResponsePayload.LoyaltyCardTypeTranslations?.ConvertToService<DOMAIN.LoyaltyCardTypeTranslationType, SERVICE.LoyaltyCardTypeTranslationType>(agent).ToArray(),
				loyaltyProgramTypeTranslations = translationsResponsePayload.LoyaltyProgramTypeTranslations?.ConvertToService<DOMAIN.LoyaltyProgramTypeTranslationType, SERVICE.LoyaltyProgramTypeTranslationType>(agent).ToArray(),
				languageTranslations = translationsResponsePayload.LanguageTranslations?.ConvertToService<DOMAIN.LanguageTranslationType, SERVICE.LanguageTranslationType>(agent).ToArray(),
				doCheckIn = translationsResponsePayload.DoCheckIn,
				timeStamp = translationsResponsePayload.TimeStamp,
				flags = translationsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.TransactionLookupResponse ToService(DOMAIN.TransactionLookupResponse transactionLookupResponse, Agent agent)
		{
			var serviceModel = new SERVICE.TransactionLookupResponse {
				payload = transactionLookupResponse.Payload != null ? transactionLookupResponse.Payload.ConvertToService<DOMAIN.TransactionLookupResponsePayload, SERVICE.TransactionLookupResponsePayload>(agent) : null,
				errors = transactionLookupResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.TransactionLookupResponsePayload ToService(DOMAIN.TransactionLookupResponsePayload transactionLookupResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.TransactionLookupResponsePayload {
				GAFVersionNumber = transactionLookupResponsePayload.GAFVersionNumber,
				mgiSessionID = transactionLookupResponsePayload.MgiSessionID,
				transactionStatus = (SERVICE.TransactionStatusType)transactionLookupResponsePayload.TransactionStatus,
				redirectInfo = transactionLookupResponsePayload.RedirectInfo != null ? transactionLookupResponsePayload.RedirectInfo.ConvertToService<DOMAIN.RedirectInfo, SERVICE.RedirectInfo>(agent) : null,
				sendAmounts = transactionLookupResponsePayload.SendAmounts != null ? transactionLookupResponsePayload.SendAmounts.ConvertToService<DOMAIN.SendAmountInfo, SERVICE.SendAmountInfo>(agent) : null,
				receiveAmounts = transactionLookupResponsePayload.ReceiveAmounts != null ? transactionLookupResponsePayload.ReceiveAmounts.ConvertToService<DOMAIN.ReceiveAmountInfo, SERVICE.ReceiveAmountInfo>(agent) : null,
				promotionInfos = transactionLookupResponsePayload.PromotionInfos?.ConvertToService<DOMAIN.PromotionInfo, SERVICE.PromotionInfo>(agent).ToArray(),
				disclosureTexts = transactionLookupResponsePayload.DisclosureTexts?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				receiveFeeDisclosureTexts = transactionLookupResponsePayload.ReceiveFeeDisclosureTexts?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				receiveTaxDisclosureTexts = transactionLookupResponsePayload.ReceiveTaxDisclosureTexts?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				currentValues = transactionLookupResponsePayload.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				infos = transactionLookupResponsePayload.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = transactionLookupResponsePayload.DoCheckIn,
				timeStamp = transactionLookupResponsePayload.TimeStamp,
				flags = transactionLookupResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SubagentsResponse ToService(DOMAIN.SubagentsResponse subagentsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SubagentsResponse {
				payload = subagentsResponse.Payload != null ? subagentsResponse.Payload.ConvertToService<DOMAIN.SubagentsResponsePayload, SERVICE.SubagentsResponsePayload>(agent) : null,
				errors = subagentsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SubagentsResponsePayload ToService(DOMAIN.SubagentsResponsePayload subagentsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SubagentsResponsePayload {
				subagents = subagentsResponsePayload.Subagents?.ConvertToService<DOMAIN.SubagentInfo, SERVICE.SubagentInfo>(agent).ToArray(),
				doCheckIn = subagentsResponsePayload.DoCheckIn,
				timeStamp = subagentsResponsePayload.TimeStamp,
				flags = subagentsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SendValidationResponse ToService(DOMAIN.SendValidationResponse sendValidationResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SendValidationResponse {
				payload = sendValidationResponse.Payload != null ? sendValidationResponse.Payload.ConvertToService<DOMAIN.SendValidationResponsePayload, SERVICE.SendValidationResponsePayload>(agent) : null,
				errors = sendValidationResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SendValidationResponsePayload ToService(DOMAIN.SendValidationResponsePayload sendValidationResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SendValidationResponsePayload {
				mgiSessionID = sendValidationResponsePayload.MgiSessionID,
				readyForCommit = sendValidationResponsePayload.ReadyForCommit,
				GAFVersionNumber = sendValidationResponsePayload.GAFVersionNumber,
				token = sendValidationResponsePayload.Token,
				customerReceiveNumber = sendValidationResponsePayload.CustomerReceiveNumber,
				displayAccountID = sendValidationResponsePayload.DisplayAccountID,
				customerServiceMessage = sendValidationResponsePayload.CustomerServiceMessage,
				receiveAgentName = sendValidationResponsePayload.ReceiveAgentName,
				receiveAgentAddress = sendValidationResponsePayload.ReceiveAgentAddress != null ? sendValidationResponsePayload.ReceiveAgentAddress.ConvertToService<DOMAIN.AgentAddressType, SERVICE.AgentAddressType>(agent) : null,
				receiveAgentAbbreviation = sendValidationResponsePayload.ReceiveAgentAbbreviation,
				exchangeRateApplied = sendValidationResponsePayload.ExchangeRateApplied ?? default(decimal),
				exchangeRateAppliedSpecified = sendValidationResponsePayload.ExchangeRateApplied.HasValue,
				sendAmounts = sendValidationResponsePayload.SendAmounts != null ? sendValidationResponsePayload.SendAmounts.ConvertToService<DOMAIN.SendAmountInfo, SERVICE.SendAmountInfo>(agent) : null,
				receiveAmounts = sendValidationResponsePayload.ReceiveAmounts != null ? sendValidationResponsePayload.ReceiveAmounts.ConvertToService<DOMAIN.ReceiveAmountInfo, SERVICE.ReceiveAmountInfo>(agent) : null,
				promotionInfos = sendValidationResponsePayload.PromotionInfos?.ConvertToService<DOMAIN.PromotionInfo, SERVICE.PromotionInfo>(agent).ToArray(),
				fieldsToCollect = sendValidationResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				receipts = sendValidationResponsePayload.Receipts != null ? sendValidationResponsePayload.Receipts.ConvertToService<DOMAIN.PreCompletionReceiptType, SERVICE.PreCompletionReceiptType>(agent) : null,
				receiptInfo = sendValidationResponsePayload.ReceiptInfo != null ? sendValidationResponsePayload.ReceiptInfo.ConvertToService<DOMAIN.SendValidationResponsePayloadReceiptInfo, SERVICE.SendValidationResponsePayloadReceiptInfo>(agent) : null,
				doCheckIn = sendValidationResponsePayload.DoCheckIn,
				timeStamp = sendValidationResponsePayload.TimeStamp,
				flags = sendValidationResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SendValidationResponsePayloadReceiptInfo ToService(DOMAIN.SendValidationResponsePayloadReceiptInfo sendValidationResponsePayloadReceiptInfo, Agent agent)
		{
			var serviceModel = new SERVICE.SendValidationResponsePayloadReceiptInfo {
				receiveFeeDisclosureText = sendValidationResponsePayloadReceiptInfo.ReceiveFeeDisclosureText ?? default(bool),
				receiveFeeDisclosureTextSpecified = sendValidationResponsePayloadReceiptInfo.ReceiveFeeDisclosureText.HasValue,
				receiveTaxDisclosureText = sendValidationResponsePayloadReceiptInfo.ReceiveTaxDisclosureText ?? default(bool),
				receiveTaxDisclosureTextSpecified = sendValidationResponsePayloadReceiptInfo.ReceiveTaxDisclosureText.HasValue,
				promotionalMessages = sendValidationResponsePayloadReceiptInfo.PromotionalMessages?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				disclosureTexts = sendValidationResponsePayloadReceiptInfo.DisclosureTexts?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SendReversalValidationResponse ToService(DOMAIN.SendReversalValidationResponse sendReversalValidationResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SendReversalValidationResponse {
				payload = sendReversalValidationResponse.Payload != null ? sendReversalValidationResponse.Payload.ConvertToService<DOMAIN.SendReversalValidationResponsePayload, SERVICE.SendReversalValidationResponsePayload>(agent) : null,
				errors = sendReversalValidationResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SendReversalValidationResponsePayload ToService(DOMAIN.SendReversalValidationResponsePayload sendReversalValidationResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SendReversalValidationResponsePayload {
				mgiSessionID = sendReversalValidationResponsePayload.MgiSessionID,
				readyForCommit = sendReversalValidationResponsePayload.ReadyForCommit,
				GAFVersionNumber = sendReversalValidationResponsePayload.GAFVersionNumber,
				sendAmount = sendReversalValidationResponsePayload.SendAmount ?? default(decimal),
				sendAmountSpecified = sendReversalValidationResponsePayload.SendAmount.HasValue,
				sendCurrency = sendReversalValidationResponsePayload.SendCurrency,
				totalSendFees = sendReversalValidationResponsePayload.TotalSendFees ?? default(decimal),
				totalSendFeesSpecified = sendReversalValidationResponsePayload.TotalSendFees.HasValue,
				totalSendTaxes = sendReversalValidationResponsePayload.TotalSendTaxes ?? default(decimal),
				totalSendTaxesSpecified = sendReversalValidationResponsePayload.TotalSendTaxes.HasValue,
				totalReversalAmount = sendReversalValidationResponsePayload.TotalReversalAmount ?? default(decimal),
				totalReversalAmountSpecified = sendReversalValidationResponsePayload.TotalReversalAmount.HasValue,
				detailSendAmounts = sendReversalValidationResponsePayload.DetailSendAmounts?.ConvertToService<DOMAIN.AmountInfo, SERVICE.AmountInfo>(agent).ToArray(),
				reversalType = sendReversalValidationResponsePayload.ReversalType.HasValue ? (SERVICE.SendReversalType)sendReversalValidationResponsePayload.ReversalType : GetDefaultEnumValue<SERVICE.SendReversalType>(),
				reversalTypeSpecified = sendReversalValidationResponsePayload.ReversalType.HasValue,
				fieldsToCollect = sendReversalValidationResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				receipts = sendReversalValidationResponsePayload.Receipts != null ? sendReversalValidationResponsePayload.Receipts.ConvertToService<DOMAIN.PreCompletionReceiptType, SERVICE.PreCompletionReceiptType>(agent) : null,
				receiptInfo = sendReversalValidationResponsePayload.ReceiptInfo != null ? sendReversalValidationResponsePayload.ReceiptInfo.ConvertToService<DOMAIN.SendReversalValidationResponsePayloadReceiptInfo, SERVICE.SendReversalValidationResponsePayloadReceiptInfo>(agent) : null,
				doCheckIn = sendReversalValidationResponsePayload.DoCheckIn,
				timeStamp = sendReversalValidationResponsePayload.TimeStamp,
				flags = sendReversalValidationResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SendReversalValidationResponsePayloadReceiptInfo ToService(DOMAIN.SendReversalValidationResponsePayloadReceiptInfo sendReversalValidationResponsePayloadReceiptInfo, Agent agent)
		{
			var serviceModel = new SERVICE.SendReversalValidationResponsePayloadReceiptInfo {
				disclosureTexts = sendReversalValidationResponsePayloadReceiptInfo.DisclosureTexts?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SearchStagedTransactionsResponse ToService(DOMAIN.SearchStagedTransactionsResponse searchStagedTransactionsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SearchStagedTransactionsResponse {
				payload = searchStagedTransactionsResponse.Payload != null ? searchStagedTransactionsResponse.Payload.ConvertToService<DOMAIN.SearchStagedTransactionsResponsePayload, SERVICE.SearchStagedTransactionsResponsePayload>(agent) : null,
				errors = searchStagedTransactionsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SearchStagedTransactionsResponsePayload ToService(DOMAIN.SearchStagedTransactionsResponsePayload searchStagedTransactionsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SearchStagedTransactionsResponsePayload {
				stagedTransactionInfos = searchStagedTransactionsResponsePayload.StagedTransactionInfos?.ConvertToService<DOMAIN.StagedTransactionInfo, SERVICE.StagedTransactionInfo>(agent).ToArray(),
				doCheckIn = searchStagedTransactionsResponsePayload.DoCheckIn,
				timeStamp = searchStagedTransactionsResponsePayload.TimeStamp,
				flags = searchStagedTransactionsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SearchConsumerProfilesResponse ToService(DOMAIN.SearchConsumerProfilesResponse searchConsumerProfilesResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SearchConsumerProfilesResponse {
				payload = searchConsumerProfilesResponse.Payload != null ? searchConsumerProfilesResponse.Payload.ConvertToService<DOMAIN.SearchConsumerProfilesResponsePayload, SERVICE.SearchConsumerProfilesResponsePayload>(agent) : null,
				errors = searchConsumerProfilesResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SearchConsumerProfilesResponsePayload ToService(DOMAIN.SearchConsumerProfilesResponsePayload searchConsumerProfilesResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SearchConsumerProfilesResponsePayload {
				requestGAFVersionNumber = searchConsumerProfilesResponsePayload.RequestGAFVersionNumber,
				responseGAFVersionNumber = searchConsumerProfilesResponsePayload.ResponseGAFVersionNumber,
				consumerProfileSearchInfos = searchConsumerProfilesResponsePayload.ConsumerProfileSearchInfos?.ConvertToService<DOMAIN.ConsumerProfileSearchInfo, SERVICE.ConsumerProfileSearchInfo>(agent).ToArray(),
				infos = searchConsumerProfilesResponsePayload.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				fieldsToCollect = searchConsumerProfilesResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = searchConsumerProfilesResponsePayload.DoCheckIn,
				timeStamp = searchConsumerProfilesResponsePayload.TimeStamp,
				flags = searchConsumerProfilesResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveTransactionDocumentResponse ToService(DOMAIN.SaveTransactionDocumentResponse saveTransactionDocumentResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SaveTransactionDocumentResponse {
				payload = saveTransactionDocumentResponse.Payload != null ? saveTransactionDocumentResponse.Payload.ConvertToService<DOMAIN.SaveTransactionDocumentResponsePayload, SERVICE.SaveTransactionDocumentResponsePayload>(agent) : null,
				errors = saveTransactionDocumentResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveTransactionDocumentResponsePayload ToService(DOMAIN.SaveTransactionDocumentResponsePayload saveTransactionDocumentResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SaveTransactionDocumentResponsePayload {
				documentId = saveTransactionDocumentResponsePayload.DocumentId,
				doCheckIn = saveTransactionDocumentResponsePayload.DoCheckIn,
				timeStamp = saveTransactionDocumentResponsePayload.TimeStamp,
				flags = saveTransactionDocumentResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveSubagentsResponse ToService(DOMAIN.SaveSubagentsResponse saveSubagentsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SaveSubagentsResponse {
				payload = saveSubagentsResponse.Payload != null ? saveSubagentsResponse.Payload.ConvertToService<DOMAIN.SaveSubagentsResponsePayload, SERVICE.SaveSubagentsResponsePayload>(agent) : null,
				errors = saveSubagentsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveSubagentsResponsePayload ToService(DOMAIN.SaveSubagentsResponsePayload saveSubagentsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SaveSubagentsResponsePayload {
				doCheckIn = saveSubagentsResponsePayload.DoCheckIn,
				timeStamp = saveSubagentsResponsePayload.TimeStamp,
				flags = saveSubagentsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveProfileResponse ToService(DOMAIN.SaveProfileResponse saveProfileResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SaveProfileResponse {
				payload = saveProfileResponse.Payload != null ? saveProfileResponse.Payload.ConvertToService<DOMAIN.SaveProfileResponsePayload, SERVICE.SaveProfileResponsePayload>(agent) : null,
				errors = saveProfileResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveProfileResponsePayload ToService(DOMAIN.SaveProfileResponsePayload saveProfileResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SaveProfileResponsePayload {
				doCheckIn = saveProfileResponsePayload.DoCheckIn,
				timeStamp = saveProfileResponsePayload.TimeStamp,
				flags = saveProfileResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveDebugDataResponse ToService(DOMAIN.SaveDebugDataResponse saveDebugDataResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SaveDebugDataResponse {
				payload = saveDebugDataResponse.Payload != null ? saveDebugDataResponse.Payload.ConvertToService<DOMAIN.SaveDebugDataResponsePayload, SERVICE.SaveDebugDataResponsePayload>(agent) : null,
				errors = saveDebugDataResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveDebugDataResponsePayload ToService(DOMAIN.SaveDebugDataResponsePayload saveDebugDataResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SaveDebugDataResponsePayload {
				doCheckIn = saveDebugDataResponsePayload.DoCheckIn,
				timeStamp = saveDebugDataResponsePayload.TimeStamp,
				flags = saveDebugDataResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveConsumerProfileDocumentResponse ToService(DOMAIN.SaveConsumerProfileDocumentResponse saveConsumerProfileDocumentResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SaveConsumerProfileDocumentResponse {
				payload = saveConsumerProfileDocumentResponse.Payload != null ? saveConsumerProfileDocumentResponse.Payload.ConvertToService<DOMAIN.SaveConsumerProfileDocumentResponsePayload, SERVICE.SaveConsumerProfileDocumentResponsePayload>(agent) : null,
				errors = saveConsumerProfileDocumentResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveConsumerProfileDocumentResponsePayload ToService(DOMAIN.SaveConsumerProfileDocumentResponsePayload saveConsumerProfileDocumentResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SaveConsumerProfileDocumentResponsePayload {
				imageReferenceId = saveConsumerProfileDocumentResponsePayload.ImageReferenceId,
				doCheckIn = saveConsumerProfileDocumentResponsePayload.DoCheckIn,
				timeStamp = saveConsumerProfileDocumentResponsePayload.TimeStamp,
				flags = saveConsumerProfileDocumentResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SavePersonalIDImageResponse ToService(DOMAIN.SavePersonalIDImageResponse savePersonalIDImageResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SavePersonalIDImageResponse {
				payload = savePersonalIDImageResponse.Payload != null ? savePersonalIDImageResponse.Payload.ConvertToService<DOMAIN.SavePersonalIDImageResponsePayload, SERVICE.SavePersonalIDImageResponsePayload>(agent) : null,
				errors = savePersonalIDImageResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SavePersonalIDImageResponsePayload ToService(DOMAIN.SavePersonalIDImageResponsePayload savePersonalIDImageResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SavePersonalIDImageResponsePayload {
				imageReferenceId = savePersonalIDImageResponsePayload.ImageReferenceId,
				doCheckIn = savePersonalIDImageResponsePayload.DoCheckIn,
				timeStamp = savePersonalIDImageResponsePayload.TimeStamp,
				flags = savePersonalIDImageResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveConsumerProfileImageResponse ToService(DOMAIN.SaveConsumerProfileImageResponse saveConsumerProfileImageResponse, Agent agent)
		{
			var serviceModel = new SERVICE.SaveConsumerProfileImageResponse {
				payload = saveConsumerProfileImageResponse.Payload != null ? saveConsumerProfileImageResponse.Payload.ConvertToService<DOMAIN.SaveConsumerProfileImageResponsePayload, SERVICE.SaveConsumerProfileImageResponsePayload>(agent) : null,
				errors = saveConsumerProfileImageResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveConsumerProfileImageResponsePayload ToService(DOMAIN.SaveConsumerProfileImageResponsePayload saveConsumerProfileImageResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.SaveConsumerProfileImageResponsePayload {
				mgiSessionID = saveConsumerProfileImageResponsePayload.MgiSessionID,
				GAFVersionNumber = saveConsumerProfileImageResponsePayload.GAFVersionNumber,
				ImageReferenceID = saveConsumerProfileImageResponsePayload.ImageReferenceID,
				doCheckIn = saveConsumerProfileImageResponsePayload.DoCheckIn,
				timeStamp = saveConsumerProfileImageResponsePayload.TimeStamp,
				flags = saveConsumerProfileImageResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.RegisterHardTokenResponse ToService(DOMAIN.RegisterHardTokenResponse registerHardTokenResponse, Agent agent)
		{
			var serviceModel = new SERVICE.RegisterHardTokenResponse {
				payload = registerHardTokenResponse.Payload != null ? registerHardTokenResponse.Payload.ConvertToService<DOMAIN.RegisterHardTokenResponsePayload, SERVICE.RegisterHardTokenResponsePayload>(agent) : null,
				errors = registerHardTokenResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.RegisterHardTokenResponsePayload ToService(DOMAIN.RegisterHardTokenResponsePayload registerHardTokenResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.RegisterHardTokenResponsePayload {
				registrationSuccessful = registerHardTokenResponsePayload.RegistrationSuccessful,
				doCheckIn = registerHardTokenResponsePayload.DoCheckIn,
				timeStamp = registerHardTokenResponsePayload.TimeStamp,
				flags = registerHardTokenResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiveValidationResponse ToService(DOMAIN.ReceiveValidationResponse receiveValidationResponse, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiveValidationResponse {
				payload = receiveValidationResponse.Payload != null ? receiveValidationResponse.Payload.ConvertToService<DOMAIN.ReceiveValidationResponsePayload, SERVICE.ReceiveValidationResponsePayload>(agent) : null,
				errors = receiveValidationResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiveValidationResponsePayload ToService(DOMAIN.ReceiveValidationResponsePayload receiveValidationResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiveValidationResponsePayload {
				mgiSessionID = receiveValidationResponsePayload.MgiSessionID,
				token = receiveValidationResponsePayload.Token,
				readyForCommit = receiveValidationResponsePayload.ReadyForCommit,
				GAFVersionNumber = receiveValidationResponsePayload.GAFVersionNumber,
				fieldsToCollect = receiveValidationResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				receipts = receiveValidationResponsePayload.Receipts != null ? receiveValidationResponsePayload.Receipts.ConvertToService<DOMAIN.PreCompletionReceiptType, SERVICE.PreCompletionReceiptType>(agent) : null,
				receiptInfo = receiveValidationResponsePayload.ReceiptInfo != null ? receiveValidationResponsePayload.ReceiptInfo.ConvertToService<DOMAIN.ReceiveValidationResponsePayloadReceiptInfo, SERVICE.ReceiveValidationResponsePayloadReceiptInfo>(agent) : null,
				doCheckIn = receiveValidationResponsePayload.DoCheckIn,
				timeStamp = receiveValidationResponsePayload.TimeStamp,
				flags = receiveValidationResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiveValidationResponsePayloadReceiptInfo ToService(DOMAIN.ReceiveValidationResponsePayloadReceiptInfo receiveValidationResponsePayloadReceiptInfo, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiveValidationResponsePayloadReceiptInfo {
				disclosureTexts = receiveValidationResponsePayloadReceiptInfo.DisclosureTexts?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiveReversalValidationResponse ToService(DOMAIN.ReceiveReversalValidationResponse receiveReversalValidationResponse, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiveReversalValidationResponse {
				payload = receiveReversalValidationResponse.Payload != null ? receiveReversalValidationResponse.Payload.ConvertToService<DOMAIN.ReceiveReversalValidationResponsePayload, SERVICE.ReceiveReversalValidationResponsePayload>(agent) : null,
				errors = receiveReversalValidationResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiveReversalValidationResponsePayload ToService(DOMAIN.ReceiveReversalValidationResponsePayload receiveReversalValidationResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiveReversalValidationResponsePayload {
				mgiSessionID = receiveReversalValidationResponsePayload.MgiSessionID,
				readyForCommit = receiveReversalValidationResponsePayload.ReadyForCommit,
				GAFVersionNumber = receiveReversalValidationResponsePayload.GAFVersionNumber,
				fieldsToCollect = receiveReversalValidationResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				receipts = receiveReversalValidationResponsePayload.Receipts != null ? receiveReversalValidationResponsePayload.Receipts.ConvertToService<DOMAIN.PreCompletionReceiptType, SERVICE.PreCompletionReceiptType>(agent) : null,
				receiptInfo = receiveReversalValidationResponsePayload.ReceiptInfo != null ? receiveReversalValidationResponsePayload.ReceiptInfo.ConvertToService<DOMAIN.ReceiveReversalValidationResponsePayloadReceiptInfo, SERVICE.ReceiveReversalValidationResponsePayloadReceiptInfo>(agent) : null,
				doCheckIn = receiveReversalValidationResponsePayload.DoCheckIn,
				timeStamp = receiveReversalValidationResponsePayload.TimeStamp,
				flags = receiveReversalValidationResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiveReversalValidationResponsePayloadReceiptInfo ToService(DOMAIN.ReceiveReversalValidationResponsePayloadReceiptInfo receiveReversalValidationResponsePayloadReceiptInfo, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiveReversalValidationResponsePayloadReceiptInfo {
				disclosureTexts = receiveReversalValidationResponsePayloadReceiptInfo.DisclosureTexts?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiptsFormatDetailsResponse ToService(DOMAIN.ReceiptsFormatDetailsResponse receiptsFormatDetailsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiptsFormatDetailsResponse {
				payload = receiptsFormatDetailsResponse.Payload != null ? receiptsFormatDetailsResponse.Payload.ConvertToService<DOMAIN.ReceiptsFormatDetailsResponsePayload, SERVICE.ReceiptsFormatDetailsResponsePayload>(agent) : null,
				errors = receiptsFormatDetailsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiptsFormatDetailsResponsePayload ToService(DOMAIN.ReceiptsFormatDetailsResponsePayload receiptsFormatDetailsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiptsFormatDetailsResponsePayload {
				receiptFormatDetails = receiptsFormatDetailsResponsePayload.ReceiptFormatDetails?.ConvertToService<DOMAIN.ReceiptFormatDetailsType, SERVICE.ReceiptFormatDetailsType>(agent).ToArray(),
				doCheckIn = receiptsFormatDetailsResponsePayload.DoCheckIn,
				timeStamp = receiptsFormatDetailsResponsePayload.TimeStamp,
				flags = receiptsFormatDetailsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PromotionLookupByCodeResponse ToService(DOMAIN.PromotionLookupByCodeResponse promotionLookupByCodeResponse, Agent agent)
		{
			var serviceModel = new SERVICE.PromotionLookupByCodeResponse {
				payload = promotionLookupByCodeResponse.Payload != null ? promotionLookupByCodeResponse.Payload.ConvertToService<DOMAIN.PromotionLookupByCodeResponsePayload, SERVICE.PromotionLookupByCodeResponsePayload>(agent) : null,
				errors = promotionLookupByCodeResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PromotionLookupByCodeResponsePayload ToService(DOMAIN.PromotionLookupByCodeResponsePayload promotionLookupByCodeResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.PromotionLookupByCodeResponsePayload {
				promotionLookupInfo = promotionLookupByCodeResponsePayload.PromotionLookupInfo != null ? promotionLookupByCodeResponsePayload.PromotionLookupInfo.ConvertToService<DOMAIN.PromotionLookupInfo, SERVICE.PromotionLookupInfo>(agent) : null,
				doCheckIn = promotionLookupByCodeResponsePayload.DoCheckIn,
				timeStamp = promotionLookupByCodeResponsePayload.TimeStamp,
				flags = promotionLookupByCodeResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ProfileResponse ToService(DOMAIN.ProfileResponse profileResponse, Agent agent)
		{
			var serviceModel = new SERVICE.ProfileResponse {
				payload = profileResponse.Payload != null ? profileResponse.Payload.ConvertToService<DOMAIN.ProfileResponsePayload, SERVICE.ProfileResponsePayload>(agent) : null,
				errors = profileResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ProfileResponsePayload ToService(DOMAIN.ProfileResponsePayload profileResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.ProfileResponsePayload {
				profileItem = profileResponsePayload.ProfileItem?.ConvertToService<DOMAIN.ProfileItemType, SERVICE.ProfileItemType>(agent).ToArray(),
				productProfileItem = profileResponsePayload.ProductProfileItem?.ConvertToService<DOMAIN.ProductProfileItemType, SERVICE.ProductProfileItemType>(agent).ToArray(),
				employeeProfileItem = profileResponsePayload.EmployeeProfileItem?.ConvertToService<DOMAIN.EmployeeProfileItemType, SERVICE.EmployeeProfileItemType>(agent).ToArray(),
				doCheckIn = profileResponsePayload.DoCheckIn,
				timeStamp = profileResponsePayload.TimeStamp,
				flags = profileResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ProfileItemType ToService(DOMAIN.ProfileItemType profileItemType, Agent agent)
		{
			var serviceModel = new SERVICE.ProfileItemType {
				index = profileItemType.Index,
				key = profileItemType.Key,
				value = profileItemType.Value,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ProductProfileItemType ToService(DOMAIN.ProductProfileItemType productProfileItemType, Agent agent)
		{
			var serviceModel = new SERVICE.ProductProfileItemType {
				index = productProfileItemType.Index,
				key = productProfileItemType.Key,
				value = productProfileItemType.Value,
				productID = productProfileItemType.ProductID,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.EmployeeProfileItemType ToService(DOMAIN.EmployeeProfileItemType employeeProfileItemType, Agent agent)
		{
			var serviceModel = new SERVICE.EmployeeProfileItemType {
				employeeID = employeeProfileItemType.EmployeeID,
				key = employeeProfileItemType.Key,
				index = employeeProfileItemType.Index ?? default(int),
				indexSpecified = employeeProfileItemType.Index.HasValue,
				value = employeeProfileItemType.Value,
				productID = employeeProfileItemType.ProductID,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ProfileChangeResponse ToService(DOMAIN.ProfileChangeResponse profileChangeResponse, Agent agent)
		{
			var serviceModel = new SERVICE.ProfileChangeResponse {
				payload = profileChangeResponse.Payload != null ? profileChangeResponse.Payload.ConvertToService<DOMAIN.ProfileChangeResponsePayload, SERVICE.ProfileChangeResponsePayload>(agent) : null,
				errors = profileChangeResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ProfileChangeResponsePayload ToService(DOMAIN.ProfileChangeResponsePayload profileChangeResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.ProfileChangeResponsePayload {
				doCheckIn = profileChangeResponsePayload.DoCheckIn,
				timeStamp = profileChangeResponsePayload.TimeStamp,
				flags = profileChangeResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.OpenOTPLoginResponse ToService(DOMAIN.OpenOTPLoginResponse openOTPLoginResponse, Agent agent)
		{
			var serviceModel = new SERVICE.OpenOTPLoginResponse {
				payload = openOTPLoginResponse.Payload != null ? openOTPLoginResponse.Payload.ConvertToService<DOMAIN.OpenOTPLoginResponsePayload, SERVICE.OpenOTPLoginResponsePayload>(agent) : null,
				errors = openOTPLoginResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.OpenOTPLoginResponsePayload ToService(DOMAIN.OpenOTPLoginResponsePayload openOTPLoginResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.OpenOTPLoginResponsePayload {
				loginSuccessful = openOTPLoginResponsePayload.LoginSuccessful,
				doCheckIn = openOTPLoginResponsePayload.DoCheckIn,
				timeStamp = openOTPLoginResponsePayload.TimeStamp,
				flags = openOTPLoginResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyOrderTotalResponse ToService(DOMAIN.MoneyOrderTotalResponse moneyOrderTotalResponse, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyOrderTotalResponse {
				payload = moneyOrderTotalResponse.Payload != null ? moneyOrderTotalResponse.Payload.ConvertToService<DOMAIN.MoneyOrderTotalResponsePayload, SERVICE.MoneyOrderTotalResponsePayload>(agent) : null,
				errors = moneyOrderTotalResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyOrderTotalResponsePayload ToService(DOMAIN.MoneyOrderTotalResponsePayload moneyOrderTotalResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyOrderTotalResponsePayload {
				batchID = moneyOrderTotalResponsePayload.BatchID,
				doCheckIn = moneyOrderTotalResponsePayload.DoCheckIn,
				timeStamp = moneyOrderTotalResponsePayload.TimeStamp,
				flags = moneyOrderTotalResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendSummaryReportResponse ToService(DOMAIN.MoneyGramSendSummaryReportResponse moneyGramSendSummaryReportResponse, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendSummaryReportResponse {
				payload = moneyGramSendSummaryReportResponse.Payload != null ? moneyGramSendSummaryReportResponse.Payload.ConvertToService<DOMAIN.MoneyGramSendSummaryReportResponsePayload, SERVICE.MoneyGramSendSummaryReportResponsePayload>(agent) : null,
				errors = moneyGramSendSummaryReportResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendSummaryReportResponsePayload ToService(DOMAIN.MoneyGramSendSummaryReportResponsePayload moneyGramSendSummaryReportResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendSummaryReportResponsePayload {
				reportInfo = moneyGramSendSummaryReportResponsePayload.ReportInfo?.ConvertToService<DOMAIN.MoneyGramSendSummaryInfo, SERVICE.MoneyGramSendSummaryInfo>(agent).ToArray(),
				doCheckIn = moneyGramSendSummaryReportResponsePayload.DoCheckIn,
				timeStamp = moneyGramSendSummaryReportResponsePayload.TimeStamp,
				flags = moneyGramSendSummaryReportResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendDetailReportWithTaxResponse ToService(DOMAIN.MoneyGramSendDetailReportWithTaxResponse moneyGramSendDetailReportWithTaxResponse, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendDetailReportWithTaxResponse {
				payload = moneyGramSendDetailReportWithTaxResponse.Payload != null ? moneyGramSendDetailReportWithTaxResponse.Payload.ConvertToService<DOMAIN.MoneyGramSendDetailReportWithTaxResponsePayload, SERVICE.MoneyGramSendDetailReportWithTaxResponsePayload>(agent) : null,
				errors = moneyGramSendDetailReportWithTaxResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendDetailReportWithTaxResponsePayload ToService(DOMAIN.MoneyGramSendDetailReportWithTaxResponsePayload moneyGramSendDetailReportWithTaxResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendDetailReportWithTaxResponsePayload {
				reportInfo = moneyGramSendDetailReportWithTaxResponsePayload.ReportInfo?.ConvertToService<DOMAIN.MoneyGramSendWithTaxDetailInfo, SERVICE.MoneyGramSendWithTaxDetailInfo>(agent).ToArray(),
				doCheckIn = moneyGramSendDetailReportWithTaxResponsePayload.DoCheckIn,
				timeStamp = moneyGramSendDetailReportWithTaxResponsePayload.TimeStamp,
				flags = moneyGramSendDetailReportWithTaxResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendDetailReportResponse ToService(DOMAIN.MoneyGramSendDetailReportResponse moneyGramSendDetailReportResponse, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendDetailReportResponse {
				payload = moneyGramSendDetailReportResponse.Payload != null ? moneyGramSendDetailReportResponse.Payload.ConvertToService<DOMAIN.MoneyGramSendDetailReportResponsePayload, SERVICE.MoneyGramSendDetailReportResponsePayload>(agent) : null,
				errors = moneyGramSendDetailReportResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendDetailReportResponsePayload ToService(DOMAIN.MoneyGramSendDetailReportResponsePayload moneyGramSendDetailReportResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendDetailReportResponsePayload {
				reportInfo = moneyGramSendDetailReportResponsePayload.ReportInfo?.ConvertToService<DOMAIN.MoneyGramSendDetailInfo, SERVICE.MoneyGramSendDetailInfo>(agent).ToArray(),
				doCheckIn = moneyGramSendDetailReportResponsePayload.DoCheckIn,
				timeStamp = moneyGramSendDetailReportResponsePayload.TimeStamp,
				flags = moneyGramSendDetailReportResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramReceiveSummaryReportResponse ToService(DOMAIN.MoneyGramReceiveSummaryReportResponse moneyGramReceiveSummaryReportResponse, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramReceiveSummaryReportResponse {
				payload = moneyGramReceiveSummaryReportResponse.Payload != null ? moneyGramReceiveSummaryReportResponse.Payload.ConvertToService<DOMAIN.MoneyGramReceiveSummaryReportResponsePayload, SERVICE.MoneyGramReceiveSummaryReportResponsePayload>(agent) : null,
				errors = moneyGramReceiveSummaryReportResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramReceiveSummaryReportResponsePayload ToService(DOMAIN.MoneyGramReceiveSummaryReportResponsePayload moneyGramReceiveSummaryReportResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramReceiveSummaryReportResponsePayload {
				reportInfo = moneyGramReceiveSummaryReportResponsePayload.ReportInfo?.ConvertToService<DOMAIN.MoneyGramReceiveSummaryInfo, SERVICE.MoneyGramReceiveSummaryInfo>(agent).ToArray(),
				doCheckIn = moneyGramReceiveSummaryReportResponsePayload.DoCheckIn,
				timeStamp = moneyGramReceiveSummaryReportResponsePayload.TimeStamp,
				flags = moneyGramReceiveSummaryReportResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramReceiveDetailReportResponse ToService(DOMAIN.MoneyGramReceiveDetailReportResponse moneyGramReceiveDetailReportResponse, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramReceiveDetailReportResponse {
				payload = moneyGramReceiveDetailReportResponse.Payload != null ? moneyGramReceiveDetailReportResponse.Payload.ConvertToService<DOMAIN.MoneyGramReceiveDetailReportResponsePayload, SERVICE.MoneyGramReceiveDetailReportResponsePayload>(agent) : null,
				errors = moneyGramReceiveDetailReportResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramReceiveDetailReportResponsePayload ToService(DOMAIN.MoneyGramReceiveDetailReportResponsePayload moneyGramReceiveDetailReportResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramReceiveDetailReportResponsePayload {
				reportInfo = moneyGramReceiveDetailReportResponsePayload.ReportInfo?.ConvertToService<DOMAIN.MoneyGramReceiveDetailInfo, SERVICE.MoneyGramReceiveDetailInfo>(agent).ToArray(),
				doCheckIn = moneyGramReceiveDetailReportResponsePayload.DoCheckIn,
				timeStamp = moneyGramReceiveDetailReportResponsePayload.TimeStamp,
				flags = moneyGramReceiveDetailReportResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.InjectedInstructionResponse ToService(DOMAIN.InjectedInstructionResponse injectedInstructionResponse, Agent agent)
		{
			var serviceModel = new SERVICE.InjectedInstructionResponse {
				payload = injectedInstructionResponse.Payload != null ? injectedInstructionResponse.Payload.ConvertToService<DOMAIN.InjectedInstructionResponsePayload, SERVICE.InjectedInstructionResponsePayload>(agent) : null,
				errors = injectedInstructionResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.InjectedInstructionResponsePayload ToService(DOMAIN.InjectedInstructionResponsePayload injectedInstructionResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.InjectedInstructionResponsePayload {
				doCheckIn = injectedInstructionResponsePayload.DoCheckIn,
				timeStamp = injectedInstructionResponsePayload.TimeStamp,
				flags = injectedInstructionResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.InitialSetupResponse ToService(DOMAIN.InitialSetupResponse initialSetupResponse, Agent agent)
		{
			var serviceModel = new SERVICE.InitialSetupResponse {
				payload = initialSetupResponse.Payload != null ? initialSetupResponse.Payload.ConvertToService<DOMAIN.InitialSetupResponsePayload, SERVICE.InitialSetupResponsePayload>(agent) : null,
				errors = initialSetupResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.InitialSetupResponsePayload ToService(DOMAIN.InitialSetupResponsePayload initialSetupResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.InitialSetupResponsePayload {
				token = initialSetupResponsePayload.Token,
				unitProfileID = initialSetupResponsePayload.UnitProfileID,
				doCheckIn = initialSetupResponsePayload.DoCheckIn,
				timeStamp = initialSetupResponsePayload.TimeStamp,
				flags = initialSetupResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.IndustryResponse ToService(DOMAIN.IndustryResponse industryResponse, Agent agent)
		{
			var serviceModel = new SERVICE.IndustryResponse {
				payload = industryResponse.Payload != null ? industryResponse.Payload.ConvertToService<DOMAIN.IndustryResponsePayload, SERVICE.IndustryResponsePayload>(agent) : null,
				errors = industryResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.IndustryResponsePayload ToService(DOMAIN.IndustryResponsePayload industryResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.IndustryResponsePayload {
				industryInfoList = industryResponsePayload.IndustryInfoList?.ConvertToService<DOMAIN.IndustryInfo, SERVICE.IndustryInfo>(agent).ToArray(),
				doCheckIn = industryResponsePayload.DoCheckIn,
				timeStamp = industryResponsePayload.TimeStamp,
				flags = industryResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetUCPByConsumerAttributesResponse ToService(DOMAIN.GetUCPByConsumerAttributesResponse getUCPByConsumerAttributesResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetUCPByConsumerAttributesResponse {
				payload = getUCPByConsumerAttributesResponse.Payload != null ? getUCPByConsumerAttributesResponse.Payload.ConvertToService<DOMAIN.GetUCPByConsumerAttributesResponsePayload, SERVICE.GetUCPByConsumerAttributesResponsePayload>(agent) : null,
				errors = getUCPByConsumerAttributesResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetUCPByConsumerAttributesResponsePayload ToService(DOMAIN.GetUCPByConsumerAttributesResponsePayload getUCPByConsumerAttributesResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetUCPByConsumerAttributesResponsePayload {
				consumerProfile = getUCPByConsumerAttributesResponsePayload.ConsumerProfile != null ? getUCPByConsumerAttributesResponsePayload.ConsumerProfile.ConvertToService<DOMAIN.UCPResponseProfileType, SERVICE.UCPResponseProfileType>(agent) : null,
				doCheckIn = getUCPByConsumerAttributesResponsePayload.DoCheckIn,
				timeStamp = getUCPByConsumerAttributesResponsePayload.TimeStamp,
				flags = getUCPByConsumerAttributesResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetServiceOptionsResponse ToService(DOMAIN.GetServiceOptionsResponse getServiceOptionsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetServiceOptionsResponse {
				payload = getServiceOptionsResponse.Payload != null ? getServiceOptionsResponse.Payload.ConvertToService<DOMAIN.GetServiceOptionsResponsePayload, SERVICE.GetServiceOptionsResponsePayload>(agent) : null,
				errors = getServiceOptionsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetServiceOptionsResponsePayload ToService(DOMAIN.GetServiceOptionsResponsePayload getServiceOptionsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetServiceOptionsResponsePayload {
				destinationCountryInfos = getServiceOptionsResponsePayload.DestinationCountryInfos?.ConvertToService<DOMAIN.DestinationCountryInfo, SERVICE.DestinationCountryInfo>(agent).ToArray(),
				doCheckIn = getServiceOptionsResponsePayload.DoCheckIn,
				timeStamp = getServiceOptionsResponsePayload.TimeStamp,
				flags = getServiceOptionsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetReceiptForReprintResponse ToService(DOMAIN.GetReceiptForReprintResponse getReceiptForReprintResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetReceiptForReprintResponse {
				payload = getReceiptForReprintResponse.Payload != null ? getReceiptForReprintResponse.Payload.ConvertToService<DOMAIN.GetReceiptForReprintResponsePayload, SERVICE.GetReceiptForReprintResponsePayload>(agent) : null,
				errors = getReceiptForReprintResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetReceiptForReprintResponsePayload ToService(DOMAIN.GetReceiptForReprintResponsePayload getReceiptForReprintResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetReceiptForReprintResponsePayload {
				receiptMimeType = getReceiptForReprintResponsePayload.ReceiptMimeType,
				agentReceiptMimeData = getReceiptForReprintResponsePayload.AgentReceiptMimeData?.ToArray(),
				consumerReceipt1MimeData = getReceiptForReprintResponsePayload.ConsumerReceipt1MimeData?.ToArray(),
				consumerReceipt2MimeData = getReceiptForReprintResponsePayload.ConsumerReceipt2MimeData?.ToArray(),
				doCheckIn = getReceiptForReprintResponsePayload.DoCheckIn,
				timeStamp = getReceiptForReprintResponsePayload.TimeStamp,
				flags = getReceiptForReprintResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetProfileSenderResponse ToService(DOMAIN.GetProfileSenderResponse getProfileSenderResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetProfileSenderResponse {
				payload = getProfileSenderResponse.Payload != null ? getProfileSenderResponse.Payload.ConvertToService<DOMAIN.GetProfileSenderResponsePayload, SERVICE.GetProfileSenderResponsePayload>(agent) : null,
				errors = getProfileSenderResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetProfileSenderResponsePayload ToService(DOMAIN.GetProfileSenderResponsePayload getProfileSenderResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetProfileSenderResponsePayload {
				mgiSessionID = getProfileSenderResponsePayload.MgiSessionID,
				GAFVersionNumber = getProfileSenderResponsePayload.GAFVersionNumber,
				currentValues = getProfileSenderResponsePayload.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				infos = getProfileSenderResponsePayload.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				receivers = getProfileSenderResponsePayload.Receivers?.Select(x => x?.Select(y => y.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent)).ToArray()).ToArray(),
				billers = getProfileSenderResponsePayload.Billers?.Select(x => x?.Select(y => y.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent)).ToArray()).ToArray(),
				doCheckIn = getProfileSenderResponsePayload.DoCheckIn,
				timeStamp = getProfileSenderResponsePayload.TimeStamp,
				flags = getProfileSenderResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetProfileReceiverResponse ToService(DOMAIN.GetProfileReceiverResponse getProfileReceiverResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetProfileReceiverResponse {
				payload = getProfileReceiverResponse.Payload != null ? getProfileReceiverResponse.Payload.ConvertToService<DOMAIN.GetProfileReceiverResponsePayload, SERVICE.GetProfileReceiverResponsePayload>(agent) : null,
				errors = getProfileReceiverResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetProfileReceiverResponsePayload ToService(DOMAIN.GetProfileReceiverResponsePayload getProfileReceiverResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetProfileReceiverResponsePayload {
				mgiSessionID = getProfileReceiverResponsePayload.MgiSessionID,
				GAFVersionNumber = getProfileReceiverResponsePayload.GAFVersionNumber,
				currentValues = getProfileReceiverResponsePayload.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				infos = getProfileReceiverResponsePayload.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = getProfileReceiverResponsePayload.DoCheckIn,
				timeStamp = getProfileReceiverResponsePayload.TimeStamp,
				flags = getProfileReceiverResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetProfileConsumerResponse ToService(DOMAIN.GetProfileConsumerResponse getProfileConsumerResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetProfileConsumerResponse {
				payload = getProfileConsumerResponse.Payload != null ? getProfileConsumerResponse.Payload.ConvertToService<DOMAIN.GetProfileConsumerResponsePayload, SERVICE.GetProfileConsumerResponsePayload>(agent) : null,
				errors = getProfileConsumerResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetProfileConsumerResponsePayload ToService(DOMAIN.GetProfileConsumerResponsePayload getProfileConsumerResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetProfileConsumerResponsePayload {
				mgiSessionID = getProfileConsumerResponsePayload.MgiSessionID,
				GAFVersionNumber = getProfileConsumerResponsePayload.GAFVersionNumber,
				currentValues = getProfileConsumerResponsePayload.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				infos = getProfileConsumerResponsePayload.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = getProfileConsumerResponsePayload.DoCheckIn,
				timeStamp = getProfileConsumerResponsePayload.TimeStamp,
				flags = getProfileConsumerResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetConsumerProfileDocumentResponse ToService(DOMAIN.GetConsumerProfileDocumentResponse getConsumerProfileDocumentResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetConsumerProfileDocumentResponse {
				payload = getConsumerProfileDocumentResponse.Payload != null ? getConsumerProfileDocumentResponse.Payload.ConvertToService<DOMAIN.GetConsumerProfileDocumentResponsePayload, SERVICE.GetConsumerProfileDocumentResponsePayload>(agent) : null,
				errors = getConsumerProfileDocumentResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetConsumerProfileDocumentResponsePayload ToService(DOMAIN.GetConsumerProfileDocumentResponsePayload getConsumerProfileDocumentResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetConsumerProfileDocumentResponsePayload {
				mimeType = getConsumerProfileDocumentResponsePayload.MimeType,
				imageItems = getConsumerProfileDocumentResponsePayload.ImageItems?.ConvertToService<DOMAIN.ImageItemType, SERVICE.ImageItemType>(agent).ToArray(),
				doCheckIn = getConsumerProfileDocumentResponsePayload.DoCheckIn,
				timeStamp = getConsumerProfileDocumentResponsePayload.TimeStamp,
				flags = getConsumerProfileDocumentResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetPersonalIDImageResponse ToService(DOMAIN.GetPersonalIDImageResponse getPersonalIDImageResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetPersonalIDImageResponse {
				payload = getPersonalIDImageResponse.Payload != null ? getPersonalIDImageResponse.Payload.ConvertToService<DOMAIN.GetPersonalIDImageResponsePayload, SERVICE.GetPersonalIDImageResponsePayload>(agent) : null,
				errors = getPersonalIDImageResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetPersonalIDImageResponsePayload ToService(DOMAIN.GetPersonalIDImageResponsePayload getPersonalIDImageResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetPersonalIDImageResponsePayload {
				mimeType = getPersonalIDImageResponsePayload.MimeType,
				imageItems = getPersonalIDImageResponsePayload.ImageItems?.ConvertToService<DOMAIN.ImageItemType, SERVICE.ImageItemType>(agent).ToArray(),
				doCheckIn = getPersonalIDImageResponsePayload.DoCheckIn,
				timeStamp = getPersonalIDImageResponsePayload.TimeStamp,
				flags = getPersonalIDImageResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetEnumerationsResponse ToService(DOMAIN.GetEnumerationsResponse getEnumerationsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetEnumerationsResponse {
				payload = getEnumerationsResponse.Payload != null ? getEnumerationsResponse.Payload.ConvertToService<DOMAIN.GetEnumerationsResponsePayload, SERVICE.GetEnumerationsResponsePayload>(agent) : null,
				errors = getEnumerationsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetEnumerationsResponsePayload ToService(DOMAIN.GetEnumerationsResponsePayload getEnumerationsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetEnumerationsResponsePayload {
				version = getEnumerationsResponsePayload.Version,
				enumerations = getEnumerationsResponsePayload.Enumerations?.ConvertToService<DOMAIN.EnumeratedTypeInfo, SERVICE.EnumeratedTypeInfo>(agent).ToArray(),
				doCheckIn = getEnumerationsResponsePayload.DoCheckIn,
				timeStamp = getEnumerationsResponsePayload.TimeStamp,
				flags = getEnumerationsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetDepositInformationResponse ToService(DOMAIN.GetDepositInformationResponse getDepositInformationResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetDepositInformationResponse {
				payload = getDepositInformationResponse.Payload != null ? getDepositInformationResponse.Payload.ConvertToService<DOMAIN.GetDepositInformationResponsePayload, SERVICE.GetDepositInformationResponsePayload>(agent) : null,
				errors = getDepositInformationResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetDepositInformationResponsePayload ToService(DOMAIN.GetDepositInformationResponsePayload getDepositInformationResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetDepositInformationResponsePayload {
				startingARBalance = getDepositInformationResponsePayload.StartingARBalance,
				depositAndProofTotalAmount = getDepositInformationResponsePayload.DepositAndProofTotalAmount,
				outstandingTransactionTotalAmount = getDepositInformationResponsePayload.OutstandingTransactionTotalAmount,
				currentCreditLimit = getDepositInformationResponsePayload.CurrentCreditLimit,
				outstandingBalance = getDepositInformationResponsePayload.OutstandingBalance,
				availableCredit = getDepositInformationResponsePayload.AvailableCredit,
				depositAndProofInfo = getDepositInformationResponsePayload.DepositAndProofInfo?.ConvertToService<DOMAIN.DepositAndProofInfo, SERVICE.DepositAndProofInfo>(agent).ToArray(),
				partnerCredit = getDepositInformationResponsePayload.PartnerCredit != null ? getDepositInformationResponsePayload.PartnerCredit.ConvertToService<DOMAIN.PartnerCreditType, SERVICE.PartnerCreditType>(agent) : null,
				doCheckIn = getDepositInformationResponsePayload.DoCheckIn,
				timeStamp = getDepositInformationResponsePayload.TimeStamp,
				flags = getDepositInformationResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetDepositBankListResponse ToService(DOMAIN.GetDepositBankListResponse getDepositBankListResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetDepositBankListResponse {
				payload = getDepositBankListResponse.Payload != null ? getDepositBankListResponse.Payload.ConvertToService<DOMAIN.GetDepositBankListResponsePayload, SERVICE.GetDepositBankListResponsePayload>(agent) : null,
				errors = getDepositBankListResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetDepositBankListResponsePayload ToService(DOMAIN.GetDepositBankListResponsePayload getDepositBankListResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetDepositBankListResponsePayload {
				bank = getDepositBankListResponsePayload.Bank?.ConvertToService<DOMAIN.BankInfo, SERVICE.BankInfo>(agent).ToArray(),
				doCheckIn = getDepositBankListResponsePayload.DoCheckIn,
				timeStamp = getDepositBankListResponsePayload.TimeStamp,
				flags = getDepositBankListResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetDebugDataResponse ToService(DOMAIN.GetDebugDataResponse getDebugDataResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetDebugDataResponse {
				payload = getDebugDataResponse.Payload != null ? getDebugDataResponse.Payload.ConvertToService<DOMAIN.GetDebugDataResponsePayload, SERVICE.GetDebugDataResponsePayload>(agent) : null,
				errors = getDebugDataResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetDebugDataResponsePayload ToService(DOMAIN.GetDebugDataResponsePayload getDebugDataResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetDebugDataResponsePayload {
				endOfLog = getDebugDataResponsePayload.EndOfLog,
				collectionEndTimestamp = getDebugDataResponsePayload.CollectionEndTimestamp,
				length = getDebugDataResponsePayload.Length,
				sequenceNumber = getDebugDataResponsePayload.SequenceNumber,
				debugData = getDebugDataResponsePayload.DebugData,
				doCheckIn = getDebugDataResponsePayload.DoCheckIn,
				timeStamp = getDebugDataResponsePayload.TimeStamp,
				flags = getDebugDataResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetCurrencyInfoResponse ToService(DOMAIN.GetCurrencyInfoResponse getCurrencyInfoResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetCurrencyInfoResponse {
				payload = getCurrencyInfoResponse.Payload != null ? getCurrencyInfoResponse.Payload.ConvertToService<DOMAIN.GetCurrencyInfoResponsePayload, SERVICE.GetCurrencyInfoResponsePayload>(agent) : null,
				errors = getCurrencyInfoResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetCurrencyInfoResponsePayload ToService(DOMAIN.GetCurrencyInfoResponsePayload getCurrencyInfoResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetCurrencyInfoResponsePayload {
				version = getCurrencyInfoResponsePayload.Version,
				currencyInfos = getCurrencyInfoResponsePayload.CurrencyInfos?.ConvertToService<DOMAIN.CurrencyInfo, SERVICE.CurrencyInfo>(agent).ToArray(),
				doCheckIn = getCurrencyInfoResponsePayload.DoCheckIn,
				timeStamp = getCurrencyInfoResponsePayload.TimeStamp,
				flags = getCurrencyInfoResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetCountrySubdivisionResponse ToService(DOMAIN.GetCountrySubdivisionResponse getCountrySubdivisionResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetCountrySubdivisionResponse {
				payload = getCountrySubdivisionResponse.Payload != null ? getCountrySubdivisionResponse.Payload.ConvertToService<DOMAIN.GetCountrySubdivisionResponsePayload, SERVICE.GetCountrySubdivisionResponsePayload>(agent) : null,
				errors = getCountrySubdivisionResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetCountrySubdivisionResponsePayload ToService(DOMAIN.GetCountrySubdivisionResponsePayload getCountrySubdivisionResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetCountrySubdivisionResponsePayload {
				version = getCountrySubdivisionResponsePayload.Version,
				countrySubdivisionInfos = getCountrySubdivisionResponsePayload.CountrySubdivisionInfos?.ConvertToService<DOMAIN.CountrySubdivisionInfo, SERVICE.CountrySubdivisionInfo>(agent).ToArray(),
				doCheckIn = getCountrySubdivisionResponsePayload.DoCheckIn,
				timeStamp = getCountrySubdivisionResponsePayload.TimeStamp,
				flags = getCountrySubdivisionResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetCountryInfoResponse ToService(DOMAIN.GetCountryInfoResponse getCountryInfoResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetCountryInfoResponse {
				payload = getCountryInfoResponse.Payload != null ? getCountryInfoResponse.Payload.ConvertToService<DOMAIN.GetCountryInfoResponsePayload, SERVICE.GetCountryInfoResponsePayload>(agent) : null,
				errors = getCountryInfoResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetCountryInfoResponsePayload ToService(DOMAIN.GetCountryInfoResponsePayload getCountryInfoResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetCountryInfoResponsePayload {
				version = getCountryInfoResponsePayload.Version,
				countryInfos = getCountryInfoResponsePayload.CountryInfos?.ConvertToService<DOMAIN.CountryInfo, SERVICE.CountryInfo>(agent).ToArray(),
				doCheckIn = getCountryInfoResponsePayload.DoCheckIn,
				timeStamp = getCountryInfoResponsePayload.TimeStamp,
				flags = getCountryInfoResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetConsumerProfileTransactionHistoryResponse ToService(DOMAIN.GetConsumerProfileTransactionHistoryResponse getConsumerProfileTransactionHistoryResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetConsumerProfileTransactionHistoryResponse {
				payload = getConsumerProfileTransactionHistoryResponse.Payload != null ? getConsumerProfileTransactionHistoryResponse.Payload.ConvertToService<DOMAIN.GetConsumerProfileTransactionHistoryResponsePayload, SERVICE.GetConsumerProfileTransactionHistoryResponsePayload>(agent) : null,
				errors = getConsumerProfileTransactionHistoryResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetConsumerProfileTransactionHistoryResponsePayload ToService(DOMAIN.GetConsumerProfileTransactionHistoryResponsePayload getConsumerProfileTransactionHistoryResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetConsumerProfileTransactionHistoryResponsePayload {
				mgiSessionID = getConsumerProfileTransactionHistoryResponsePayload.MgiSessionID,
				GAFVersionNumber = getConsumerProfileTransactionHistoryResponsePayload.GAFVersionNumber,
				numberOfRowsFound = getConsumerProfileTransactionHistoryResponsePayload.NumberOfRowsFound,
				transactions = getConsumerProfileTransactionHistoryResponsePayload.Transactions?.ConvertToService<DOMAIN.ConsumerProfileTransactionHistoryType, SERVICE.ConsumerProfileTransactionHistoryType>(agent).ToArray(),
				infos = getConsumerProfileTransactionHistoryResponsePayload.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = getConsumerProfileTransactionHistoryResponsePayload.DoCheckIn,
				timeStamp = getConsumerProfileTransactionHistoryResponsePayload.TimeStamp,
				flags = getConsumerProfileTransactionHistoryResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetBroadcastMessagesResponse ToService(DOMAIN.GetBroadcastMessagesResponse getBroadcastMessagesResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetBroadcastMessagesResponse {
				payload = getBroadcastMessagesResponse.Payload != null ? getBroadcastMessagesResponse.Payload.ConvertToService<DOMAIN.GetBroadcastMessagesResponsePayload, SERVICE.GetBroadcastMessagesResponsePayload>(agent) : null,
				errors = getBroadcastMessagesResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetBroadcastMessagesResponsePayload ToService(DOMAIN.GetBroadcastMessagesResponsePayload getBroadcastMessagesResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetBroadcastMessagesResponsePayload {
				status = getBroadcastMessagesResponsePayload.Status,
				messageInfos = getBroadcastMessagesResponsePayload.MessageInfos?.ConvertToService<DOMAIN.MessageInfo, SERVICE.MessageInfo>(agent).ToArray(),
				doCheckIn = getBroadcastMessagesResponsePayload.DoCheckIn,
				timeStamp = getBroadcastMessagesResponsePayload.TimeStamp,
				flags = getBroadcastMessagesResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MessageInfo ToService(DOMAIN.MessageInfo messageInfo, Agent agent)
		{
			var serviceModel = new SERVICE.MessageInfo {
				messageId = messageInfo.MessageId ?? default(int),
				messageIdSpecified = messageInfo.MessageId.HasValue,
				messageVersion = messageInfo.MessageVersion ?? default(int),
				messageVersionSpecified = messageInfo.MessageVersion.HasValue,
				msgLanguageCode = messageInfo.MsgLanguageCode,
				startDate = messageInfo.StartDate,
				expiryDate = messageInfo.ExpiryDate,
				subjectMimeData = messageInfo.SubjectMimeData,
				contentMimeData = messageInfo.ContentMimeData,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetBankDetailsResponse ToService(DOMAIN.GetBankDetailsResponse getBankDetailsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetBankDetailsResponse {
				payload = getBankDetailsResponse.Payload != null ? getBankDetailsResponse.Payload.ConvertToService<DOMAIN.GetBankDetailsResponsePayload, SERVICE.GetBankDetailsResponsePayload>(agent) : null,
				errors = getBankDetailsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetBankDetailsResponsePayload ToService(DOMAIN.GetBankDetailsResponsePayload getBankDetailsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetBankDetailsResponsePayload {
				currentValues = getBankDetailsResponsePayload.CurrentValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				infos = getBankDetailsResponsePayload.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = getBankDetailsResponsePayload.DoCheckIn,
				timeStamp = getBankDetailsResponsePayload.TimeStamp,
				flags = getBankDetailsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetBankDetailsByLevelResponse ToService(DOMAIN.GetBankDetailsByLevelResponse getBankDetailsByLevelResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetBankDetailsByLevelResponse {
				payload = getBankDetailsByLevelResponse.Payload != null ? getBankDetailsByLevelResponse.Payload.ConvertToService<DOMAIN.GetBankDetailsByLevelResponsePayload, SERVICE.GetBankDetailsByLevelResponsePayload>(agent) : null,
				errors = getBankDetailsByLevelResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetBankDetailsByLevelResponsePayload ToService(DOMAIN.GetBankDetailsByLevelResponsePayload getBankDetailsByLevelResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetBankDetailsByLevelResponsePayload {
				hierarchyLevelNumber = getBankDetailsByLevelResponsePayload.HierarchyLevelNumber,
				hierarchyLevelLabel = getBankDetailsByLevelResponsePayload.HierarchyLevelLabel,
				hierarchyLevelInfos = getBankDetailsByLevelResponsePayload.HierarchyLevelInfos?.ConvertToService<DOMAIN.HierarchyLevelInfo, SERVICE.HierarchyLevelInfo>(agent).ToArray(),
				doCheckIn = getBankDetailsByLevelResponsePayload.DoCheckIn,
				timeStamp = getBankDetailsByLevelResponsePayload.TimeStamp,
				flags = getBankDetailsByLevelResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetAllFieldsResponse ToService(DOMAIN.GetAllFieldsResponse getAllFieldsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetAllFieldsResponse {
				payload = getAllFieldsResponse.Payload != null ? getAllFieldsResponse.Payload.ConvertToService<DOMAIN.GetAllFieldsResponsePayload, SERVICE.GetAllFieldsResponsePayload>(agent) : null,
				errors = getAllFieldsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetAllFieldsResponsePayload ToService(DOMAIN.GetAllFieldsResponsePayload getAllFieldsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetAllFieldsResponsePayload {
				version = getAllFieldsResponsePayload.Version,
				infos = getAllFieldsResponsePayload.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = getAllFieldsResponsePayload.DoCheckIn,
				timeStamp = getAllFieldsResponsePayload.TimeStamp,
				flags = getAllFieldsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetAllErrorsResponse ToService(DOMAIN.GetAllErrorsResponse getAllErrorsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.GetAllErrorsResponse {
				payload = getAllErrorsResponse.Payload != null ? getAllErrorsResponse.Payload.ConvertToService<DOMAIN.GetAllErrorsResponsePayload, SERVICE.GetAllErrorsResponsePayload>(agent) : null,
				errors = getAllErrorsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetAllErrorsResponsePayload ToService(DOMAIN.GetAllErrorsResponsePayload getAllErrorsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.GetAllErrorsResponsePayload {
				version = getAllErrorsResponsePayload.Version,
				definedErrors = getAllErrorsResponsePayload.DefinedErrors?.ConvertToService<DOMAIN.GenericBusinessError, SERVICE.GenericBusinessError>(agent).ToArray(),
				doCheckIn = getAllErrorsResponsePayload.DoCheckIn,
				timeStamp = getAllErrorsResponsePayload.TimeStamp,
				flags = getAllErrorsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FeeLookupResponse ToService(DOMAIN.FeeLookupResponse feeLookupResponse, Agent agent)
		{
			var serviceModel = new SERVICE.FeeLookupResponse {
				payload = feeLookupResponse.Payload != null ? feeLookupResponse.Payload.ConvertToService<DOMAIN.FeeLookupResponsePayload, SERVICE.FeeLookupResponsePayload>(agent) : null,
				errors = feeLookupResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FeeLookupResponsePayload ToService(DOMAIN.FeeLookupResponsePayload feeLookupResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.FeeLookupResponsePayload {
				feeInfos = feeLookupResponsePayload.FeeInfos?.ConvertToService<DOMAIN.FeeInfo, SERVICE.FeeInfo>(agent).ToArray(),
				doCheckIn = feeLookupResponsePayload.DoCheckIn,
				timeStamp = feeLookupResponsePayload.TimeStamp,
				flags = feeLookupResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FeeLookupBySendCountryResponse ToService(DOMAIN.FeeLookupBySendCountryResponse feeLookupBySendCountryResponse, Agent agent)
		{
			var serviceModel = new SERVICE.FeeLookupBySendCountryResponse {
				payload = feeLookupBySendCountryResponse.Payload != null ? feeLookupBySendCountryResponse.Payload.ConvertToService<DOMAIN.FeeLookupBySendCountryResponsePayload, SERVICE.FeeLookupBySendCountryResponsePayload>(agent) : null,
				errors = feeLookupBySendCountryResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FeeLookupBySendCountryResponsePayload ToService(DOMAIN.FeeLookupBySendCountryResponsePayload feeLookupBySendCountryResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.FeeLookupBySendCountryResponsePayload {
				countryFeeInfo = feeLookupBySendCountryResponsePayload.CountryFeeInfo?.ConvertToService<DOMAIN.CountryFeeInfo, SERVICE.CountryFeeInfo>(agent).ToArray(),
				doCheckIn = feeLookupBySendCountryResponsePayload.DoCheckIn,
				timeStamp = feeLookupBySendCountryResponsePayload.TimeStamp,
				flags = feeLookupBySendCountryResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DwProfileResponse ToService(DOMAIN.DwProfileResponse dwProfileResponse, Agent agent)
		{
			var serviceModel = new SERVICE.DwProfileResponse {
				payload = dwProfileResponse.Payload != null ? dwProfileResponse.Payload.ConvertToService<DOMAIN.DwProfileResponsePayload, SERVICE.DwProfileResponsePayload>(agent) : null,
				errors = dwProfileResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DwProfileResponsePayload ToService(DOMAIN.DwProfileResponsePayload dwProfileResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.DwProfileResponsePayload {
				profile = dwProfileResponsePayload.Profile,
				doCheckIn = dwProfileResponsePayload.DoCheckIn,
				timeStamp = dwProfileResponsePayload.TimeStamp,
				flags = dwProfileResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DwPasswordResponse ToService(DOMAIN.DwPasswordResponse dwPasswordResponse, Agent agent)
		{
			var serviceModel = new SERVICE.DwPasswordResponse {
				payload = dwPasswordResponse.Payload != null ? dwPasswordResponse.Payload.ConvertToService<DOMAIN.DwPasswordResponsePayload, SERVICE.DwPasswordResponsePayload>(agent) : null,
				errors = dwPasswordResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DwPasswordResponsePayload ToService(DOMAIN.DwPasswordResponsePayload dwPasswordResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.DwPasswordResponsePayload {
				status = dwPasswordResponsePayload.Status,
				reasonCode = (SERVICE.DwPasswordReasonCodeType)dwPasswordResponsePayload.ReasonCode,
				doCheckIn = dwPasswordResponsePayload.DoCheckIn,
				timeStamp = dwPasswordResponsePayload.TimeStamp,
				flags = dwPasswordResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DwInitialSetupResponse ToService(DOMAIN.DwInitialSetupResponse dwInitialSetupResponse, Agent agent)
		{
			var serviceModel = new SERVICE.DwInitialSetupResponse {
				payload = dwInitialSetupResponse.Payload != null ? dwInitialSetupResponse.Payload.ConvertToService<DOMAIN.DwInitialSetupResponsePayload, SERVICE.DwInitialSetupResponsePayload>(agent) : null,
				errors = dwInitialSetupResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DwInitialSetupResponsePayload ToService(DOMAIN.DwInitialSetupResponsePayload dwInitialSetupResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.DwInitialSetupResponsePayload {
				unitProfileID = dwInitialSetupResponsePayload.UnitProfileID,
				token = dwInitialSetupResponsePayload.Token,
				profile = dwInitialSetupResponsePayload.Profile,
				doCheckIn = dwInitialSetupResponsePayload.DoCheckIn,
				timeStamp = dwInitialSetupResponsePayload.TimeStamp,
				flags = dwInitialSetupResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DoddFrankStateRegulatorInfoResponse ToService(DOMAIN.DoddFrankStateRegulatorInfoResponse doddFrankStateRegulatorInfoResponse, Agent agent)
		{
			var serviceModel = new SERVICE.DoddFrankStateRegulatorInfoResponse {
				payload = doddFrankStateRegulatorInfoResponse.Payload != null ? doddFrankStateRegulatorInfoResponse.Payload.ConvertToService<DOMAIN.DoddFrankStateRegulatorInfoResponsePayload, SERVICE.DoddFrankStateRegulatorInfoResponsePayload>(agent) : null,
				errors = doddFrankStateRegulatorInfoResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DoddFrankStateRegulatorInfoResponsePayload ToService(DOMAIN.DoddFrankStateRegulatorInfoResponsePayload doddFrankStateRegulatorInfoResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.DoddFrankStateRegulatorInfoResponsePayload {
				version = doddFrankStateRegulatorInfoResponsePayload.Version,
				stateRegulatorInfo = doddFrankStateRegulatorInfoResponsePayload.StateRegulatorInfo?.ConvertToService<DOMAIN.StateRegulatorInfo, SERVICE.StateRegulatorInfo>(agent).ToArray(),
				doCheckIn = doddFrankStateRegulatorInfoResponsePayload.DoCheckIn,
				timeStamp = doddFrankStateRegulatorInfoResponsePayload.TimeStamp,
				flags = doddFrankStateRegulatorInfoResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DisclosureTextDetailsResponse ToService(DOMAIN.DisclosureTextDetailsResponse disclosureTextDetailsResponse, Agent agent)
		{
			var serviceModel = new SERVICE.DisclosureTextDetailsResponse {
				payload = disclosureTextDetailsResponse.Payload != null ? disclosureTextDetailsResponse.Payload.ConvertToService<DOMAIN.DisclosureTextDetailsResponsePayload, SERVICE.DisclosureTextDetailsResponsePayload>(agent) : null,
				errors = disclosureTextDetailsResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DisclosureTextDetailsResponsePayload ToService(DOMAIN.DisclosureTextDetailsResponsePayload disclosureTextDetailsResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.DisclosureTextDetailsResponsePayload {
				disclosureTextDetails = disclosureTextDetailsResponsePayload.DisclosureTextDetails?.ConvertToService<DOMAIN.DisclosureTextDetailsType, SERVICE.DisclosureTextDetailsType>(agent).ToArray(),
				doCheckIn = disclosureTextDetailsResponsePayload.DoCheckIn,
				timeStamp = disclosureTextDetailsResponsePayload.TimeStamp,
				flags = disclosureTextDetailsResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DirectoryOfAgentsByZipResponse ToService(DOMAIN.DirectoryOfAgentsByZipResponse directoryOfAgentsByZipResponse, Agent agent)
		{
			var serviceModel = new SERVICE.DirectoryOfAgentsByZipResponse {
				payload = directoryOfAgentsByZipResponse.Payload != null ? directoryOfAgentsByZipResponse.Payload.ConvertToService<DOMAIN.DirectoryOfAgentsByZipResponsePayload, SERVICE.DirectoryOfAgentsByZipResponsePayload>(agent) : null,
				errors = directoryOfAgentsByZipResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DirectoryOfAgentsByZipResponsePayload ToService(DOMAIN.DirectoryOfAgentsByZipResponsePayload directoryOfAgentsByZipResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.DirectoryOfAgentsByZipResponsePayload {
				agentInfo = directoryOfAgentsByZipResponsePayload.AgentInfo?.ConvertToService<DOMAIN.AgentInfo, SERVICE.AgentInfo>(agent).ToArray(),
				doCheckIn = directoryOfAgentsByZipResponsePayload.DoCheckIn,
				timeStamp = directoryOfAgentsByZipResponsePayload.TimeStamp,
				flags = directoryOfAgentsByZipResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DirectoryOfAgentsByCityResponse ToService(DOMAIN.DirectoryOfAgentsByCityResponse directoryOfAgentsByCityResponse, Agent agent)
		{
			var serviceModel = new SERVICE.DirectoryOfAgentsByCityResponse {
				payload = directoryOfAgentsByCityResponse.Payload != null ? directoryOfAgentsByCityResponse.Payload.ConvertToService<DOMAIN.DirectoryOfAgentsByCityResponsePayload, SERVICE.DirectoryOfAgentsByCityResponsePayload>(agent) : null,
				errors = directoryOfAgentsByCityResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DirectoryOfAgentsByCityResponsePayload ToService(DOMAIN.DirectoryOfAgentsByCityResponsePayload directoryOfAgentsByCityResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.DirectoryOfAgentsByCityResponsePayload {
				agentInfo = directoryOfAgentsByCityResponsePayload.AgentInfo?.ConvertToService<DOMAIN.AgentInfo, SERVICE.AgentInfo>(agent).ToArray(),
				doCheckIn = directoryOfAgentsByCityResponsePayload.DoCheckIn,
				timeStamp = directoryOfAgentsByCityResponsePayload.TimeStamp,
				flags = directoryOfAgentsByCityResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DirectoryOfAgentsByAreaCodePrefixResponse ToService(DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponse directoryOfAgentsByAreaCodePrefixResponse, Agent agent)
		{
			var serviceModel = new SERVICE.DirectoryOfAgentsByAreaCodePrefixResponse {
				payload = directoryOfAgentsByAreaCodePrefixResponse.Payload != null ? directoryOfAgentsByAreaCodePrefixResponse.Payload.ConvertToService<DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponsePayload, SERVICE.DirectoryOfAgentsByAreaCodePrefixResponsePayload>(agent) : null,
				errors = directoryOfAgentsByAreaCodePrefixResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DirectoryOfAgentsByAreaCodePrefixResponsePayload ToService(DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponsePayload directoryOfAgentsByAreaCodePrefixResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.DirectoryOfAgentsByAreaCodePrefixResponsePayload {
				agentInfo = directoryOfAgentsByAreaCodePrefixResponsePayload.AgentInfo?.ConvertToService<DOMAIN.AgentInfo, SERVICE.AgentInfo>(agent).ToArray(),
				doCheckIn = directoryOfAgentsByAreaCodePrefixResponsePayload.DoCheckIn,
				timeStamp = directoryOfAgentsByAreaCodePrefixResponsePayload.TimeStamp,
				flags = directoryOfAgentsByAreaCodePrefixResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DepositAnnouncementResponse ToService(DOMAIN.DepositAnnouncementResponse depositAnnouncementResponse, Agent agent)
		{
			var serviceModel = new SERVICE.DepositAnnouncementResponse {
				payload = depositAnnouncementResponse.Payload != null ? depositAnnouncementResponse.Payload.ConvertToService<DOMAIN.DepositAnnouncementResponsePayload, SERVICE.DepositAnnouncementResponsePayload>(agent) : null,
				errors = depositAnnouncementResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DepositAnnouncementResponsePayload ToService(DOMAIN.DepositAnnouncementResponsePayload depositAnnouncementResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.DepositAnnouncementResponsePayload {
				depositAnnouncementID = depositAnnouncementResponsePayload.DepositAnnouncementID,
				doCheckIn = depositAnnouncementResponsePayload.DoCheckIn,
				timeStamp = depositAnnouncementResponsePayload.TimeStamp,
				flags = depositAnnouncementResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreateOrUpdateProfileSenderResponse ToService(DOMAIN.CreateOrUpdateProfileSenderResponse createOrUpdateProfileSenderResponse, Agent agent)
		{
			var serviceModel = new SERVICE.CreateOrUpdateProfileSenderResponse {
				payload = createOrUpdateProfileSenderResponse.Payload != null ? createOrUpdateProfileSenderResponse.Payload.ConvertToService<DOMAIN.CreateOrUpdateProfileSenderResponsePayload, SERVICE.CreateOrUpdateProfileSenderResponsePayload>(agent) : null,
				errors = createOrUpdateProfileSenderResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreateOrUpdateProfileSenderResponsePayload ToService(DOMAIN.CreateOrUpdateProfileSenderResponsePayload createOrUpdateProfileSenderResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.CreateOrUpdateProfileSenderResponsePayload {
				mgiSessionID = createOrUpdateProfileSenderResponsePayload.MgiSessionID,
				GAFVersionNumber = createOrUpdateProfileSenderResponsePayload.GAFVersionNumber,
				customerServiceMessage = createOrUpdateProfileSenderResponsePayload.CustomerServiceMessage,
				consumerProfileID = createOrUpdateProfileSenderResponsePayload.ConsumerProfileID,
				consumerProfileIDs = createOrUpdateProfileSenderResponsePayload.ConsumerProfileIDs?.ConvertToService<DOMAIN.ConsumerProfileIDInfo, SERVICE.ConsumerProfileIDInfo>(agent).ToArray(),
				fieldsToCollect = createOrUpdateProfileSenderResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = createOrUpdateProfileSenderResponsePayload.DoCheckIn,
				timeStamp = createOrUpdateProfileSenderResponsePayload.TimeStamp,
				flags = createOrUpdateProfileSenderResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreateOrUpdateProfileReceiverResponse ToService(DOMAIN.CreateOrUpdateProfileReceiverResponse createOrUpdateProfileReceiverResponse, Agent agent)
		{
			var serviceModel = new SERVICE.CreateOrUpdateProfileReceiverResponse {
				payload = createOrUpdateProfileReceiverResponse.Payload != null ? createOrUpdateProfileReceiverResponse.Payload.ConvertToService<DOMAIN.CreateOrUpdateProfileReceiverResponsePayload, SERVICE.CreateOrUpdateProfileReceiverResponsePayload>(agent) : null,
				errors = createOrUpdateProfileReceiverResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreateOrUpdateProfileReceiverResponsePayload ToService(DOMAIN.CreateOrUpdateProfileReceiverResponsePayload createOrUpdateProfileReceiverResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.CreateOrUpdateProfileReceiverResponsePayload {
				mgiSessionID = createOrUpdateProfileReceiverResponsePayload.MgiSessionID,
				GAFVersionNumber = createOrUpdateProfileReceiverResponsePayload.GAFVersionNumber,
				customerServiceMessage = createOrUpdateProfileReceiverResponsePayload.CustomerServiceMessage,
				consumerProfileID = createOrUpdateProfileReceiverResponsePayload.ConsumerProfileID,
				consumerProfileIDs = createOrUpdateProfileReceiverResponsePayload.ConsumerProfileIDs?.ConvertToService<DOMAIN.ConsumerProfileIDInfo, SERVICE.ConsumerProfileIDInfo>(agent).ToArray(),
				fieldsToCollect = createOrUpdateProfileReceiverResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = createOrUpdateProfileReceiverResponsePayload.DoCheckIn,
				timeStamp = createOrUpdateProfileReceiverResponsePayload.TimeStamp,
				flags = createOrUpdateProfileReceiverResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreateOrUpdateProfileConsumerResponse ToService(DOMAIN.CreateOrUpdateProfileConsumerResponse createOrUpdateProfileConsumerResponse, Agent agent)
		{
			var serviceModel = new SERVICE.CreateOrUpdateProfileConsumerResponse {
				payload = createOrUpdateProfileConsumerResponse.Payload != null ? createOrUpdateProfileConsumerResponse.Payload.ConvertToService<DOMAIN.CreateOrUpdateProfileConsumerResponsePayload, SERVICE.CreateOrUpdateProfileConsumerResponsePayload>(agent) : null,
				errors = createOrUpdateProfileConsumerResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreateOrUpdateProfileConsumerResponsePayload ToService(DOMAIN.CreateOrUpdateProfileConsumerResponsePayload createOrUpdateProfileConsumerResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.CreateOrUpdateProfileConsumerResponsePayload {
				mgiSessionID = createOrUpdateProfileConsumerResponsePayload.MgiSessionID,
				GAFVersionNumber = createOrUpdateProfileConsumerResponsePayload.GAFVersionNumber,
				customerServiceMessage = createOrUpdateProfileConsumerResponsePayload.CustomerServiceMessage,
				consumerProfileID = createOrUpdateProfileConsumerResponsePayload.ConsumerProfileID,
				consumerProfileIDs = createOrUpdateProfileConsumerResponsePayload.ConsumerProfileIDs?.ConvertToService<DOMAIN.ConsumerProfileIDInfo, SERVICE.ConsumerProfileIDInfo>(agent).ToArray(),
				fieldsToCollect = createOrUpdateProfileConsumerResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				doCheckIn = createOrUpdateProfileConsumerResponsePayload.DoCheckIn,
				timeStamp = createOrUpdateProfileConsumerResponsePayload.TimeStamp,
				flags = createOrUpdateProfileConsumerResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerHistoryLookupResponse ToService(DOMAIN.ConsumerHistoryLookupResponse consumerHistoryLookupResponse, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerHistoryLookupResponse {
				payload = consumerHistoryLookupResponse.Payload != null ? consumerHistoryLookupResponse.Payload.ConvertToService<DOMAIN.ConsumerHistoryLookupResponsePayload, SERVICE.ConsumerHistoryLookupResponsePayload>(agent) : null,
				errors = consumerHistoryLookupResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerHistoryLookupResponsePayload ToService(DOMAIN.ConsumerHistoryLookupResponsePayload consumerHistoryLookupResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerHistoryLookupResponsePayload {
				senderInfos = consumerHistoryLookupResponsePayload.SenderInfos != null ? consumerHistoryLookupResponsePayload.SenderInfos.ConvertToService<DOMAIN.ConsumerHistoryLookupResponsePayloadSenderInfos, SERVICE.ConsumerHistoryLookupResponsePayloadSenderInfos>(agent) : null,
				doCheckIn = consumerHistoryLookupResponsePayload.DoCheckIn,
				timeStamp = consumerHistoryLookupResponsePayload.TimeStamp,
				flags = consumerHistoryLookupResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerHistoryLookupResponsePayloadSenderInfos ToService(DOMAIN.ConsumerHistoryLookupResponsePayloadSenderInfos consumerHistoryLookupResponsePayloadSenderInfos, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerHistoryLookupResponsePayloadSenderInfos {
				senderInfo = consumerHistoryLookupResponsePayloadSenderInfos.SenderInfo?.ConvertToService<DOMAIN.SenderLookupInfo, SERVICE.SenderLookupInfo>(agent).ToArray(),
				infos = consumerHistoryLookupResponsePayloadSenderInfos.Infos?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConfirmTokenResponse ToService(DOMAIN.ConfirmTokenResponse confirmTokenResponse, Agent agent)
		{
			var serviceModel = new SERVICE.ConfirmTokenResponse {
				payload = confirmTokenResponse.Payload != null ? confirmTokenResponse.Payload.ConvertToService<DOMAIN.ConfirmTokenResponsePayload, SERVICE.ConfirmTokenResponsePayload>(agent) : null,
				errors = confirmTokenResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConfirmTokenResponsePayload ToService(DOMAIN.ConfirmTokenResponsePayload confirmTokenResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.ConfirmTokenResponsePayload {
				profileChanged = confirmTokenResponsePayload.ProfileChanged,
				codeTableChanged = confirmTokenResponsePayload.CodeTableChanged,
				doCheckIn = confirmTokenResponsePayload.DoCheckIn,
				timeStamp = confirmTokenResponsePayload.TimeStamp,
				flags = confirmTokenResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ComplianceTransactionResponse ToService(DOMAIN.ComplianceTransactionResponse complianceTransactionResponse, Agent agent)
		{
			var serviceModel = new SERVICE.ComplianceTransactionResponse {
				payload = complianceTransactionResponse.Payload != null ? complianceTransactionResponse.Payload.ConvertToService<DOMAIN.ComplianceTransactionResponsePayload, SERVICE.ComplianceTransactionResponsePayload>(agent) : null,
				errors = complianceTransactionResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ComplianceTransactionResponsePayload ToService(DOMAIN.ComplianceTransactionResponsePayload complianceTransactionResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.ComplianceTransactionResponsePayload {
				complianceInfoRequired = complianceTransactionResponsePayload.ComplianceInfoRequired,
				cci = complianceTransactionResponsePayload.Cci != null ? complianceTransactionResponsePayload.Cci.ConvertToService<DOMAIN.CustomerComplianceInfo, SERVICE.CustomerComplianceInfo>(agent) : null,
				ofacStatus = complianceTransactionResponsePayload.OfacStatus,
				ofacSourceID = complianceTransactionResponsePayload.OfacSourceID,
				batchID = complianceTransactionResponsePayload.BatchID,
				doCheckIn = complianceTransactionResponsePayload.DoCheckIn,
				timeStamp = complianceTransactionResponsePayload.TimeStamp,
				flags = complianceTransactionResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CustomerComplianceInfo ToService(DOMAIN.CustomerComplianceInfo customerComplianceInfo, Agent agent)
		{
			var serviceModel = new SERVICE.CustomerComplianceInfo {
				typeCode = (SERVICE.CustomerComplianceTypeCodeType)customerComplianceInfo.TypeCode,
				operatorName = customerComplianceInfo.OperatorName,
				localDateTime = customerComplianceInfo.LocalDateTime ?? default(DateTime),
				localDateTimeSpecified = customerComplianceInfo.LocalDateTime.HasValue,
				employeeNumber = customerComplianceInfo.EmployeeNumber,
				comments = customerComplianceInfo.Comments,
				category = customerComplianceInfo.Category ?? default(int),
				categorySpecified = customerComplianceInfo.Category.HasValue,
				otherCategory = customerComplianceInfo.OtherCategory,
				character = customerComplianceInfo.Character ?? default(int),
				characterSpecified = customerComplianceInfo.Character.HasValue,
				lastName = customerComplianceInfo.LastName,
				firstName = customerComplianceInfo.FirstName,
				middleInitial = customerComplianceInfo.MiddleInitial,
				address = customerComplianceInfo.Address,
				address2 = customerComplianceInfo.Address2,
				city = customerComplianceInfo.City,
				state = customerComplianceInfo.State,
				zipCode = customerComplianceInfo.ZipCode,
				country = customerComplianceInfo.Country,
				photoIdType = customerComplianceInfo.PhotoIdType.HasValue ? (SERVICE.PhotoIdType)customerComplianceInfo.PhotoIdType : GetDefaultEnumValue<SERVICE.PhotoIdType>(),
				photoIdTypeSpecified = customerComplianceInfo.PhotoIdType.HasValue,
				photoIdNumber = customerComplianceInfo.PhotoIdNumber,
				photoIdState = customerComplianceInfo.PhotoIdState,
				photoIdCountry = customerComplianceInfo.PhotoIdCountry,
				dateOfBirth = customerComplianceInfo.DateOfBirth ?? default(DateTime),
				dateOfBirthSpecified = customerComplianceInfo.DateOfBirth.HasValue,
				phoneNumber = customerComplianceInfo.PhoneNumber,
				occupation = customerComplianceInfo.Occupation,
				legalIdType = customerComplianceInfo.LegalIdType.HasValue ? (SERVICE.LegalIdType)customerComplianceInfo.LegalIdType : GetDefaultEnumValue<SERVICE.LegalIdType>(),
				legalIdTypeSpecified = customerComplianceInfo.LegalIdType.HasValue,
				legalIdNumber = customerComplianceInfo.LegalIdNumber,
				thirdPartyDBA = customerComplianceInfo.ThirdPartyDBA,
				thirdPartyLastName = customerComplianceInfo.ThirdPartyLastName,
				thirdPartyFirstName = customerComplianceInfo.ThirdPartyFirstName,
				thirdPartyMiddleInitial = customerComplianceInfo.ThirdPartyMiddleInitial,
				thirdPartyAddress = customerComplianceInfo.ThirdPartyAddress,
				thirdPartyAddress2 = customerComplianceInfo.ThirdPartyAddress2,
				thirdPartyCity = customerComplianceInfo.ThirdPartyCity,
				thirdPartyState = customerComplianceInfo.ThirdPartyState,
				thirdPartyZipCode = customerComplianceInfo.ThirdPartyZipCode,
				thirdPartyCountry = customerComplianceInfo.ThirdPartyCountry,
				thirdPartyDOB = customerComplianceInfo.ThirdPartyDOB ?? default(DateTime),
				thirdPartyDOBSpecified = customerComplianceInfo.ThirdPartyDOB.HasValue,
				thirdPartyPhoneNumber = customerComplianceInfo.ThirdPartyPhoneNumber,
				thirdPartyOccupation = customerComplianceInfo.ThirdPartyOccupation,
				thirdPartyLegalIdType = customerComplianceInfo.ThirdPartyLegalIdType.HasValue ? (SERVICE.LegalIdType)customerComplianceInfo.ThirdPartyLegalIdType : GetDefaultEnumValue<SERVICE.LegalIdType>(),
				thirdPartyLegalIdTypeSpecified = customerComplianceInfo.ThirdPartyLegalIdType.HasValue,
				thirdPartyLegalIdNumber = customerComplianceInfo.ThirdPartyLegalIdNumber,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CompleteSessionResponse ToService(DOMAIN.CompleteSessionResponse completeSessionResponse, Agent agent)
		{
			var serviceModel = new SERVICE.CompleteSessionResponse {
				payload = completeSessionResponse.Payload != null ? completeSessionResponse.Payload.ConvertToService<DOMAIN.CompleteSessionResponsePayload, SERVICE.CompleteSessionResponsePayload>(agent) : null,
				errors = completeSessionResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CompleteSessionResponsePayload ToService(DOMAIN.CompleteSessionResponsePayload completeSessionResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.CompleteSessionResponsePayload {
				confirmationNumber = completeSessionResponsePayload.ConfirmationNumber,
				referenceNumber = completeSessionResponsePayload.ReferenceNumber,
				transactionID = completeSessionResponsePayload.TransactionID,
				referenceNumberText = completeSessionResponsePayload.ReferenceNumberText,
				partnerConfirmationNumber = completeSessionResponsePayload.PartnerConfirmationNumber,
				partnerName = completeSessionResponsePayload.PartnerName,
				receiveAgentAbbreviation = completeSessionResponsePayload.ReceiveAgentAbbreviation,
				freePhoneCallPIN = completeSessionResponsePayload.FreePhoneCallPIN,
				tollFreePhoneNumber = completeSessionResponsePayload.TollFreePhoneNumber,
				expectedDateOfDelivery = completeSessionResponsePayload.ExpectedDateOfDelivery ?? default(DateTime),
				expectedDateOfDeliverySpecified = completeSessionResponsePayload.ExpectedDateOfDelivery.HasValue,
				transactionDateTime = completeSessionResponsePayload.TransactionDateTime,
				agentCheckAuthorizationNumber = completeSessionResponsePayload.AgentCheckAuthorizationNumber,
				receipts = completeSessionResponsePayload.Receipts != null ? completeSessionResponsePayload.Receipts.ConvertToService<DOMAIN.CompletionReceiptType, SERVICE.CompletionReceiptType>(agent) : null,
				receiptInfo = completeSessionResponsePayload.ReceiptInfo != null ? completeSessionResponsePayload.ReceiptInfo.ConvertToService<DOMAIN.CompleteSessionResponsePayloadReceiptInfo, SERVICE.CompleteSessionResponsePayloadReceiptInfo>(agent) : null,
				doCheckIn = completeSessionResponsePayload.DoCheckIn,
				timeStamp = completeSessionResponsePayload.TimeStamp,
				flags = completeSessionResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CompleteSessionResponsePayloadReceiptInfo ToService(DOMAIN.CompleteSessionResponsePayloadReceiptInfo completeSessionResponsePayloadReceiptInfo, Agent agent)
		{
			var serviceModel = new SERVICE.CompleteSessionResponsePayloadReceiptInfo {
				receiptTextInfos = completeSessionResponsePayloadReceiptInfo.ReceiptTextInfos?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CityListResponse ToService(DOMAIN.CityListResponse cityListResponse, Agent agent)
		{
			var serviceModel = new SERVICE.CityListResponse {
				payload = cityListResponse.Payload != null ? cityListResponse.Payload.ConvertToService<DOMAIN.CityListResponsePayload, SERVICE.CityListResponsePayload>(agent) : null,
				errors = cityListResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CityListResponsePayload ToService(DOMAIN.CityListResponsePayload cityListResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.CityListResponsePayload {
				city = cityListResponsePayload.City?.ToArray(),
				doCheckIn = cityListResponsePayload.DoCheckIn,
				timeStamp = cityListResponsePayload.TimeStamp,
				flags = cityListResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CheckInResponse ToService(DOMAIN.CheckInResponse checkInResponse, Agent agent)
		{
			var serviceModel = new SERVICE.CheckInResponse {
				payload = checkInResponse.Payload != null ? checkInResponse.Payload.ConvertToService<DOMAIN.CheckInResponsePayload, SERVICE.CheckInResponsePayload>(agent) : null,
				errors = checkInResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CheckInResponsePayload ToService(DOMAIN.CheckInResponsePayload checkInResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.CheckInResponsePayload {
				token = checkInResponsePayload.Token,
				timeZoneCorrection = checkInResponsePayload.TimeZoneCorrection != null ? checkInResponsePayload.TimeZoneCorrection.ConvertToService<DOMAIN.TimeZoneCorrectionType, SERVICE.TimeZoneCorrectionType>(agent) : null,
				doCheckIn = checkInResponsePayload.DoCheckIn,
				timeStamp = checkInResponsePayload.TimeStamp,
				flags = checkInResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BPValidationResponse ToService(DOMAIN.BPValidationResponse bPValidationResponse, Agent agent)
		{
			var serviceModel = new SERVICE.BPValidationResponse {
				payload = bPValidationResponse.Payload != null ? bPValidationResponse.Payload.ConvertToService<DOMAIN.BPValidationResponsePayload, SERVICE.BPValidationResponsePayload>(agent) : null,
				errors = bPValidationResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BPValidationResponsePayload ToService(DOMAIN.BPValidationResponsePayload bPValidationResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.BPValidationResponsePayload {
				mgiSessionID = bPValidationResponsePayload.MgiSessionID,
				readyForCommit = bPValidationResponsePayload.ReadyForCommit,
				GAFVersionNumber = bPValidationResponsePayload.GAFVersionNumber,
				token = bPValidationResponsePayload.Token,
				mgiRewardsNumber = bPValidationResponsePayload.MgiRewardsNumber,
				productVariant = (SERVICE.ProductVariantType)bPValidationResponsePayload.ProductVariant,
				billerCutoffTime = bPValidationResponsePayload.BillerCutoffTime,
				billerAddress = bPValidationResponsePayload.BillerAddress,
				billerAddress2 = bPValidationResponsePayload.BillerAddress2,
				billerAddress3 = bPValidationResponsePayload.BillerAddress3,
				billerCity = bPValidationResponsePayload.BillerCity,
				billerState = bPValidationResponsePayload.BillerState,
				billerPostalCode = bPValidationResponsePayload.BillerPostalCode,
				billerPhone = bPValidationResponsePayload.BillerPhone,
				agentTransactionId = bPValidationResponsePayload.AgentTransactionId,
				serviceOfferingID = bPValidationResponsePayload.ServiceOfferingID,
				processingFee = bPValidationResponsePayload.ProcessingFee ?? default(decimal),
				processingFeeSpecified = bPValidationResponsePayload.ProcessingFee.HasValue,
				infoFeeIndicator = bPValidationResponsePayload.InfoFeeIndicator ?? default(bool),
				infoFeeIndicatorSpecified = bPValidationResponsePayload.InfoFeeIndicator.HasValue,
				exchangeRateApplied = bPValidationResponsePayload.ExchangeRateApplied ?? default(decimal),
				exchangeRateAppliedSpecified = bPValidationResponsePayload.ExchangeRateApplied.HasValue,
				sendAmounts = bPValidationResponsePayload.SendAmounts != null ? bPValidationResponsePayload.SendAmounts.ConvertToService<DOMAIN.SendAmountInfo, SERVICE.SendAmountInfo>(agent) : null,
				receiveAmounts = bPValidationResponsePayload.ReceiveAmounts != null ? bPValidationResponsePayload.ReceiveAmounts.ConvertToService<DOMAIN.ReceiveAmountInfo, SERVICE.ReceiveAmountInfo>(agent) : null,
				promotionInfos = bPValidationResponsePayload.PromotionInfos?.ConvertToService<DOMAIN.PromotionInfo, SERVICE.PromotionInfo>(agent).ToArray(),
				fieldsToCollect = bPValidationResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				receipts = bPValidationResponsePayload.Receipts != null ? bPValidationResponsePayload.Receipts.ConvertToService<DOMAIN.PreCompletionReceiptType, SERVICE.PreCompletionReceiptType>(agent) : null,
				receiptInfo = bPValidationResponsePayload.ReceiptInfo != null ? bPValidationResponsePayload.ReceiptInfo.ConvertToService<DOMAIN.BPValidationResponsePayloadReceiptInfo, SERVICE.BPValidationResponsePayloadReceiptInfo>(agent) : null,
				doCheckIn = bPValidationResponsePayload.DoCheckIn,
				timeStamp = bPValidationResponsePayload.TimeStamp,
				flags = bPValidationResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BPValidationResponsePayloadReceiptInfo ToService(DOMAIN.BPValidationResponsePayloadReceiptInfo bPValidationResponsePayloadReceiptInfo, Agent agent)
		{
			var serviceModel = new SERVICE.BPValidationResponsePayloadReceiptInfo {
				billerWebsite = bPValidationResponsePayloadReceiptInfo.BillerWebsite,
				printMGICustomerServiceNumber = bPValidationResponsePayloadReceiptInfo.PrintMGICustomerServiceNumber ?? default(bool),
				printMGICustomerServiceNumberSpecified = bPValidationResponsePayloadReceiptInfo.PrintMGICustomerServiceNumber.HasValue,
				expectedPostingTimeFrames = bPValidationResponsePayloadReceiptInfo.ExpectedPostingTimeFrames?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				billerNotes = bPValidationResponsePayloadReceiptInfo.BillerNotes?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				serviceOfferingDescriptions = bPValidationResponsePayloadReceiptInfo.ServiceOfferingDescriptions?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				customerTips = bPValidationResponsePayloadReceiptInfo.CustomerTips?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				promotionalMessages = bPValidationResponsePayloadReceiptInfo.PromotionalMessages?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
				disclosureTexts = bPValidationResponsePayloadReceiptInfo.DisclosureTexts?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillPaymentSummaryReportResponse ToService(DOMAIN.BillPaymentSummaryReportResponse billPaymentSummaryReportResponse, Agent agent)
		{
			var serviceModel = new SERVICE.BillPaymentSummaryReportResponse {
				payload = billPaymentSummaryReportResponse.Payload != null ? billPaymentSummaryReportResponse.Payload.ConvertToService<DOMAIN.BillPaymentSummaryReportResponsePayload, SERVICE.BillPaymentSummaryReportResponsePayload>(agent) : null,
				errors = billPaymentSummaryReportResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillPaymentSummaryReportResponsePayload ToService(DOMAIN.BillPaymentSummaryReportResponsePayload billPaymentSummaryReportResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.BillPaymentSummaryReportResponsePayload {
				reportInfo = billPaymentSummaryReportResponsePayload.ReportInfo?.ConvertToService<DOMAIN.BillPaymentSummaryInfo, SERVICE.BillPaymentSummaryInfo>(agent).ToArray(),
				doCheckIn = billPaymentSummaryReportResponsePayload.DoCheckIn,
				timeStamp = billPaymentSummaryReportResponsePayload.TimeStamp,
				flags = billPaymentSummaryReportResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillPaymentDetailReportResponse ToService(DOMAIN.BillPaymentDetailReportResponse billPaymentDetailReportResponse, Agent agent)
		{
			var serviceModel = new SERVICE.BillPaymentDetailReportResponse {
				payload = billPaymentDetailReportResponse.Payload != null ? billPaymentDetailReportResponse.Payload.ConvertToService<DOMAIN.BillPaymentDetailReportResponsePayload, SERVICE.BillPaymentDetailReportResponsePayload>(agent) : null,
				errors = billPaymentDetailReportResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillPaymentDetailReportResponsePayload ToService(DOMAIN.BillPaymentDetailReportResponsePayload billPaymentDetailReportResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.BillPaymentDetailReportResponsePayload {
				reportInfo = billPaymentDetailReportResponsePayload.ReportInfo?.ConvertToService<DOMAIN.BillPaymentDetailInfo, SERVICE.BillPaymentDetailInfo>(agent).ToArray(),
				doCheckIn = billPaymentDetailReportResponsePayload.DoCheckIn,
				timeStamp = billPaymentDetailReportResponsePayload.TimeStamp,
				flags = billPaymentDetailReportResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillerSearchResponse ToService(DOMAIN.BillerSearchResponse billerSearchResponse, Agent agent)
		{
			var serviceModel = new SERVICE.BillerSearchResponse {
				payload = billerSearchResponse.Payload != null ? billerSearchResponse.Payload.ConvertToService<DOMAIN.BillerSearchResponsePayload, SERVICE.BillerSearchResponsePayload>(agent) : null,
				errors = billerSearchResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillerSearchResponsePayload ToService(DOMAIN.BillerSearchResponsePayload billerSearchResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.BillerSearchResponsePayload {
				billerInfo = billerSearchResponsePayload.BillerInfo?.ConvertToService<DOMAIN.BillerInfo, SERVICE.BillerInfo>(agent).ToArray(),
				doCheckIn = billerSearchResponsePayload.DoCheckIn,
				timeStamp = billerSearchResponsePayload.TimeStamp,
				flags = billerSearchResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.AmendValidationResponse ToService(DOMAIN.AmendValidationResponse amendValidationResponse, Agent agent)
		{
			var serviceModel = new SERVICE.AmendValidationResponse {
				payload = amendValidationResponse.Payload != null ? amendValidationResponse.Payload.ConvertToService<DOMAIN.AmendValidationResponsePayload, SERVICE.AmendValidationResponsePayload>(agent) : null,
				errors = amendValidationResponse.Errors?.ConvertToService<DOMAIN.BusinessError, SERVICE.BusinessError>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.AmendValidationResponsePayload ToService(DOMAIN.AmendValidationResponsePayload amendValidationResponsePayload, Agent agent)
		{
			var serviceModel = new SERVICE.AmendValidationResponsePayload {
				mgiSessionID = amendValidationResponsePayload.MgiSessionID,
				readyForCommit = amendValidationResponsePayload.ReadyForCommit,
				GAFVersionNumber = amendValidationResponsePayload.GAFVersionNumber,
				fieldsToCollect = amendValidationResponsePayload.FieldsToCollect?.ConvertToService<DOMAIN.InfoBase, SERVICE.InfoBase>(agent).ToArray(),
				receipts = amendValidationResponsePayload.Receipts != null ? amendValidationResponsePayload.Receipts.ConvertToService<DOMAIN.PreCompletionReceiptType, SERVICE.PreCompletionReceiptType>(agent) : null,
				receiptInfo = amendValidationResponsePayload.ReceiptInfo != null ? amendValidationResponsePayload.ReceiptInfo.ConvertToService<DOMAIN.AmendValidationResponsePayloadReceiptInfo, SERVICE.AmendValidationResponsePayloadReceiptInfo>(agent) : null,
				doCheckIn = amendValidationResponsePayload.DoCheckIn,
				timeStamp = amendValidationResponsePayload.TimeStamp,
				flags = amendValidationResponsePayload.Flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.AmendValidationResponsePayloadReceiptInfo ToService(DOMAIN.AmendValidationResponsePayloadReceiptInfo amendValidationResponsePayloadReceiptInfo, Agent agent)
		{
			var serviceModel = new SERVICE.AmendValidationResponsePayloadReceiptInfo {
				disclosureTexts = amendValidationResponsePayloadReceiptInfo.DisclosureTexts?.ConvertToService<DOMAIN.TextTranslationType, SERVICE.TextTranslationType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DocumentItemType ToService(DOMAIN.DocumentItemType documentItemType, Agent agent)
		{
			var serviceModel = new SERVICE.DocumentItemType {
				label = documentItemType.Label,
				image = documentItemType.Image,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SubagentProfileUpdateType ToService(DOMAIN.SubagentProfileUpdateType subagentProfileUpdateType, Agent agent)
		{
			var serviceModel = new SERVICE.SubagentProfileUpdateType {
				agentID = subagentProfileUpdateType.AgentID,
				sequenceNumber = subagentProfileUpdateType.SequenceNumber,
				profileItemName = subagentProfileUpdateType.ProfileItemName,
				profileItemValue = subagentProfileUpdateType.ProfileItemValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerProfileDocumentContentType ToService(DOMAIN.ConsumerProfileDocumentContentType consumerProfileDocumentContentType, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerProfileDocumentContentType {
				identifier = consumerProfileDocumentContentType.Identifier,
				documentIssueDate = consumerProfileDocumentContentType.DocumentIssueDate,
				mimeType = consumerProfileDocumentContentType.MimeType,
				imageItems = consumerProfileDocumentContentType.ImageItems?.ConvertToService<DOMAIN.ImageItemType, SERVICE.ImageItemType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PersonalIDImageContentType ToService(DOMAIN.PersonalIDImageContentType personalIDImageContentType, Agent agent)
		{
			var serviceModel = new SERVICE.PersonalIDImageContentType {
				identifier = personalIDImageContentType.Identifier,
				personalIDChoice = personalIDImageContentType.PersonalIDChoice,
				personalIDVerificationStr = personalIDImageContentType.PersonalIDVerificationStr,
				personalIDNumber = personalIDImageContentType.PersonalIDNumber,
				mimeType = personalIDImageContentType.MimeType,
				imageItems = personalIDImageContentType.ImageItems?.ConvertToService<DOMAIN.ImageItemType, SERVICE.ImageItemType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerProfileImageContentType ToService(DOMAIN.ConsumerProfileImageContentType consumerProfileImageContentType, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerProfileImageContentType {
				identifier = consumerProfileImageContentType.Identifier,
				mimeType = consumerProfileImageContentType.MimeType,
				image = consumerProfileImageContentType.Image?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiptType ToService(DOMAIN.ReceiptType receiptType, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiptType {
				receiptText = receiptType.ReceiptText,
				md5CheckSum = receiptType.Md5CheckSum,
				version = receiptType.Version,
				longLanguageCode = receiptType.LongLanguageCode,
				province = receiptType.Province,
				additionalLanguages = receiptType.AdditionalLanguages?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.UCPRequestPhoneType ToService(DOMAIN.UCPRequestPhoneType uCPRequestPhoneType, Agent agent)
		{
			var serviceModel = new SERVICE.UCPRequestPhoneType {
				phoneNumber = uCPRequestPhoneType.PhoneNumber,
				type = uCPRequestPhoneType.Type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.UCPRequestEmailType ToService(DOMAIN.UCPRequestEmailType uCPRequestEmailType, Agent agent)
		{
			var serviceModel = new SERVICE.UCPRequestEmailType {
				emailAddress = uCPRequestEmailType.EmailAddress,
				type = uCPRequestEmailType.Type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.UCPRequestProfileType ToService(DOMAIN.UCPRequestProfileType uCPRequestProfileType, Agent agent)
		{
			var serviceModel = new SERVICE.UCPRequestProfileType {
				dateOfBirth = uCPRequestProfileType.DateOfBirth ?? default(DateTime),
				dateOfBirthSpecified = uCPRequestProfileType.DateOfBirth.HasValue,
				emailAddress = uCPRequestProfileType.EmailAddress?.ConvertToService<DOMAIN.UCPRequestEmailType, SERVICE.UCPRequestEmailType>(agent).ToArray(),
				name = uCPRequestProfileType.Name?.ConvertToService<DOMAIN.NameType, SERVICE.NameType>(agent).ToArray(),
				phoneNumber = uCPRequestProfileType.PhoneNumber?.ConvertToService<DOMAIN.UCPRequestPhoneType, SERVICE.UCPRequestPhoneType>(agent).ToArray(),
				rawAddress = uCPRequestProfileType.RawAddress?.ConvertToService<DOMAIN.RawAddressType, SERVICE.RawAddressType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PropertyType ToService(DOMAIN.PropertyType propertyType, Agent agent)
		{
			var serviceModel = new SERVICE.PropertyType {
				Name = propertyType.Name,
				Value = propertyType.Value,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CustomFieldsType ToService(DOMAIN.CustomFieldsType customFieldsType, Agent agent)
		{
			var serviceModel = new SERVICE.CustomFieldsType {
				NameValue = customFieldsType.NameValue != null ? customFieldsType.NameValue.ConvertToService<DOMAIN.PropertyType, SERVICE.PropertyType>(agent) : null,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DCATokenType ToService(DOMAIN.DCATokenType dCATokenType, Agent agent)
		{
			var serviceModel = new SERVICE.DCATokenType {
				key = dCATokenType.Key,
				value = dCATokenType.Value,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.VersionInfo ToService(DOMAIN.VersionInfo versionInfo, Agent agent)
		{
			var serviceModel = new SERVICE.VersionInfo {
				versionType = versionInfo.VersionType,
				versionLevel = versionInfo.VersionLevel,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyOrderInfo ToService(DOMAIN.MoneyOrderInfo moneyOrderInfo, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyOrderInfo {
				printStatus = (SERVICE.MoneyOrderPrintStatusType)moneyOrderInfo.PrintStatus,
				moAccountNumber = moneyOrderInfo.MoAccountNumber,
				deviceID = moneyOrderInfo.DeviceID,
				serialNumber = moneyOrderInfo.SerialNumber,
				itemAmount = moneyOrderInfo.ItemAmount ?? default(decimal),
				itemAmountSpecified = moneyOrderInfo.ItemAmount.HasValue,
				dateTimePrinted = moneyOrderInfo.DateTimePrinted ?? default(DateTime),
				dateTimePrintedSpecified = moneyOrderInfo.DateTimePrinted.HasValue,
				itemFee = moneyOrderInfo.ItemFee ?? default(decimal),
				itemFeeSpecified = moneyOrderInfo.ItemFee.HasValue,
				periodNumber = moneyOrderInfo.PeriodNumber,
				documentSequenceNbr = moneyOrderInfo.DocumentSequenceNbr,
				documentType = moneyOrderInfo.DocumentType,
				dispenserID = moneyOrderInfo.DispenserID,
				voidFlag = moneyOrderInfo.VoidFlag ?? default(bool),
				voidFlagSpecified = moneyOrderInfo.VoidFlag.HasValue,
				voidReasonCode = moneyOrderInfo.VoidReasonCode.HasValue ? (SERVICE.MoneyOrderVoidReasonCodeType)moneyOrderInfo.VoidReasonCode : GetDefaultEnumValue<SERVICE.MoneyOrderVoidReasonCodeType>(),
				voidReasonCodeSpecified = moneyOrderInfo.VoidReasonCode.HasValue,
				taxID = moneyOrderInfo.TaxID,
				employeeID = moneyOrderInfo.EmployeeID,
				vendorNumber = moneyOrderInfo.VendorNumber,
				remoteIssuanceFlag = moneyOrderInfo.RemoteIssuanceFlag ?? default(bool),
				remoteIssuanceFlagSpecified = moneyOrderInfo.RemoteIssuanceFlag.HasValue,
				saleIssuanceTag = moneyOrderInfo.SaleIssuanceTag,
				discountPercentage = moneyOrderInfo.DiscountPercentage ?? default(decimal),
				discountPercentageSpecified = moneyOrderInfo.DiscountPercentage.HasValue,
				discountAmount = moneyOrderInfo.DiscountAmount ?? default(decimal),
				discountAmountSpecified = moneyOrderInfo.DiscountAmount.HasValue,
				accountingStartDay = moneyOrderInfo.AccountingStartDay,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiptImageContentType ToService(DOMAIN.ReceiptImageContentType receiptImageContentType, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiptImageContentType {
				identifier = receiptImageContentType.Identifier,
				mimeType = receiptImageContentType.MimeType,
				image = receiptImageContentType.Image?.ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.Request ToService(DOMAIN.Request request, Agent agent)
		{
			var serviceModel = new SERVICE.Request {
				unitProfileID = request.UnitProfileID ?? default(int),
				unitProfileIDSpecified = request.UnitProfileID.HasValue,
				agentID = request.AgentID,
				agentSequence = request.AgentSequence,
				language = request.Language,
				mgiSessionID = request.MgiSessionID,
				timeStamp = request.TimeStamp,
				clientSoftwareVersion = request.ClientSoftwareVersion,
				poeType = request.PoeType,
				channelType = request.ChannelType,
				operatorName = request.OperatorName,
				targetAudience = request.TargetAudience,
				poeCapabilities = request.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.VersionManifestRequest ToService(DOMAIN.VersionManifestRequest versionManifestRequest, Agent agent)
		{
			var serviceModel = new SERVICE.VersionManifestRequest {
				unitProfileID = versionManifestRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = versionManifestRequest.UnitProfileID.HasValue,
				agentID = versionManifestRequest.AgentID,
				agentSequence = versionManifestRequest.AgentSequence,
				language = versionManifestRequest.Language,
				mgiSessionID = versionManifestRequest.MgiSessionID,
				timeStamp = versionManifestRequest.TimeStamp,
				clientSoftwareVersion = versionManifestRequest.ClientSoftwareVersion,
				poeType = versionManifestRequest.PoeType,
				channelType = versionManifestRequest.ChannelType,
				operatorName = versionManifestRequest.OperatorName,
				targetAudience = versionManifestRequest.TargetAudience,
				poeCapabilities = versionManifestRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.VariableReceiptInfoRequest ToService(DOMAIN.VariableReceiptInfoRequest variableReceiptInfoRequest, Agent agent)
		{
			var serviceModel = new SERVICE.VariableReceiptInfoRequest {
				languages = variableReceiptInfoRequest.Languages?.ToArray(),
				unitProfileID = variableReceiptInfoRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = variableReceiptInfoRequest.UnitProfileID.HasValue,
				agentID = variableReceiptInfoRequest.AgentID,
				agentSequence = variableReceiptInfoRequest.AgentSequence,
				language = variableReceiptInfoRequest.Language,
				mgiSessionID = variableReceiptInfoRequest.MgiSessionID,
				timeStamp = variableReceiptInfoRequest.TimeStamp,
				clientSoftwareVersion = variableReceiptInfoRequest.ClientSoftwareVersion,
				poeType = variableReceiptInfoRequest.PoeType,
				channelType = variableReceiptInfoRequest.ChannelType,
				operatorName = variableReceiptInfoRequest.OperatorName,
				targetAudience = variableReceiptInfoRequest.TargetAudience,
				poeCapabilities = variableReceiptInfoRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.TranslationsRequest ToService(DOMAIN.TranslationsRequest translationsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.TranslationsRequest {
				languageCodes = translationsRequest.LanguageCodes,
				unitProfileID = translationsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = translationsRequest.UnitProfileID.HasValue,
				agentID = translationsRequest.AgentID,
				agentSequence = translationsRequest.AgentSequence,
				language = translationsRequest.Language,
				mgiSessionID = translationsRequest.MgiSessionID,
				timeStamp = translationsRequest.TimeStamp,
				clientSoftwareVersion = translationsRequest.ClientSoftwareVersion,
				poeType = translationsRequest.PoeType,
				channelType = translationsRequest.ChannelType,
				operatorName = translationsRequest.OperatorName,
				targetAudience = translationsRequest.TargetAudience,
				poeCapabilities = translationsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.TransactionLookupRequest ToService(DOMAIN.TransactionLookupRequest transactionLookupRequest, Agent agent)
		{
			var serviceModel = new SERVICE.TransactionLookupRequest {
				GAFVersionNumber = transactionLookupRequest.GAFVersionNumber,
				purposeOfLookup = transactionLookupRequest.PurposeOfLookup,
				referenceNumber = transactionLookupRequest.ReferenceNumber,
				confirmationNumber = transactionLookupRequest.ConfirmationNumber,
				transactionPin = transactionLookupRequest.TransactionPin,
				unitProfileID = transactionLookupRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = transactionLookupRequest.UnitProfileID.HasValue,
				agentID = transactionLookupRequest.AgentID,
				agentSequence = transactionLookupRequest.AgentSequence,
				language = transactionLookupRequest.Language,
				mgiSessionID = transactionLookupRequest.MgiSessionID,
				timeStamp = transactionLookupRequest.TimeStamp,
				clientSoftwareVersion = transactionLookupRequest.ClientSoftwareVersion,
				poeType = transactionLookupRequest.PoeType,
				channelType = transactionLookupRequest.ChannelType,
				operatorName = transactionLookupRequest.OperatorName,
				targetAudience = transactionLookupRequest.TargetAudience,
				poeCapabilities = transactionLookupRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SubagentsRequest ToService(DOMAIN.SubagentsRequest subagentsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SubagentsRequest {
				unitProfileID = subagentsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = subagentsRequest.UnitProfileID.HasValue,
				agentID = subagentsRequest.AgentID,
				agentSequence = subagentsRequest.AgentSequence,
				language = subagentsRequest.Language,
				mgiSessionID = subagentsRequest.MgiSessionID,
				timeStamp = subagentsRequest.TimeStamp,
				clientSoftwareVersion = subagentsRequest.ClientSoftwareVersion,
				poeType = subagentsRequest.PoeType,
				channelType = subagentsRequest.ChannelType,
				operatorName = subagentsRequest.OperatorName,
				targetAudience = subagentsRequest.TargetAudience,
				poeCapabilities = subagentsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SendValidationRequest ToService(DOMAIN.SendValidationRequest sendValidationRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SendValidationRequest {
				GAFVersionNumber = sendValidationRequest.GAFVersionNumber,
				transactionStaging = sendValidationRequest.TransactionStaging,
				sendAmount = sendValidationRequest.SendAmount,
				sendCurrency = sendValidationRequest.SendCurrency,
				feeAmount = sendValidationRequest.FeeAmount ?? default(decimal),
				feeAmountSpecified = sendValidationRequest.FeeAmount.HasValue,
				promoCodes = sendValidationRequest.PromoCodes?.ToArray(),
				destinationCountry = sendValidationRequest.DestinationCountry,
				serviceOption = sendValidationRequest.ServiceOption,
				receiveCurrency = sendValidationRequest.ReceiveCurrency,
				receiveAgentID = sendValidationRequest.ReceiveAgentID,
				fieldValues = sendValidationRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				verifiedFields = sendValidationRequest.VerifiedFields?.ToArray(),
				primaryReceiptLanguage = sendValidationRequest.PrimaryReceiptLanguage,
				secondaryReceiptLanguage = sendValidationRequest.SecondaryReceiptLanguage,
				receiptImages = sendValidationRequest.ReceiptImages?.ConvertToService<DOMAIN.ReceiptImageContentType, SERVICE.ReceiptImageContentType>(agent).ToArray(),
				unitProfileID = sendValidationRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = sendValidationRequest.UnitProfileID.HasValue,
				agentID = sendValidationRequest.AgentID,
				agentSequence = sendValidationRequest.AgentSequence,
				language = sendValidationRequest.Language,
				mgiSessionID = sendValidationRequest.MgiSessionID,
				timeStamp = sendValidationRequest.TimeStamp,
				clientSoftwareVersion = sendValidationRequest.ClientSoftwareVersion,
				poeType = sendValidationRequest.PoeType,
				channelType = sendValidationRequest.ChannelType,
				operatorName = sendValidationRequest.OperatorName,
				targetAudience = sendValidationRequest.TargetAudience,
				poeCapabilities = sendValidationRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SendReversalValidationRequest ToService(DOMAIN.SendReversalValidationRequest sendReversalValidationRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SendReversalValidationRequest {
				GAFVersionNumber = sendReversalValidationRequest.GAFVersionNumber,
				sendAmount = sendReversalValidationRequest.SendAmount,
				sendCurrency = sendReversalValidationRequest.SendCurrency,
				feeRefund = sendReversalValidationRequest.FeeRefund,
				fieldValues = sendReversalValidationRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				verifiedFields = sendReversalValidationRequest.VerifiedFields?.ToArray(),
				primaryReceiptLanguage = sendReversalValidationRequest.PrimaryReceiptLanguage,
				secondaryReceiptLanguage = sendReversalValidationRequest.SecondaryReceiptLanguage,
				receiptImages = sendReversalValidationRequest.ReceiptImages?.ConvertToService<DOMAIN.ReceiptImageContentType, SERVICE.ReceiptImageContentType>(agent).ToArray(),
				unitProfileID = sendReversalValidationRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = sendReversalValidationRequest.UnitProfileID.HasValue,
				agentID = sendReversalValidationRequest.AgentID,
				agentSequence = sendReversalValidationRequest.AgentSequence,
				language = sendReversalValidationRequest.Language,
				mgiSessionID = sendReversalValidationRequest.MgiSessionID,
				timeStamp = sendReversalValidationRequest.TimeStamp,
				clientSoftwareVersion = sendReversalValidationRequest.ClientSoftwareVersion,
				poeType = sendReversalValidationRequest.PoeType,
				channelType = sendReversalValidationRequest.ChannelType,
				operatorName = sendReversalValidationRequest.OperatorName,
				targetAudience = sendReversalValidationRequest.TargetAudience,
				poeCapabilities = sendReversalValidationRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SearchStagedTransactionsRequest ToService(DOMAIN.SearchStagedTransactionsRequest searchStagedTransactionsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SearchStagedTransactionsRequest {
				mgiRewardsNumber = searchStagedTransactionsRequest.MgiRewardsNumber,
				senderPhoneNumber = searchStagedTransactionsRequest.SenderPhoneNumber,
				senderFirstName = searchStagedTransactionsRequest.SenderFirstName,
				senderLastName = searchStagedTransactionsRequest.SenderLastName,
				billerAccountNumber = searchStagedTransactionsRequest.BillerAccountNumber,
				mgiSessionType = searchStagedTransactionsRequest.MgiSessionType.HasValue ? (SERVICE.SessionType)searchStagedTransactionsRequest.MgiSessionType : GetDefaultEnumValue<SERVICE.SessionType>(),
				mgiSessionTypeSpecified = searchStagedTransactionsRequest.MgiSessionType.HasValue,
				thisLocationOnly = searchStagedTransactionsRequest.ThisLocationOnly,
				maxRowsToReturn = searchStagedTransactionsRequest.MaxRowsToReturn,
				returnFormFreeOnly = searchStagedTransactionsRequest.ReturnFormFreeOnly,
				unitProfileID = searchStagedTransactionsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = searchStagedTransactionsRequest.UnitProfileID.HasValue,
				agentID = searchStagedTransactionsRequest.AgentID,
				agentSequence = searchStagedTransactionsRequest.AgentSequence,
				language = searchStagedTransactionsRequest.Language,
				mgiSessionID = searchStagedTransactionsRequest.MgiSessionID,
				timeStamp = searchStagedTransactionsRequest.TimeStamp,
				clientSoftwareVersion = searchStagedTransactionsRequest.ClientSoftwareVersion,
				poeType = searchStagedTransactionsRequest.PoeType,
				channelType = searchStagedTransactionsRequest.ChannelType,
				operatorName = searchStagedTransactionsRequest.OperatorName,
				targetAudience = searchStagedTransactionsRequest.TargetAudience,
				poeCapabilities = searchStagedTransactionsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SearchConsumerProfilesRequest ToService(DOMAIN.SearchConsumerProfilesRequest searchConsumerProfilesRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SearchConsumerProfilesRequest {
				GAFVersionNumber = searchConsumerProfilesRequest.GAFVersionNumber,
				fieldValues = searchConsumerProfilesRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				unitProfileID = searchConsumerProfilesRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = searchConsumerProfilesRequest.UnitProfileID.HasValue,
				agentID = searchConsumerProfilesRequest.AgentID,
				agentSequence = searchConsumerProfilesRequest.AgentSequence,
				language = searchConsumerProfilesRequest.Language,
				mgiSessionID = searchConsumerProfilesRequest.MgiSessionID,
				timeStamp = searchConsumerProfilesRequest.TimeStamp,
				clientSoftwareVersion = searchConsumerProfilesRequest.ClientSoftwareVersion,
				poeType = searchConsumerProfilesRequest.PoeType,
				channelType = searchConsumerProfilesRequest.ChannelType,
				operatorName = searchConsumerProfilesRequest.OperatorName,
				targetAudience = searchConsumerProfilesRequest.TargetAudience,
				poeCapabilities = searchConsumerProfilesRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveTransactionDocumentRequest ToService(DOMAIN.SaveTransactionDocumentRequest saveTransactionDocumentRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SaveTransactionDocumentRequest {
				sessionType = (SERVICE.SessionType)saveTransactionDocumentRequest.SessionType,
				referenceNumber = saveTransactionDocumentRequest.ReferenceNumber,
				senderFirstName = saveTransactionDocumentRequest.SenderFirstName,
				senderMiddleName = saveTransactionDocumentRequest.SenderMiddleName,
				senderLastName = saveTransactionDocumentRequest.SenderLastName,
				senderLastName2 = saveTransactionDocumentRequest.SenderLastName2,
				receiverFirstName = saveTransactionDocumentRequest.ReceiverFirstName,
				receiverMiddleName = saveTransactionDocumentRequest.ReceiverMiddleName,
				receiverLastName = saveTransactionDocumentRequest.ReceiverLastName,
				receiverLastName2 = saveTransactionDocumentRequest.ReceiverLastName2,
				identifier = saveTransactionDocumentRequest.Identifier,
				mimeType = saveTransactionDocumentRequest.MimeType,
				documentItems = saveTransactionDocumentRequest.DocumentItems?.ConvertToService<DOMAIN.DocumentItemType, SERVICE.DocumentItemType>(agent).ToArray(),
				unitProfileID = saveTransactionDocumentRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = saveTransactionDocumentRequest.UnitProfileID.HasValue,
				agentID = saveTransactionDocumentRequest.AgentID,
				agentSequence = saveTransactionDocumentRequest.AgentSequence,
				language = saveTransactionDocumentRequest.Language,
				mgiSessionID = saveTransactionDocumentRequest.MgiSessionID,
				timeStamp = saveTransactionDocumentRequest.TimeStamp,
				clientSoftwareVersion = saveTransactionDocumentRequest.ClientSoftwareVersion,
				poeType = saveTransactionDocumentRequest.PoeType,
				channelType = saveTransactionDocumentRequest.ChannelType,
				operatorName = saveTransactionDocumentRequest.OperatorName,
				targetAudience = saveTransactionDocumentRequest.TargetAudience,
				poeCapabilities = saveTransactionDocumentRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveSubagentsRequest ToService(DOMAIN.SaveSubagentsRequest saveSubagentsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SaveSubagentsRequest {
				subagentProfileUpdates = saveSubagentsRequest.SubagentProfileUpdates?.ConvertToService<DOMAIN.SubagentProfileUpdateType, SERVICE.SubagentProfileUpdateType>(agent).ToArray(),
				unitProfileID = saveSubagentsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = saveSubagentsRequest.UnitProfileID.HasValue,
				agentID = saveSubagentsRequest.AgentID,
				agentSequence = saveSubagentsRequest.AgentSequence,
				language = saveSubagentsRequest.Language,
				mgiSessionID = saveSubagentsRequest.MgiSessionID,
				timeStamp = saveSubagentsRequest.TimeStamp,
				clientSoftwareVersion = saveSubagentsRequest.ClientSoftwareVersion,
				poeType = saveSubagentsRequest.PoeType,
				channelType = saveSubagentsRequest.ChannelType,
				operatorName = saveSubagentsRequest.OperatorName,
				targetAudience = saveSubagentsRequest.TargetAudience,
				poeCapabilities = saveSubagentsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveProfileRequest ToService(DOMAIN.SaveProfileRequest saveProfileRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SaveProfileRequest {
				profileItems = saveProfileRequest.ProfileItems?.ConvertToService<DOMAIN.ProfileItemType, SERVICE.ProfileItemType>(agent).ToArray(),
				productProfileItems = saveProfileRequest.ProductProfileItems?.ConvertToService<DOMAIN.ProductProfileItemType, SERVICE.ProductProfileItemType>(agent).ToArray(),
				employeeProfileItems = saveProfileRequest.EmployeeProfileItems?.ConvertToService<DOMAIN.EmployeeProfileItemType, SERVICE.EmployeeProfileItemType>(agent).ToArray(),
				unitProfileID = saveProfileRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = saveProfileRequest.UnitProfileID.HasValue,
				agentID = saveProfileRequest.AgentID,
				agentSequence = saveProfileRequest.AgentSequence,
				language = saveProfileRequest.Language,
				mgiSessionID = saveProfileRequest.MgiSessionID,
				timeStamp = saveProfileRequest.TimeStamp,
				clientSoftwareVersion = saveProfileRequest.ClientSoftwareVersion,
				poeType = saveProfileRequest.PoeType,
				channelType = saveProfileRequest.ChannelType,
				operatorName = saveProfileRequest.OperatorName,
				targetAudience = saveProfileRequest.TargetAudience,
				poeCapabilities = saveProfileRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveDebugDataRequest ToService(DOMAIN.SaveDebugDataRequest saveDebugDataRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SaveDebugDataRequest {
				endOfLog = saveDebugDataRequest.EndOfLog,
				collectionEndTimestamp = saveDebugDataRequest.CollectionEndTimestamp,
				length = saveDebugDataRequest.Length,
				sequenceNumber = saveDebugDataRequest.SequenceNumber,
				debugData = saveDebugDataRequest.DebugData,
				unitProfileID = saveDebugDataRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = saveDebugDataRequest.UnitProfileID.HasValue,
				agentID = saveDebugDataRequest.AgentID,
				agentSequence = saveDebugDataRequest.AgentSequence,
				language = saveDebugDataRequest.Language,
				mgiSessionID = saveDebugDataRequest.MgiSessionID,
				timeStamp = saveDebugDataRequest.TimeStamp,
				clientSoftwareVersion = saveDebugDataRequest.ClientSoftwareVersion,
				poeType = saveDebugDataRequest.PoeType,
				channelType = saveDebugDataRequest.ChannelType,
				operatorName = saveDebugDataRequest.OperatorName,
				targetAudience = saveDebugDataRequest.TargetAudience,
				poeCapabilities = saveDebugDataRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveConsumerProfileDocumentRequest ToService(DOMAIN.SaveConsumerProfileDocumentRequest saveConsumerProfileDocumentRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SaveConsumerProfileDocumentRequest {
				consumerProfileID = saveConsumerProfileDocumentRequest.ConsumerProfileID,
				consumerProfileIDType = saveConsumerProfileDocumentRequest.ConsumerProfileIDType,
				consumerProfileDocument = saveConsumerProfileDocumentRequest.ConsumerProfileDocument != null ? saveConsumerProfileDocumentRequest.ConsumerProfileDocument.ConvertToService<DOMAIN.ConsumerProfileDocumentContentType, SERVICE.ConsumerProfileDocumentContentType>(agent) : null,
				unitProfileID = saveConsumerProfileDocumentRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = saveConsumerProfileDocumentRequest.UnitProfileID.HasValue,
				agentID = saveConsumerProfileDocumentRequest.AgentID,
				agentSequence = saveConsumerProfileDocumentRequest.AgentSequence,
				language = saveConsumerProfileDocumentRequest.Language,
				mgiSessionID = saveConsumerProfileDocumentRequest.MgiSessionID,
				timeStamp = saveConsumerProfileDocumentRequest.TimeStamp,
				clientSoftwareVersion = saveConsumerProfileDocumentRequest.ClientSoftwareVersion,
				poeType = saveConsumerProfileDocumentRequest.PoeType,
				channelType = saveConsumerProfileDocumentRequest.ChannelType,
				operatorName = saveConsumerProfileDocumentRequest.OperatorName,
				targetAudience = saveConsumerProfileDocumentRequest.TargetAudience,
				poeCapabilities = saveConsumerProfileDocumentRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SavePersonalIDImageRequest ToService(DOMAIN.SavePersonalIDImageRequest savePersonalIDImageRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SavePersonalIDImageRequest {
				consumerProfileID = savePersonalIDImageRequest.ConsumerProfileID,
				consumerProfileIDType = savePersonalIDImageRequest.ConsumerProfileIDType,
				personalIDImage = savePersonalIDImageRequest.PersonalIDImage != null ? savePersonalIDImageRequest.PersonalIDImage.ConvertToService<DOMAIN.PersonalIDImageContentType, SERVICE.PersonalIDImageContentType>(agent) : null,
				unitProfileID = savePersonalIDImageRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = savePersonalIDImageRequest.UnitProfileID.HasValue,
				agentID = savePersonalIDImageRequest.AgentID,
				agentSequence = savePersonalIDImageRequest.AgentSequence,
				language = savePersonalIDImageRequest.Language,
				mgiSessionID = savePersonalIDImageRequest.MgiSessionID,
				timeStamp = savePersonalIDImageRequest.TimeStamp,
				clientSoftwareVersion = savePersonalIDImageRequest.ClientSoftwareVersion,
				poeType = savePersonalIDImageRequest.PoeType,
				channelType = savePersonalIDImageRequest.ChannelType,
				operatorName = savePersonalIDImageRequest.OperatorName,
				targetAudience = savePersonalIDImageRequest.TargetAudience,
				poeCapabilities = savePersonalIDImageRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.SaveConsumerProfileImageRequest ToService(DOMAIN.SaveConsumerProfileImageRequest saveConsumerProfileImageRequest, Agent agent)
		{
			var serviceModel = new SERVICE.SaveConsumerProfileImageRequest {
				GAFVersionNumber = saveConsumerProfileImageRequest.GAFVersionNumber,
				consumerProfileID = saveConsumerProfileImageRequest.ConsumerProfileID,
				consumerProfileIDType = saveConsumerProfileImageRequest.ConsumerProfileIDType,
				ConsumerProfileImage = saveConsumerProfileImageRequest.ConsumerProfileImage != null ? saveConsumerProfileImageRequest.ConsumerProfileImage.ConvertToService<DOMAIN.ConsumerProfileImageContentType, SERVICE.ConsumerProfileImageContentType>(agent) : null,
				fieldValues = saveConsumerProfileImageRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				unitProfileID = saveConsumerProfileImageRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = saveConsumerProfileImageRequest.UnitProfileID.HasValue,
				agentID = saveConsumerProfileImageRequest.AgentID,
				agentSequence = saveConsumerProfileImageRequest.AgentSequence,
				language = saveConsumerProfileImageRequest.Language,
				mgiSessionID = saveConsumerProfileImageRequest.MgiSessionID,
				timeStamp = saveConsumerProfileImageRequest.TimeStamp,
				clientSoftwareVersion = saveConsumerProfileImageRequest.ClientSoftwareVersion,
				poeType = saveConsumerProfileImageRequest.PoeType,
				channelType = saveConsumerProfileImageRequest.ChannelType,
				operatorName = saveConsumerProfileImageRequest.OperatorName,
				targetAudience = saveConsumerProfileImageRequest.TargetAudience,
				poeCapabilities = saveConsumerProfileImageRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.RegisterHardTokenRequest ToService(DOMAIN.RegisterHardTokenRequest registerHardTokenRequest, Agent agent)
		{
			var serviceModel = new SERVICE.RegisterHardTokenRequest {
				ldapUserId = registerHardTokenRequest.LdapUserId,
				hardToken = registerHardTokenRequest.HardToken,
				unitProfileID = registerHardTokenRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = registerHardTokenRequest.UnitProfileID.HasValue,
				agentID = registerHardTokenRequest.AgentID,
				agentSequence = registerHardTokenRequest.AgentSequence,
				language = registerHardTokenRequest.Language,
				mgiSessionID = registerHardTokenRequest.MgiSessionID,
				timeStamp = registerHardTokenRequest.TimeStamp,
				clientSoftwareVersion = registerHardTokenRequest.ClientSoftwareVersion,
				poeType = registerHardTokenRequest.PoeType,
				channelType = registerHardTokenRequest.ChannelType,
				operatorName = registerHardTokenRequest.OperatorName,
				targetAudience = registerHardTokenRequest.TargetAudience,
				poeCapabilities = registerHardTokenRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiveValidationRequest ToService(DOMAIN.ReceiveValidationRequest receiveValidationRequest, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiveValidationRequest {
				GAFVersionNumber = receiveValidationRequest.GAFVersionNumber,
				transactionStaging = receiveValidationRequest.TransactionStaging,
				receiveCurrency = receiveValidationRequest.ReceiveCurrency,
				receiveAmount = receiveValidationRequest.ReceiveAmount,
				fieldValues = receiveValidationRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				verifiedFields = receiveValidationRequest.VerifiedFields?.ToArray(),
				primaryReceiptLanguage = receiveValidationRequest.PrimaryReceiptLanguage,
				secondaryReceiptLanguage = receiveValidationRequest.SecondaryReceiptLanguage,
				receiptImages = receiveValidationRequest.ReceiptImages?.ConvertToService<DOMAIN.ReceiptImageContentType, SERVICE.ReceiptImageContentType>(agent).ToArray(),
				unitProfileID = receiveValidationRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = receiveValidationRequest.UnitProfileID.HasValue,
				agentID = receiveValidationRequest.AgentID,
				agentSequence = receiveValidationRequest.AgentSequence,
				language = receiveValidationRequest.Language,
				mgiSessionID = receiveValidationRequest.MgiSessionID,
				timeStamp = receiveValidationRequest.TimeStamp,
				clientSoftwareVersion = receiveValidationRequest.ClientSoftwareVersion,
				poeType = receiveValidationRequest.PoeType,
				channelType = receiveValidationRequest.ChannelType,
				operatorName = receiveValidationRequest.OperatorName,
				targetAudience = receiveValidationRequest.TargetAudience,
				poeCapabilities = receiveValidationRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiveReversalValidationRequest ToService(DOMAIN.ReceiveReversalValidationRequest receiveReversalValidationRequest, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiveReversalValidationRequest {
				GAFVersionNumber = receiveReversalValidationRequest.GAFVersionNumber,
				receiveAmount = receiveReversalValidationRequest.ReceiveAmount,
				receiveCurrency = receiveReversalValidationRequest.ReceiveCurrency,
				fieldValues = receiveReversalValidationRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				verifiedFields = receiveReversalValidationRequest.VerifiedFields?.ToArray(),
				primaryReceiptLanguage = receiveReversalValidationRequest.PrimaryReceiptLanguage,
				secondaryReceiptLanguage = receiveReversalValidationRequest.SecondaryReceiptLanguage,
				receiptImages = receiveReversalValidationRequest.ReceiptImages?.ConvertToService<DOMAIN.ReceiptImageContentType, SERVICE.ReceiptImageContentType>(agent).ToArray(),
				unitProfileID = receiveReversalValidationRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = receiveReversalValidationRequest.UnitProfileID.HasValue,
				agentID = receiveReversalValidationRequest.AgentID,
				agentSequence = receiveReversalValidationRequest.AgentSequence,
				language = receiveReversalValidationRequest.Language,
				mgiSessionID = receiveReversalValidationRequest.MgiSessionID,
				timeStamp = receiveReversalValidationRequest.TimeStamp,
				clientSoftwareVersion = receiveReversalValidationRequest.ClientSoftwareVersion,
				poeType = receiveReversalValidationRequest.PoeType,
				channelType = receiveReversalValidationRequest.ChannelType,
				operatorName = receiveReversalValidationRequest.OperatorName,
				targetAudience = receiveReversalValidationRequest.TargetAudience,
				poeCapabilities = receiveReversalValidationRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ReceiptsFormatDetailsRequest ToService(DOMAIN.ReceiptsFormatDetailsRequest receiptsFormatDetailsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.ReceiptsFormatDetailsRequest {
				paperFormat = receiptsFormatDetailsRequest.PaperFormat,
				mimeType = receiptsFormatDetailsRequest.MimeType,
				downloadAsAttachment = receiptsFormatDetailsRequest.DownloadAsAttachment ?? default(bool),
				downloadAsAttachmentSpecified = receiptsFormatDetailsRequest.DownloadAsAttachment.HasValue,
				languages = receiptsFormatDetailsRequest.Languages?.ToArray(),
				dcaTokenValues = receiptsFormatDetailsRequest.DcaTokenValues?.ConvertToService<DOMAIN.DCATokenType, SERVICE.DCATokenType>(agent).ToArray(),
				receiptTypeValues = receiptsFormatDetailsRequest.ReceiptTypeValues?.ConvertToService<DOMAIN.ReceiptType, SERVICE.ReceiptType>(agent).ToArray(),
				unitProfileID = receiptsFormatDetailsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = receiptsFormatDetailsRequest.UnitProfileID.HasValue,
				agentID = receiptsFormatDetailsRequest.AgentID,
				agentSequence = receiptsFormatDetailsRequest.AgentSequence,
				language = receiptsFormatDetailsRequest.Language,
				mgiSessionID = receiptsFormatDetailsRequest.MgiSessionID,
				timeStamp = receiptsFormatDetailsRequest.TimeStamp,
				clientSoftwareVersion = receiptsFormatDetailsRequest.ClientSoftwareVersion,
				poeType = receiptsFormatDetailsRequest.PoeType,
				channelType = receiptsFormatDetailsRequest.ChannelType,
				operatorName = receiptsFormatDetailsRequest.OperatorName,
				targetAudience = receiptsFormatDetailsRequest.TargetAudience,
				poeCapabilities = receiptsFormatDetailsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.PromotionLookupByCodeRequest ToService(DOMAIN.PromotionLookupByCodeRequest promotionLookupByCodeRequest, Agent agent)
		{
			var serviceModel = new SERVICE.PromotionLookupByCodeRequest {
				promotionCode = promotionLookupByCodeRequest.PromotionCode,
				unitProfileID = promotionLookupByCodeRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = promotionLookupByCodeRequest.UnitProfileID.HasValue,
				agentID = promotionLookupByCodeRequest.AgentID,
				agentSequence = promotionLookupByCodeRequest.AgentSequence,
				language = promotionLookupByCodeRequest.Language,
				mgiSessionID = promotionLookupByCodeRequest.MgiSessionID,
				timeStamp = promotionLookupByCodeRequest.TimeStamp,
				clientSoftwareVersion = promotionLookupByCodeRequest.ClientSoftwareVersion,
				poeType = promotionLookupByCodeRequest.PoeType,
				channelType = promotionLookupByCodeRequest.ChannelType,
				operatorName = promotionLookupByCodeRequest.OperatorName,
				targetAudience = promotionLookupByCodeRequest.TargetAudience,
				poeCapabilities = promotionLookupByCodeRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ProfileRequest ToService(DOMAIN.ProfileRequest profileRequest, Agent agent)
		{
			var serviceModel = new SERVICE.ProfileRequest {
				unitProfileID = profileRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = profileRequest.UnitProfileID.HasValue,
				agentID = profileRequest.AgentID,
				agentSequence = profileRequest.AgentSequence,
				language = profileRequest.Language,
				mgiSessionID = profileRequest.MgiSessionID,
				timeStamp = profileRequest.TimeStamp,
				clientSoftwareVersion = profileRequest.ClientSoftwareVersion,
				poeType = profileRequest.PoeType,
				channelType = profileRequest.ChannelType,
				operatorName = profileRequest.OperatorName,
				targetAudience = profileRequest.TargetAudience,
				poeCapabilities = profileRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ProfileChangeRequest ToService(DOMAIN.ProfileChangeRequest profileChangeRequest, Agent agent)
		{
			var serviceModel = new SERVICE.ProfileChangeRequest {
				profile = profileChangeRequest.Profile,
				unitProfileID = profileChangeRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = profileChangeRequest.UnitProfileID.HasValue,
				agentID = profileChangeRequest.AgentID,
				agentSequence = profileChangeRequest.AgentSequence,
				language = profileChangeRequest.Language,
				mgiSessionID = profileChangeRequest.MgiSessionID,
				timeStamp = profileChangeRequest.TimeStamp,
				clientSoftwareVersion = profileChangeRequest.ClientSoftwareVersion,
				poeType = profileChangeRequest.PoeType,
				channelType = profileChangeRequest.ChannelType,
				operatorName = profileChangeRequest.OperatorName,
				targetAudience = profileChangeRequest.TargetAudience,
				poeCapabilities = profileChangeRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.OpenOTPLoginRequest ToService(DOMAIN.OpenOTPLoginRequest openOTPLoginRequest, Agent agent)
		{
			var serviceModel = new SERVICE.OpenOTPLoginRequest {
				ldapUserId = openOTPLoginRequest.LdapUserId,
				password = openOTPLoginRequest.Password,
				unitProfileID = openOTPLoginRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = openOTPLoginRequest.UnitProfileID.HasValue,
				agentID = openOTPLoginRequest.AgentID,
				agentSequence = openOTPLoginRequest.AgentSequence,
				language = openOTPLoginRequest.Language,
				mgiSessionID = openOTPLoginRequest.MgiSessionID,
				timeStamp = openOTPLoginRequest.TimeStamp,
				clientSoftwareVersion = openOTPLoginRequest.ClientSoftwareVersion,
				poeType = openOTPLoginRequest.PoeType,
				channelType = openOTPLoginRequest.ChannelType,
				operatorName = openOTPLoginRequest.OperatorName,
				targetAudience = openOTPLoginRequest.TargetAudience,
				poeCapabilities = openOTPLoginRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyOrderTotalRequest ToService(DOMAIN.MoneyOrderTotalRequest moneyOrderTotalRequest, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyOrderTotalRequest {
				batchID = moneyOrderTotalRequest.BatchID,
				batchCount = moneyOrderTotalRequest.BatchCount,
				batchTotal = moneyOrderTotalRequest.BatchTotal ?? default(decimal),
				batchTotalSpecified = moneyOrderTotalRequest.BatchTotal.HasValue,
				moAccountNumber = moneyOrderTotalRequest.MoAccountNumber,
				unitProfileID = moneyOrderTotalRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = moneyOrderTotalRequest.UnitProfileID.HasValue,
				agentID = moneyOrderTotalRequest.AgentID,
				agentSequence = moneyOrderTotalRequest.AgentSequence,
				language = moneyOrderTotalRequest.Language,
				mgiSessionID = moneyOrderTotalRequest.MgiSessionID,
				timeStamp = moneyOrderTotalRequest.TimeStamp,
				clientSoftwareVersion = moneyOrderTotalRequest.ClientSoftwareVersion,
				poeType = moneyOrderTotalRequest.PoeType,
				channelType = moneyOrderTotalRequest.ChannelType,
				operatorName = moneyOrderTotalRequest.OperatorName,
				targetAudience = moneyOrderTotalRequest.TargetAudience,
				poeCapabilities = moneyOrderTotalRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendSummaryReportRequest ToService(DOMAIN.MoneyGramSendSummaryReportRequest moneyGramSendSummaryReportRequest, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendSummaryReportRequest {
				activityDate = moneyGramSendSummaryReportRequest.ActivityDate,
				unitProfileID = moneyGramSendSummaryReportRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = moneyGramSendSummaryReportRequest.UnitProfileID.HasValue,
				agentID = moneyGramSendSummaryReportRequest.AgentID,
				agentSequence = moneyGramSendSummaryReportRequest.AgentSequence,
				language = moneyGramSendSummaryReportRequest.Language,
				mgiSessionID = moneyGramSendSummaryReportRequest.MgiSessionID,
				timeStamp = moneyGramSendSummaryReportRequest.TimeStamp,
				clientSoftwareVersion = moneyGramSendSummaryReportRequest.ClientSoftwareVersion,
				poeType = moneyGramSendSummaryReportRequest.PoeType,
				channelType = moneyGramSendSummaryReportRequest.ChannelType,
				operatorName = moneyGramSendSummaryReportRequest.OperatorName,
				targetAudience = moneyGramSendSummaryReportRequest.TargetAudience,
				poeCapabilities = moneyGramSendSummaryReportRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendDetailReportWithTaxRequest ToService(DOMAIN.MoneyGramSendDetailReportWithTaxRequest moneyGramSendDetailReportWithTaxRequest, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendDetailReportWithTaxRequest {
				activityDate = moneyGramSendDetailReportWithTaxRequest.ActivityDate,
				unitProfileID = moneyGramSendDetailReportWithTaxRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = moneyGramSendDetailReportWithTaxRequest.UnitProfileID.HasValue,
				agentID = moneyGramSendDetailReportWithTaxRequest.AgentID,
				agentSequence = moneyGramSendDetailReportWithTaxRequest.AgentSequence,
				language = moneyGramSendDetailReportWithTaxRequest.Language,
				mgiSessionID = moneyGramSendDetailReportWithTaxRequest.MgiSessionID,
				timeStamp = moneyGramSendDetailReportWithTaxRequest.TimeStamp,
				clientSoftwareVersion = moneyGramSendDetailReportWithTaxRequest.ClientSoftwareVersion,
				poeType = moneyGramSendDetailReportWithTaxRequest.PoeType,
				channelType = moneyGramSendDetailReportWithTaxRequest.ChannelType,
				operatorName = moneyGramSendDetailReportWithTaxRequest.OperatorName,
				targetAudience = moneyGramSendDetailReportWithTaxRequest.TargetAudience,
				poeCapabilities = moneyGramSendDetailReportWithTaxRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramSendDetailReportRequest ToService(DOMAIN.MoneyGramSendDetailReportRequest moneyGramSendDetailReportRequest, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramSendDetailReportRequest {
				activityDate = moneyGramSendDetailReportRequest.ActivityDate,
				unitProfileID = moneyGramSendDetailReportRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = moneyGramSendDetailReportRequest.UnitProfileID.HasValue,
				agentID = moneyGramSendDetailReportRequest.AgentID,
				agentSequence = moneyGramSendDetailReportRequest.AgentSequence,
				language = moneyGramSendDetailReportRequest.Language,
				mgiSessionID = moneyGramSendDetailReportRequest.MgiSessionID,
				timeStamp = moneyGramSendDetailReportRequest.TimeStamp,
				clientSoftwareVersion = moneyGramSendDetailReportRequest.ClientSoftwareVersion,
				poeType = moneyGramSendDetailReportRequest.PoeType,
				channelType = moneyGramSendDetailReportRequest.ChannelType,
				operatorName = moneyGramSendDetailReportRequest.OperatorName,
				targetAudience = moneyGramSendDetailReportRequest.TargetAudience,
				poeCapabilities = moneyGramSendDetailReportRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramReceiveSummaryReportRequest ToService(DOMAIN.MoneyGramReceiveSummaryReportRequest moneyGramReceiveSummaryReportRequest, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramReceiveSummaryReportRequest {
				activityDate = moneyGramReceiveSummaryReportRequest.ActivityDate,
				unitProfileID = moneyGramReceiveSummaryReportRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = moneyGramReceiveSummaryReportRequest.UnitProfileID.HasValue,
				agentID = moneyGramReceiveSummaryReportRequest.AgentID,
				agentSequence = moneyGramReceiveSummaryReportRequest.AgentSequence,
				language = moneyGramReceiveSummaryReportRequest.Language,
				mgiSessionID = moneyGramReceiveSummaryReportRequest.MgiSessionID,
				timeStamp = moneyGramReceiveSummaryReportRequest.TimeStamp,
				clientSoftwareVersion = moneyGramReceiveSummaryReportRequest.ClientSoftwareVersion,
				poeType = moneyGramReceiveSummaryReportRequest.PoeType,
				channelType = moneyGramReceiveSummaryReportRequest.ChannelType,
				operatorName = moneyGramReceiveSummaryReportRequest.OperatorName,
				targetAudience = moneyGramReceiveSummaryReportRequest.TargetAudience,
				poeCapabilities = moneyGramReceiveSummaryReportRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.MoneyGramReceiveDetailReportRequest ToService(DOMAIN.MoneyGramReceiveDetailReportRequest moneyGramReceiveDetailReportRequest, Agent agent)
		{
			var serviceModel = new SERVICE.MoneyGramReceiveDetailReportRequest {
				activityDate = moneyGramReceiveDetailReportRequest.ActivityDate,
				unitProfileID = moneyGramReceiveDetailReportRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = moneyGramReceiveDetailReportRequest.UnitProfileID.HasValue,
				agentID = moneyGramReceiveDetailReportRequest.AgentID,
				agentSequence = moneyGramReceiveDetailReportRequest.AgentSequence,
				language = moneyGramReceiveDetailReportRequest.Language,
				mgiSessionID = moneyGramReceiveDetailReportRequest.MgiSessionID,
				timeStamp = moneyGramReceiveDetailReportRequest.TimeStamp,
				clientSoftwareVersion = moneyGramReceiveDetailReportRequest.ClientSoftwareVersion,
				poeType = moneyGramReceiveDetailReportRequest.PoeType,
				channelType = moneyGramReceiveDetailReportRequest.ChannelType,
				operatorName = moneyGramReceiveDetailReportRequest.OperatorName,
				targetAudience = moneyGramReceiveDetailReportRequest.TargetAudience,
				poeCapabilities = moneyGramReceiveDetailReportRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.InjectedInstructionRequest ToService(DOMAIN.InjectedInstructionRequest injectedInstructionRequest, Agent agent)
		{
			var serviceModel = new SERVICE.InjectedInstructionRequest {
				previousPOETransactionID = injectedInstructionRequest.PreviousPOETransactionID,
				additionalTransactionInfo = injectedInstructionRequest.AdditionalTransactionInfo,
				unitProfileID = injectedInstructionRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = injectedInstructionRequest.UnitProfileID.HasValue,
				agentID = injectedInstructionRequest.AgentID,
				agentSequence = injectedInstructionRequest.AgentSequence,
				language = injectedInstructionRequest.Language,
				mgiSessionID = injectedInstructionRequest.MgiSessionID,
				timeStamp = injectedInstructionRequest.TimeStamp,
				clientSoftwareVersion = injectedInstructionRequest.ClientSoftwareVersion,
				poeType = injectedInstructionRequest.PoeType,
				channelType = injectedInstructionRequest.ChannelType,
				operatorName = injectedInstructionRequest.OperatorName,
				targetAudience = injectedInstructionRequest.TargetAudience,
				poeCapabilities = injectedInstructionRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.InitialSetupRequest ToService(DOMAIN.InitialSetupRequest initialSetupRequest, Agent agent)
		{
			var serviceModel = new SERVICE.InitialSetupRequest {
				password = initialSetupRequest.Password,
				timeZoneName = initialSetupRequest.TimeZoneName,
				unitProfileID = initialSetupRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = initialSetupRequest.UnitProfileID.HasValue,
				agentID = initialSetupRequest.AgentID,
				agentSequence = initialSetupRequest.AgentSequence,
				language = initialSetupRequest.Language,
				mgiSessionID = initialSetupRequest.MgiSessionID,
				timeStamp = initialSetupRequest.TimeStamp,
				clientSoftwareVersion = initialSetupRequest.ClientSoftwareVersion,
				poeType = initialSetupRequest.PoeType,
				channelType = initialSetupRequest.ChannelType,
				operatorName = initialSetupRequest.OperatorName,
				targetAudience = initialSetupRequest.TargetAudience,
				poeCapabilities = initialSetupRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DwInitialSetupRequest ToService(DOMAIN.DwInitialSetupRequest dwInitialSetupRequest, Agent agent)
		{
			var serviceModel = new SERVICE.DwInitialSetupRequest {
				deviceID = dwInitialSetupRequest.DeviceID,
				serviceTagNumber = dwInitialSetupRequest.ServiceTagNumber,
				password = dwInitialSetupRequest.Password,
				timeZoneName = dwInitialSetupRequest.TimeZoneName,
				unitProfileID = dwInitialSetupRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = dwInitialSetupRequest.UnitProfileID.HasValue,
				agentID = dwInitialSetupRequest.AgentID,
				agentSequence = dwInitialSetupRequest.AgentSequence,
				language = dwInitialSetupRequest.Language,
				mgiSessionID = dwInitialSetupRequest.MgiSessionID,
				timeStamp = dwInitialSetupRequest.TimeStamp,
				clientSoftwareVersion = dwInitialSetupRequest.ClientSoftwareVersion,
				poeType = dwInitialSetupRequest.PoeType,
				channelType = dwInitialSetupRequest.ChannelType,
				operatorName = dwInitialSetupRequest.OperatorName,
				targetAudience = dwInitialSetupRequest.TargetAudience,
				poeCapabilities = dwInitialSetupRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.IndustryRequest ToService(DOMAIN.IndustryRequest industryRequest, Agent agent)
		{
			var serviceModel = new SERVICE.IndustryRequest {
				unitProfileID = industryRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = industryRequest.UnitProfileID.HasValue,
				agentID = industryRequest.AgentID,
				agentSequence = industryRequest.AgentSequence,
				language = industryRequest.Language,
				mgiSessionID = industryRequest.MgiSessionID,
				timeStamp = industryRequest.TimeStamp,
				clientSoftwareVersion = industryRequest.ClientSoftwareVersion,
				poeType = industryRequest.PoeType,
				channelType = industryRequest.ChannelType,
				operatorName = industryRequest.OperatorName,
				targetAudience = industryRequest.TargetAudience,
				poeCapabilities = industryRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetUCPByConsumerAttributesRequest ToService(DOMAIN.GetUCPByConsumerAttributesRequest getUCPByConsumerAttributesRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetUCPByConsumerAttributesRequest {
				functionName = getUCPByConsumerAttributesRequest.FunctionName,
				repeatRequest = getUCPByConsumerAttributesRequest.RepeatRequest,
				plusEnrollmentFlag = getUCPByConsumerAttributesRequest.PlusEnrollmentFlag,
				responseFilter = getUCPByConsumerAttributesRequest.ResponseFilter,
				consumerProfile = getUCPByConsumerAttributesRequest.ConsumerProfile != null ? getUCPByConsumerAttributesRequest.ConsumerProfile.ConvertToService<DOMAIN.UCPRequestProfileType, SERVICE.UCPRequestProfileType>(agent) : null,
				id = getUCPByConsumerAttributesRequest.Id,
				type = getUCPByConsumerAttributesRequest.Type,
				unitProfileID = getUCPByConsumerAttributesRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getUCPByConsumerAttributesRequest.UnitProfileID.HasValue,
				agentID = getUCPByConsumerAttributesRequest.AgentID,
				agentSequence = getUCPByConsumerAttributesRequest.AgentSequence,
				language = getUCPByConsumerAttributesRequest.Language,
				mgiSessionID = getUCPByConsumerAttributesRequest.MgiSessionID,
				timeStamp = getUCPByConsumerAttributesRequest.TimeStamp,
				clientSoftwareVersion = getUCPByConsumerAttributesRequest.ClientSoftwareVersion,
				poeType = getUCPByConsumerAttributesRequest.PoeType,
				channelType = getUCPByConsumerAttributesRequest.ChannelType,
				operatorName = getUCPByConsumerAttributesRequest.OperatorName,
				targetAudience = getUCPByConsumerAttributesRequest.TargetAudience,
				poeCapabilities = getUCPByConsumerAttributesRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetServiceOptionsRequest ToService(DOMAIN.GetServiceOptionsRequest getServiceOptionsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetServiceOptionsRequest {
				agentAllowedOnly = getServiceOptionsRequest.AgentAllowedOnly,
				destinationCountry = getServiceOptionsRequest.DestinationCountry,
				unitProfileID = getServiceOptionsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getServiceOptionsRequest.UnitProfileID.HasValue,
				agentID = getServiceOptionsRequest.AgentID,
				agentSequence = getServiceOptionsRequest.AgentSequence,
				language = getServiceOptionsRequest.Language,
				mgiSessionID = getServiceOptionsRequest.MgiSessionID,
				timeStamp = getServiceOptionsRequest.TimeStamp,
				clientSoftwareVersion = getServiceOptionsRequest.ClientSoftwareVersion,
				poeType = getServiceOptionsRequest.PoeType,
				channelType = getServiceOptionsRequest.ChannelType,
				operatorName = getServiceOptionsRequest.OperatorName,
				targetAudience = getServiceOptionsRequest.TargetAudience,
				poeCapabilities = getServiceOptionsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetReceiptForReprintRequest ToService(DOMAIN.GetReceiptForReprintRequest getReceiptForReprintRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetReceiptForReprintRequest {
				referenceNumber = getReceiptForReprintRequest.ReferenceNumber,
				receiptType = getReceiptForReprintRequest.ReceiptType,
				unitProfileID = getReceiptForReprintRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getReceiptForReprintRequest.UnitProfileID.HasValue,
				agentID = getReceiptForReprintRequest.AgentID,
				agentSequence = getReceiptForReprintRequest.AgentSequence,
				language = getReceiptForReprintRequest.Language,
				mgiSessionID = getReceiptForReprintRequest.MgiSessionID,
				timeStamp = getReceiptForReprintRequest.TimeStamp,
				clientSoftwareVersion = getReceiptForReprintRequest.ClientSoftwareVersion,
				poeType = getReceiptForReprintRequest.PoeType,
				channelType = getReceiptForReprintRequest.ChannelType,
				operatorName = getReceiptForReprintRequest.OperatorName,
				targetAudience = getReceiptForReprintRequest.TargetAudience,
				poeCapabilities = getReceiptForReprintRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetProfileSenderRequest ToService(DOMAIN.GetProfileSenderRequest getProfileSenderRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetProfileSenderRequest {
				GAFVersionNumber = getProfileSenderRequest.GAFVersionNumber,
				consumerProfileID = getProfileSenderRequest.ConsumerProfileID,
				consumerProfileIDType = getProfileSenderRequest.ConsumerProfileIDType,
				maxReceiversToReturn = getProfileSenderRequest.MaxReceiversToReturn,
				maxBillersToReturn = getProfileSenderRequest.MaxBillersToReturn,
				unitProfileID = getProfileSenderRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getProfileSenderRequest.UnitProfileID.HasValue,
				agentID = getProfileSenderRequest.AgentID,
				agentSequence = getProfileSenderRequest.AgentSequence,
				language = getProfileSenderRequest.Language,
				mgiSessionID = getProfileSenderRequest.MgiSessionID,
				timeStamp = getProfileSenderRequest.TimeStamp,
				clientSoftwareVersion = getProfileSenderRequest.ClientSoftwareVersion,
				poeType = getProfileSenderRequest.PoeType,
				channelType = getProfileSenderRequest.ChannelType,
				operatorName = getProfileSenderRequest.OperatorName,
				targetAudience = getProfileSenderRequest.TargetAudience,
				poeCapabilities = getProfileSenderRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetProfileReceiverRequest ToService(DOMAIN.GetProfileReceiverRequest getProfileReceiverRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetProfileReceiverRequest {
				GAFVersionNumber = getProfileReceiverRequest.GAFVersionNumber,
				consumerProfileID = getProfileReceiverRequest.ConsumerProfileID,
				consumerProfileIDType = getProfileReceiverRequest.ConsumerProfileIDType,
				unitProfileID = getProfileReceiverRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getProfileReceiverRequest.UnitProfileID.HasValue,
				agentID = getProfileReceiverRequest.AgentID,
				agentSequence = getProfileReceiverRequest.AgentSequence,
				language = getProfileReceiverRequest.Language,
				mgiSessionID = getProfileReceiverRequest.MgiSessionID,
				timeStamp = getProfileReceiverRequest.TimeStamp,
				clientSoftwareVersion = getProfileReceiverRequest.ClientSoftwareVersion,
				poeType = getProfileReceiverRequest.PoeType,
				channelType = getProfileReceiverRequest.ChannelType,
				operatorName = getProfileReceiverRequest.OperatorName,
				targetAudience = getProfileReceiverRequest.TargetAudience,
				poeCapabilities = getProfileReceiverRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetProfileConsumerRequest ToService(DOMAIN.GetProfileConsumerRequest getProfileConsumerRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetProfileConsumerRequest {
				GAFVersionNumber = getProfileConsumerRequest.GAFVersionNumber,
				consumerProfileID = getProfileConsumerRequest.ConsumerProfileID,
				consumerProfileIDType = getProfileConsumerRequest.ConsumerProfileIDType,
				unitProfileID = getProfileConsumerRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getProfileConsumerRequest.UnitProfileID.HasValue,
				agentID = getProfileConsumerRequest.AgentID,
				agentSequence = getProfileConsumerRequest.AgentSequence,
				language = getProfileConsumerRequest.Language,
				mgiSessionID = getProfileConsumerRequest.MgiSessionID,
				timeStamp = getProfileConsumerRequest.TimeStamp,
				clientSoftwareVersion = getProfileConsumerRequest.ClientSoftwareVersion,
				poeType = getProfileConsumerRequest.PoeType,
				channelType = getProfileConsumerRequest.ChannelType,
				operatorName = getProfileConsumerRequest.OperatorName,
				targetAudience = getProfileConsumerRequest.TargetAudience,
				poeCapabilities = getProfileConsumerRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetConsumerProfileDocumentRequest ToService(DOMAIN.GetConsumerProfileDocumentRequest getConsumerProfileDocumentRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetConsumerProfileDocumentRequest {
				consumerProfileID = getConsumerProfileDocumentRequest.ConsumerProfileID,
				consumerProfileIDType = getConsumerProfileDocumentRequest.ConsumerProfileIDType,
				unitProfileID = getConsumerProfileDocumentRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getConsumerProfileDocumentRequest.UnitProfileID.HasValue,
				agentID = getConsumerProfileDocumentRequest.AgentID,
				agentSequence = getConsumerProfileDocumentRequest.AgentSequence,
				language = getConsumerProfileDocumentRequest.Language,
				mgiSessionID = getConsumerProfileDocumentRequest.MgiSessionID,
				timeStamp = getConsumerProfileDocumentRequest.TimeStamp,
				clientSoftwareVersion = getConsumerProfileDocumentRequest.ClientSoftwareVersion,
				poeType = getConsumerProfileDocumentRequest.PoeType,
				channelType = getConsumerProfileDocumentRequest.ChannelType,
				operatorName = getConsumerProfileDocumentRequest.OperatorName,
				targetAudience = getConsumerProfileDocumentRequest.TargetAudience,
				poeCapabilities = getConsumerProfileDocumentRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetPersonalIDImageRequest ToService(DOMAIN.GetPersonalIDImageRequest getPersonalIDImageRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetPersonalIDImageRequest {
				consumerProfileID = getPersonalIDImageRequest.ConsumerProfileID,
				consumerProfileIDType = getPersonalIDImageRequest.ConsumerProfileIDType,
				personalIDChoice = getPersonalIDImageRequest.PersonalIDChoice,
				personalIDVerificationStr = getPersonalIDImageRequest.PersonalIDVerificationStr,
				unitProfileID = getPersonalIDImageRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getPersonalIDImageRequest.UnitProfileID.HasValue,
				agentID = getPersonalIDImageRequest.AgentID,
				agentSequence = getPersonalIDImageRequest.AgentSequence,
				language = getPersonalIDImageRequest.Language,
				mgiSessionID = getPersonalIDImageRequest.MgiSessionID,
				timeStamp = getPersonalIDImageRequest.TimeStamp,
				clientSoftwareVersion = getPersonalIDImageRequest.ClientSoftwareVersion,
				poeType = getPersonalIDImageRequest.PoeType,
				channelType = getPersonalIDImageRequest.ChannelType,
				operatorName = getPersonalIDImageRequest.OperatorName,
				targetAudience = getPersonalIDImageRequest.TargetAudience,
				poeCapabilities = getPersonalIDImageRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetEnumerationsRequest ToService(DOMAIN.GetEnumerationsRequest getEnumerationsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetEnumerationsRequest {
				cachedVersion = getEnumerationsRequest.CachedVersion,
				enumerationName = getEnumerationsRequest.EnumerationName,
				unitProfileID = getEnumerationsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getEnumerationsRequest.UnitProfileID.HasValue,
				agentID = getEnumerationsRequest.AgentID,
				agentSequence = getEnumerationsRequest.AgentSequence,
				language = getEnumerationsRequest.Language,
				mgiSessionID = getEnumerationsRequest.MgiSessionID,
				timeStamp = getEnumerationsRequest.TimeStamp,
				clientSoftwareVersion = getEnumerationsRequest.ClientSoftwareVersion,
				poeType = getEnumerationsRequest.PoeType,
				channelType = getEnumerationsRequest.ChannelType,
				operatorName = getEnumerationsRequest.OperatorName,
				targetAudience = getEnumerationsRequest.TargetAudience,
				poeCapabilities = getEnumerationsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetDepositInformationRequest ToService(DOMAIN.GetDepositInformationRequest getDepositInformationRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetDepositInformationRequest {
				maxDepositsToReturn = getDepositInformationRequest.MaxDepositsToReturn,
				unitProfileID = getDepositInformationRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getDepositInformationRequest.UnitProfileID.HasValue,
				agentID = getDepositInformationRequest.AgentID,
				agentSequence = getDepositInformationRequest.AgentSequence,
				language = getDepositInformationRequest.Language,
				mgiSessionID = getDepositInformationRequest.MgiSessionID,
				timeStamp = getDepositInformationRequest.TimeStamp,
				clientSoftwareVersion = getDepositInformationRequest.ClientSoftwareVersion,
				poeType = getDepositInformationRequest.PoeType,
				channelType = getDepositInformationRequest.ChannelType,
				operatorName = getDepositInformationRequest.OperatorName,
				targetAudience = getDepositInformationRequest.TargetAudience,
				poeCapabilities = getDepositInformationRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetDepositBankListRequest ToService(DOMAIN.GetDepositBankListRequest getDepositBankListRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetDepositBankListRequest {
				countryCode = getDepositBankListRequest.CountryCode,
				unitProfileID = getDepositBankListRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getDepositBankListRequest.UnitProfileID.HasValue,
				agentID = getDepositBankListRequest.AgentID,
				agentSequence = getDepositBankListRequest.AgentSequence,
				language = getDepositBankListRequest.Language,
				mgiSessionID = getDepositBankListRequest.MgiSessionID,
				timeStamp = getDepositBankListRequest.TimeStamp,
				clientSoftwareVersion = getDepositBankListRequest.ClientSoftwareVersion,
				poeType = getDepositBankListRequest.PoeType,
				channelType = getDepositBankListRequest.ChannelType,
				operatorName = getDepositBankListRequest.OperatorName,
				targetAudience = getDepositBankListRequest.TargetAudience,
				poeCapabilities = getDepositBankListRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetDebugDataRequest ToService(DOMAIN.GetDebugDataRequest getDebugDataRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetDebugDataRequest {
				currentDate = getDebugDataRequest.CurrentDate ?? default(DateTime),
				currentDateSpecified = getDebugDataRequest.CurrentDate.HasValue,
				sequenceNumber = getDebugDataRequest.SequenceNumber,
				nextTransmission = getDebugDataRequest.NextTransmission ?? default(bool),
				nextTransmissionSpecified = getDebugDataRequest.NextTransmission.HasValue,
				unitProfileID = getDebugDataRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getDebugDataRequest.UnitProfileID.HasValue,
				agentID = getDebugDataRequest.AgentID,
				agentSequence = getDebugDataRequest.AgentSequence,
				language = getDebugDataRequest.Language,
				mgiSessionID = getDebugDataRequest.MgiSessionID,
				timeStamp = getDebugDataRequest.TimeStamp,
				clientSoftwareVersion = getDebugDataRequest.ClientSoftwareVersion,
				poeType = getDebugDataRequest.PoeType,
				channelType = getDebugDataRequest.ChannelType,
				operatorName = getDebugDataRequest.OperatorName,
				targetAudience = getDebugDataRequest.TargetAudience,
				poeCapabilities = getDebugDataRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetCurrencyInfoRequest ToService(DOMAIN.GetCurrencyInfoRequest getCurrencyInfoRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetCurrencyInfoRequest {
				version = getCurrencyInfoRequest.Version,
				unitProfileID = getCurrencyInfoRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getCurrencyInfoRequest.UnitProfileID.HasValue,
				agentID = getCurrencyInfoRequest.AgentID,
				agentSequence = getCurrencyInfoRequest.AgentSequence,
				language = getCurrencyInfoRequest.Language,
				mgiSessionID = getCurrencyInfoRequest.MgiSessionID,
				timeStamp = getCurrencyInfoRequest.TimeStamp,
				clientSoftwareVersion = getCurrencyInfoRequest.ClientSoftwareVersion,
				poeType = getCurrencyInfoRequest.PoeType,
				channelType = getCurrencyInfoRequest.ChannelType,
				operatorName = getCurrencyInfoRequest.OperatorName,
				targetAudience = getCurrencyInfoRequest.TargetAudience,
				poeCapabilities = getCurrencyInfoRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetCountrySubdivisionRequest ToService(DOMAIN.GetCountrySubdivisionRequest getCountrySubdivisionRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetCountrySubdivisionRequest {
				cachedVersion = getCountrySubdivisionRequest.CachedVersion,
				countryCode = getCountrySubdivisionRequest.CountryCode,
				unitProfileID = getCountrySubdivisionRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getCountrySubdivisionRequest.UnitProfileID.HasValue,
				agentID = getCountrySubdivisionRequest.AgentID,
				agentSequence = getCountrySubdivisionRequest.AgentSequence,
				language = getCountrySubdivisionRequest.Language,
				mgiSessionID = getCountrySubdivisionRequest.MgiSessionID,
				timeStamp = getCountrySubdivisionRequest.TimeStamp,
				clientSoftwareVersion = getCountrySubdivisionRequest.ClientSoftwareVersion,
				poeType = getCountrySubdivisionRequest.PoeType,
				channelType = getCountrySubdivisionRequest.ChannelType,
				operatorName = getCountrySubdivisionRequest.OperatorName,
				targetAudience = getCountrySubdivisionRequest.TargetAudience,
				poeCapabilities = getCountrySubdivisionRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetCountryInfoRequest ToService(DOMAIN.GetCountryInfoRequest getCountryInfoRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetCountryInfoRequest {
				cachedVersion = getCountryInfoRequest.CachedVersion,
				lookupKey = getCountryInfoRequest.LookupKey,
				unitProfileID = getCountryInfoRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getCountryInfoRequest.UnitProfileID.HasValue,
				agentID = getCountryInfoRequest.AgentID,
				agentSequence = getCountryInfoRequest.AgentSequence,
				language = getCountryInfoRequest.Language,
				mgiSessionID = getCountryInfoRequest.MgiSessionID,
				timeStamp = getCountryInfoRequest.TimeStamp,
				clientSoftwareVersion = getCountryInfoRequest.ClientSoftwareVersion,
				poeType = getCountryInfoRequest.PoeType,
				channelType = getCountryInfoRequest.ChannelType,
				operatorName = getCountryInfoRequest.OperatorName,
				targetAudience = getCountryInfoRequest.TargetAudience,
				poeCapabilities = getCountryInfoRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetConsumerProfileTransactionHistoryRequest ToService(DOMAIN.GetConsumerProfileTransactionHistoryRequest getConsumerProfileTransactionHistoryRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetConsumerProfileTransactionHistoryRequest {
				GAFVersionNumber = getConsumerProfileTransactionHistoryRequest.GAFVersionNumber,
				consumerProfileID = getConsumerProfileTransactionHistoryRequest.ConsumerProfileID,
				consumerProfileIDType = getConsumerProfileTransactionHistoryRequest.ConsumerProfileIDType,
				startDate = getConsumerProfileTransactionHistoryRequest.StartDate ?? default(DateTime),
				startDateSpecified = getConsumerProfileTransactionHistoryRequest.StartDate.HasValue,
				endDate = getConsumerProfileTransactionHistoryRequest.EndDate ?? default(DateTime),
				endDateSpecified = getConsumerProfileTransactionHistoryRequest.EndDate.HasValue,
				maxRowsToReturn = getConsumerProfileTransactionHistoryRequest.MaxRowsToReturn,
				sortDateOrder = getConsumerProfileTransactionHistoryRequest.SortDateOrder,
				unitProfileID = getConsumerProfileTransactionHistoryRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getConsumerProfileTransactionHistoryRequest.UnitProfileID.HasValue,
				agentID = getConsumerProfileTransactionHistoryRequest.AgentID,
				agentSequence = getConsumerProfileTransactionHistoryRequest.AgentSequence,
				language = getConsumerProfileTransactionHistoryRequest.Language,
				mgiSessionID = getConsumerProfileTransactionHistoryRequest.MgiSessionID,
				timeStamp = getConsumerProfileTransactionHistoryRequest.TimeStamp,
				clientSoftwareVersion = getConsumerProfileTransactionHistoryRequest.ClientSoftwareVersion,
				poeType = getConsumerProfileTransactionHistoryRequest.PoeType,
				channelType = getConsumerProfileTransactionHistoryRequest.ChannelType,
				operatorName = getConsumerProfileTransactionHistoryRequest.OperatorName,
				targetAudience = getConsumerProfileTransactionHistoryRequest.TargetAudience,
				poeCapabilities = getConsumerProfileTransactionHistoryRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetBroadcastMessagesRequest ToService(DOMAIN.GetBroadcastMessagesRequest getBroadcastMessagesRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetBroadcastMessagesRequest {
				msgLanguageCode = getBroadcastMessagesRequest.MsgLanguageCode,
				offsetGMT = getBroadcastMessagesRequest.OffsetGMT,
				messageInfos = getBroadcastMessagesRequest.MessageInfos?.ConvertToService<DOMAIN.MessageInfo, SERVICE.MessageInfo>(agent).ToArray(),
				customFields = getBroadcastMessagesRequest.CustomFields?.ConvertToService<DOMAIN.CustomFieldsType, SERVICE.CustomFieldsType>(agent).ToArray(),
				unitProfileID = getBroadcastMessagesRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getBroadcastMessagesRequest.UnitProfileID.HasValue,
				agentID = getBroadcastMessagesRequest.AgentID,
				agentSequence = getBroadcastMessagesRequest.AgentSequence,
				language = getBroadcastMessagesRequest.Language,
				mgiSessionID = getBroadcastMessagesRequest.MgiSessionID,
				timeStamp = getBroadcastMessagesRequest.TimeStamp,
				clientSoftwareVersion = getBroadcastMessagesRequest.ClientSoftwareVersion,
				poeType = getBroadcastMessagesRequest.PoeType,
				channelType = getBroadcastMessagesRequest.ChannelType,
				operatorName = getBroadcastMessagesRequest.OperatorName,
				targetAudience = getBroadcastMessagesRequest.TargetAudience,
				poeCapabilities = getBroadcastMessagesRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetBankDetailsRequest ToService(DOMAIN.GetBankDetailsRequest getBankDetailsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetBankDetailsRequest {
				countryCode = getBankDetailsRequest.CountryCode,
				infoKey = getBankDetailsRequest.InfoKey,
				value = getBankDetailsRequest.Value,
				unitProfileID = getBankDetailsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getBankDetailsRequest.UnitProfileID.HasValue,
				agentID = getBankDetailsRequest.AgentID,
				agentSequence = getBankDetailsRequest.AgentSequence,
				language = getBankDetailsRequest.Language,
				mgiSessionID = getBankDetailsRequest.MgiSessionID,
				timeStamp = getBankDetailsRequest.TimeStamp,
				clientSoftwareVersion = getBankDetailsRequest.ClientSoftwareVersion,
				poeType = getBankDetailsRequest.PoeType,
				channelType = getBankDetailsRequest.ChannelType,
				operatorName = getBankDetailsRequest.OperatorName,
				targetAudience = getBankDetailsRequest.TargetAudience,
				poeCapabilities = getBankDetailsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetBankDetailsByLevelRequest ToService(DOMAIN.GetBankDetailsByLevelRequest getBankDetailsByLevelRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetBankDetailsByLevelRequest {
				countryCode = getBankDetailsByLevelRequest.CountryCode,
				hierarchyLevelNumber = getBankDetailsByLevelRequest.HierarchyLevelNumber,
				previousLevelElementNumber = getBankDetailsByLevelRequest.PreviousLevelElementNumber ?? default(int),
				previousLevelElementNumberSpecified = getBankDetailsByLevelRequest.PreviousLevelElementNumber.HasValue,
				unitProfileID = getBankDetailsByLevelRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getBankDetailsByLevelRequest.UnitProfileID.HasValue,
				agentID = getBankDetailsByLevelRequest.AgentID,
				agentSequence = getBankDetailsByLevelRequest.AgentSequence,
				language = getBankDetailsByLevelRequest.Language,
				mgiSessionID = getBankDetailsByLevelRequest.MgiSessionID,
				timeStamp = getBankDetailsByLevelRequest.TimeStamp,
				clientSoftwareVersion = getBankDetailsByLevelRequest.ClientSoftwareVersion,
				poeType = getBankDetailsByLevelRequest.PoeType,
				channelType = getBankDetailsByLevelRequest.ChannelType,
				operatorName = getBankDetailsByLevelRequest.OperatorName,
				targetAudience = getBankDetailsByLevelRequest.TargetAudience,
				poeCapabilities = getBankDetailsByLevelRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetAllFieldsRequest ToService(DOMAIN.GetAllFieldsRequest getAllFieldsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetAllFieldsRequest {
				cachedVersion = getAllFieldsRequest.CachedVersion,
				transactionType = getAllFieldsRequest.TransactionType,
				unitProfileID = getAllFieldsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getAllFieldsRequest.UnitProfileID.HasValue,
				agentID = getAllFieldsRequest.AgentID,
				agentSequence = getAllFieldsRequest.AgentSequence,
				language = getAllFieldsRequest.Language,
				mgiSessionID = getAllFieldsRequest.MgiSessionID,
				timeStamp = getAllFieldsRequest.TimeStamp,
				clientSoftwareVersion = getAllFieldsRequest.ClientSoftwareVersion,
				poeType = getAllFieldsRequest.PoeType,
				channelType = getAllFieldsRequest.ChannelType,
				operatorName = getAllFieldsRequest.OperatorName,
				targetAudience = getAllFieldsRequest.TargetAudience,
				poeCapabilities = getAllFieldsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.GetAllErrorsRequest ToService(DOMAIN.GetAllErrorsRequest getAllErrorsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.GetAllErrorsRequest {
				cachedVersion = getAllErrorsRequest.CachedVersion,
				unitProfileID = getAllErrorsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = getAllErrorsRequest.UnitProfileID.HasValue,
				agentID = getAllErrorsRequest.AgentID,
				agentSequence = getAllErrorsRequest.AgentSequence,
				language = getAllErrorsRequest.Language,
				mgiSessionID = getAllErrorsRequest.MgiSessionID,
				timeStamp = getAllErrorsRequest.TimeStamp,
				clientSoftwareVersion = getAllErrorsRequest.ClientSoftwareVersion,
				poeType = getAllErrorsRequest.PoeType,
				channelType = getAllErrorsRequest.ChannelType,
				operatorName = getAllErrorsRequest.OperatorName,
				targetAudience = getAllErrorsRequest.TargetAudience,
				poeCapabilities = getAllErrorsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FeeLookupRequest ToService(DOMAIN.FeeLookupRequest feeLookupRequest, Agent agent)
		{
			var serviceModel = new SERVICE.FeeLookupRequest {
				mgiSessionType = (SERVICE.SessionType)feeLookupRequest.MgiSessionType,
				productVariant = feeLookupRequest.ProductVariant.HasValue ? (SERVICE.ProductVariantType)feeLookupRequest.ProductVariant : GetDefaultEnumValue<SERVICE.ProductVariantType>(),
				productVariantSpecified = feeLookupRequest.ProductVariant.HasValue,
				Item = feeLookupRequest.Item,
				ItemElementName = (SERVICE.ItemChoiceType1)feeLookupRequest.ItemElementName,
				destinationCountry = feeLookupRequest.DestinationCountry,
				destinationCountrySubdivisionCode = feeLookupRequest.DestinationCountrySubdivisionCode,
				sendCountry = feeLookupRequest.SendCountry,
				serviceOption = feeLookupRequest.ServiceOption,
				mgiRewardsNumber = feeLookupRequest.MgiRewardsNumber,
				receiveCode = feeLookupRequest.ReceiveCode,
				receiveAgentID = feeLookupRequest.ReceiveAgentID,
				receiveCurrency = feeLookupRequest.ReceiveCurrency,
				sendCurrency = feeLookupRequest.SendCurrency,
				mgCustomerReceiveNumber = feeLookupRequest.MgCustomerReceiveNumber,
				defaultInformationalFee = feeLookupRequest.DefaultInformationalFee ?? default(decimal),
				defaultInformationalFeeSpecified = feeLookupRequest.DefaultInformationalFee.HasValue,
				serviceOfferingID = feeLookupRequest.ServiceOfferingID,
				defaultMaxFee = feeLookupRequest.DefaultMaxFee,
				allOptions = feeLookupRequest.AllOptions,
				promoCodes = feeLookupRequest.PromoCodes?.ToArray(),
				unitProfileID = feeLookupRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = feeLookupRequest.UnitProfileID.HasValue,
				agentID = feeLookupRequest.AgentID,
				agentSequence = feeLookupRequest.AgentSequence,
				language = feeLookupRequest.Language,
				mgiSessionID = feeLookupRequest.MgiSessionID,
				timeStamp = feeLookupRequest.TimeStamp,
				clientSoftwareVersion = feeLookupRequest.ClientSoftwareVersion,
				poeType = feeLookupRequest.PoeType,
				channelType = feeLookupRequest.ChannelType,
				operatorName = feeLookupRequest.OperatorName,
				targetAudience = feeLookupRequest.TargetAudience,
				poeCapabilities = feeLookupRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.FeeLookupBySendCountryRequest ToService(DOMAIN.FeeLookupBySendCountryRequest feeLookupBySendCountryRequest, Agent agent)
		{
			var serviceModel = new SERVICE.FeeLookupBySendCountryRequest {
				mgiSessionType = (SERVICE.SessionType)feeLookupBySendCountryRequest.MgiSessionType,
				productVariant = feeLookupBySendCountryRequest.ProductVariant.HasValue ? (SERVICE.ProductVariantType)feeLookupBySendCountryRequest.ProductVariant : GetDefaultEnumValue<SERVICE.ProductVariantType>(),
				productVariantSpecified = feeLookupBySendCountryRequest.ProductVariant.HasValue,
				Item = feeLookupBySendCountryRequest.Item,
				ItemElementName = (SERVICE.ItemChoiceType)feeLookupBySendCountryRequest.ItemElementName,
				receiveCountry = feeLookupBySendCountryRequest.ReceiveCountry,
				serviceOption = feeLookupBySendCountryRequest.ServiceOption,
				freqCustCardNumber = feeLookupBySendCountryRequest.FreqCustCardNumber,
				promotionCode = feeLookupBySendCountryRequest.PromotionCode,
				receiveCode = feeLookupBySendCountryRequest.ReceiveCode,
				indicativeReceiveCurrency = feeLookupBySendCountryRequest.IndicativeReceiveCurrency,
				issueFreqCustCard = feeLookupBySendCountryRequest.IssueFreqCustCard ?? default(bool),
				issueFreqCustCardSpecified = feeLookupBySendCountryRequest.IssueFreqCustCard.HasValue,
				receiveAgentID = feeLookupBySendCountryRequest.ReceiveAgentID,
				receiveCurrency = feeLookupBySendCountryRequest.ReceiveCurrency,
				mgCustomerReceiveNumber = feeLookupBySendCountryRequest.MgCustomerReceiveNumber,
				sendCountry = feeLookupBySendCountryRequest.SendCountry,
				sendCurrency = feeLookupBySendCountryRequest.SendCurrency,
				allOptions = feeLookupBySendCountryRequest.AllOptions,
				unitProfileID = feeLookupBySendCountryRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = feeLookupBySendCountryRequest.UnitProfileID.HasValue,
				agentID = feeLookupBySendCountryRequest.AgentID,
				agentSequence = feeLookupBySendCountryRequest.AgentSequence,
				language = feeLookupBySendCountryRequest.Language,
				mgiSessionID = feeLookupBySendCountryRequest.MgiSessionID,
				timeStamp = feeLookupBySendCountryRequest.TimeStamp,
				clientSoftwareVersion = feeLookupBySendCountryRequest.ClientSoftwareVersion,
				poeType = feeLookupBySendCountryRequest.PoeType,
				channelType = feeLookupBySendCountryRequest.ChannelType,
				operatorName = feeLookupBySendCountryRequest.OperatorName,
				targetAudience = feeLookupBySendCountryRequest.TargetAudience,
				poeCapabilities = feeLookupBySendCountryRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DwProfileRequest ToService(DOMAIN.DwProfileRequest dwProfileRequest, Agent agent)
		{
			var serviceModel = new SERVICE.DwProfileRequest {
				unitProfileID = dwProfileRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = dwProfileRequest.UnitProfileID.HasValue,
				agentID = dwProfileRequest.AgentID,
				agentSequence = dwProfileRequest.AgentSequence,
				language = dwProfileRequest.Language,
				mgiSessionID = dwProfileRequest.MgiSessionID,
				timeStamp = dwProfileRequest.TimeStamp,
				clientSoftwareVersion = dwProfileRequest.ClientSoftwareVersion,
				poeType = dwProfileRequest.PoeType,
				channelType = dwProfileRequest.ChannelType,
				operatorName = dwProfileRequest.OperatorName,
				targetAudience = dwProfileRequest.TargetAudience,
				poeCapabilities = dwProfileRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DwPasswordRequest ToService(DOMAIN.DwPasswordRequest dwPasswordRequest, Agent agent)
		{
			var serviceModel = new SERVICE.DwPasswordRequest {
				employeeNumber = dwPasswordRequest.EmployeeNumber,
				currentPassword = dwPasswordRequest.CurrentPassword,
				newPassword = dwPasswordRequest.NewPassword,
				unitProfileID = dwPasswordRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = dwPasswordRequest.UnitProfileID.HasValue,
				agentID = dwPasswordRequest.AgentID,
				agentSequence = dwPasswordRequest.AgentSequence,
				language = dwPasswordRequest.Language,
				mgiSessionID = dwPasswordRequest.MgiSessionID,
				timeStamp = dwPasswordRequest.TimeStamp,
				clientSoftwareVersion = dwPasswordRequest.ClientSoftwareVersion,
				poeType = dwPasswordRequest.PoeType,
				channelType = dwPasswordRequest.ChannelType,
				operatorName = dwPasswordRequest.OperatorName,
				targetAudience = dwPasswordRequest.TargetAudience,
				poeCapabilities = dwPasswordRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DoddFrankStateRegulatorInfoRequest ToService(DOMAIN.DoddFrankStateRegulatorInfoRequest doddFrankStateRegulatorInfoRequest, Agent agent)
		{
			var serviceModel = new SERVICE.DoddFrankStateRegulatorInfoRequest {
				dfJurisdiction = doddFrankStateRegulatorInfoRequest.DfJurisdiction,
				languages = doddFrankStateRegulatorInfoRequest.Languages?.ToArray(),
				unitProfileID = doddFrankStateRegulatorInfoRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = doddFrankStateRegulatorInfoRequest.UnitProfileID.HasValue,
				agentID = doddFrankStateRegulatorInfoRequest.AgentID,
				agentSequence = doddFrankStateRegulatorInfoRequest.AgentSequence,
				language = doddFrankStateRegulatorInfoRequest.Language,
				mgiSessionID = doddFrankStateRegulatorInfoRequest.MgiSessionID,
				timeStamp = doddFrankStateRegulatorInfoRequest.TimeStamp,
				clientSoftwareVersion = doddFrankStateRegulatorInfoRequest.ClientSoftwareVersion,
				poeType = doddFrankStateRegulatorInfoRequest.PoeType,
				channelType = doddFrankStateRegulatorInfoRequest.ChannelType,
				operatorName = doddFrankStateRegulatorInfoRequest.OperatorName,
				targetAudience = doddFrankStateRegulatorInfoRequest.TargetAudience,
				poeCapabilities = doddFrankStateRegulatorInfoRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DisclosureTextDetailsRequest ToService(DOMAIN.DisclosureTextDetailsRequest disclosureTextDetailsRequest, Agent agent)
		{
			var serviceModel = new SERVICE.DisclosureTextDetailsRequest {
				paperFormat = disclosureTextDetailsRequest.PaperFormat,
				mimeType = disclosureTextDetailsRequest.MimeType,
				downloadAsAttachment = disclosureTextDetailsRequest.DownloadAsAttachment ?? default(bool),
				downloadAsAttachmentSpecified = disclosureTextDetailsRequest.DownloadAsAttachment.HasValue,
				languages = disclosureTextDetailsRequest.Languages?.ToArray(),
				dcaTokenValues = disclosureTextDetailsRequest.DcaTokenValues?.ConvertToService<DOMAIN.DCATokenType, SERVICE.DCATokenType>(agent).ToArray(),
				province = disclosureTextDetailsRequest.Province,
				destinationCountry = disclosureTextDetailsRequest.DestinationCountry,
				disclosureTextRevisionNumber = disclosureTextDetailsRequest.DisclosureTextRevisionNumber,
				dcaTextTagValues = disclosureTextDetailsRequest.DcaTextTagValues?.ToArray(),
				unitProfileID = disclosureTextDetailsRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = disclosureTextDetailsRequest.UnitProfileID.HasValue,
				agentID = disclosureTextDetailsRequest.AgentID,
				agentSequence = disclosureTextDetailsRequest.AgentSequence,
				language = disclosureTextDetailsRequest.Language,
				mgiSessionID = disclosureTextDetailsRequest.MgiSessionID,
				timeStamp = disclosureTextDetailsRequest.TimeStamp,
				clientSoftwareVersion = disclosureTextDetailsRequest.ClientSoftwareVersion,
				poeType = disclosureTextDetailsRequest.PoeType,
				channelType = disclosureTextDetailsRequest.ChannelType,
				operatorName = disclosureTextDetailsRequest.OperatorName,
				targetAudience = disclosureTextDetailsRequest.TargetAudience,
				poeCapabilities = disclosureTextDetailsRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DirectoryOfAgentsByZipRequest ToService(DOMAIN.DirectoryOfAgentsByZipRequest directoryOfAgentsByZipRequest, Agent agent)
		{
			var serviceModel = new SERVICE.DirectoryOfAgentsByZipRequest {
				zipCode = directoryOfAgentsByZipRequest.ZipCode,
				country = directoryOfAgentsByZipRequest.Country,
				maxRowsToReturn = directoryOfAgentsByZipRequest.MaxRowsToReturn,
				unitProfileID = directoryOfAgentsByZipRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = directoryOfAgentsByZipRequest.UnitProfileID.HasValue,
				agentID = directoryOfAgentsByZipRequest.AgentID,
				agentSequence = directoryOfAgentsByZipRequest.AgentSequence,
				language = directoryOfAgentsByZipRequest.Language,
				mgiSessionID = directoryOfAgentsByZipRequest.MgiSessionID,
				timeStamp = directoryOfAgentsByZipRequest.TimeStamp,
				clientSoftwareVersion = directoryOfAgentsByZipRequest.ClientSoftwareVersion,
				poeType = directoryOfAgentsByZipRequest.PoeType,
				channelType = directoryOfAgentsByZipRequest.ChannelType,
				operatorName = directoryOfAgentsByZipRequest.OperatorName,
				targetAudience = directoryOfAgentsByZipRequest.TargetAudience,
				poeCapabilities = directoryOfAgentsByZipRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DirectoryOfAgentsByCityRequest ToService(DOMAIN.DirectoryOfAgentsByCityRequest directoryOfAgentsByCityRequest, Agent agent)
		{
			var serviceModel = new SERVICE.DirectoryOfAgentsByCityRequest {
				country = directoryOfAgentsByCityRequest.Country,
				countrySubdivisionCode = directoryOfAgentsByCityRequest.CountrySubdivisionCode,
				city = directoryOfAgentsByCityRequest.City,
				maxRowsToReturn = directoryOfAgentsByCityRequest.MaxRowsToReturn,
				unitProfileID = directoryOfAgentsByCityRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = directoryOfAgentsByCityRequest.UnitProfileID.HasValue,
				agentID = directoryOfAgentsByCityRequest.AgentID,
				agentSequence = directoryOfAgentsByCityRequest.AgentSequence,
				language = directoryOfAgentsByCityRequest.Language,
				mgiSessionID = directoryOfAgentsByCityRequest.MgiSessionID,
				timeStamp = directoryOfAgentsByCityRequest.TimeStamp,
				clientSoftwareVersion = directoryOfAgentsByCityRequest.ClientSoftwareVersion,
				poeType = directoryOfAgentsByCityRequest.PoeType,
				channelType = directoryOfAgentsByCityRequest.ChannelType,
				operatorName = directoryOfAgentsByCityRequest.OperatorName,
				targetAudience = directoryOfAgentsByCityRequest.TargetAudience,
				poeCapabilities = directoryOfAgentsByCityRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DirectoryOfAgentsByAreaCodePrefixRequest ToService(DOMAIN.DirectoryOfAgentsByAreaCodePrefixRequest directoryOfAgentsByAreaCodePrefixRequest, Agent agent)
		{
			var serviceModel = new SERVICE.DirectoryOfAgentsByAreaCodePrefixRequest {
				areaCodePrefix = directoryOfAgentsByAreaCodePrefixRequest.AreaCodePrefix,
				country = directoryOfAgentsByAreaCodePrefixRequest.Country,
				maxRowsToReturn = directoryOfAgentsByAreaCodePrefixRequest.MaxRowsToReturn,
				unitProfileID = directoryOfAgentsByAreaCodePrefixRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = directoryOfAgentsByAreaCodePrefixRequest.UnitProfileID.HasValue,
				agentID = directoryOfAgentsByAreaCodePrefixRequest.AgentID,
				agentSequence = directoryOfAgentsByAreaCodePrefixRequest.AgentSequence,
				language = directoryOfAgentsByAreaCodePrefixRequest.Language,
				mgiSessionID = directoryOfAgentsByAreaCodePrefixRequest.MgiSessionID,
				timeStamp = directoryOfAgentsByAreaCodePrefixRequest.TimeStamp,
				clientSoftwareVersion = directoryOfAgentsByAreaCodePrefixRequest.ClientSoftwareVersion,
				poeType = directoryOfAgentsByAreaCodePrefixRequest.PoeType,
				channelType = directoryOfAgentsByAreaCodePrefixRequest.ChannelType,
				operatorName = directoryOfAgentsByAreaCodePrefixRequest.OperatorName,
				targetAudience = directoryOfAgentsByAreaCodePrefixRequest.TargetAudience,
				poeCapabilities = directoryOfAgentsByAreaCodePrefixRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.DepositAnnouncementRequest ToService(DOMAIN.DepositAnnouncementRequest depositAnnouncementRequest, Agent agent)
		{
			var serviceModel = new SERVICE.DepositAnnouncementRequest {
				mgiEmployeeAutoAccept = depositAnnouncementRequest.MgiEmployeeAutoAccept,
				depositReferenceNumber = depositAnnouncementRequest.DepositReferenceNumber,
				depositDate = depositAnnouncementRequest.DepositDate,
				announcementDate = depositAnnouncementRequest.AnnouncementDate,
				announcementAmount = depositAnnouncementRequest.AnnouncementAmount,
				announcementCurrencyCode = depositAnnouncementRequest.AnnouncementCurrencyCode,
				paymentTypeCode = depositAnnouncementRequest.PaymentTypeCode,
				bankShortCode = depositAnnouncementRequest.BankShortCode,
				bankName = depositAnnouncementRequest.BankName,
				announcementRemarks = depositAnnouncementRequest.AnnouncementRemarks,
				agentEmployeeID = depositAnnouncementRequest.AgentEmployeeID,
				proofImage = depositAnnouncementRequest.ProofImage?.ToArray(),
				unitProfileID = depositAnnouncementRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = depositAnnouncementRequest.UnitProfileID.HasValue,
				agentID = depositAnnouncementRequest.AgentID,
				agentSequence = depositAnnouncementRequest.AgentSequence,
				language = depositAnnouncementRequest.Language,
				mgiSessionID = depositAnnouncementRequest.MgiSessionID,
				timeStamp = depositAnnouncementRequest.TimeStamp,
				clientSoftwareVersion = depositAnnouncementRequest.ClientSoftwareVersion,
				poeType = depositAnnouncementRequest.PoeType,
				channelType = depositAnnouncementRequest.ChannelType,
				operatorName = depositAnnouncementRequest.OperatorName,
				targetAudience = depositAnnouncementRequest.TargetAudience,
				poeCapabilities = depositAnnouncementRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreateOrUpdateProfileSenderRequest ToService(DOMAIN.CreateOrUpdateProfileSenderRequest createOrUpdateProfileSenderRequest, Agent agent)
		{
			var serviceModel = new SERVICE.CreateOrUpdateProfileSenderRequest {
				GAFVersionNumber = createOrUpdateProfileSenderRequest.GAFVersionNumber,
				consumerProfileID = createOrUpdateProfileSenderRequest.ConsumerProfileID,
				consumerProfileIDType = createOrUpdateProfileSenderRequest.ConsumerProfileIDType,
				consumerProfileIDTypeToReturn = createOrUpdateProfileSenderRequest.ConsumerProfileIDTypeToReturn,
				fieldValues = createOrUpdateProfileSenderRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				verifiedFields = createOrUpdateProfileSenderRequest.VerifiedFields?.ToArray(),
				unitProfileID = createOrUpdateProfileSenderRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = createOrUpdateProfileSenderRequest.UnitProfileID.HasValue,
				agentID = createOrUpdateProfileSenderRequest.AgentID,
				agentSequence = createOrUpdateProfileSenderRequest.AgentSequence,
				language = createOrUpdateProfileSenderRequest.Language,
				mgiSessionID = createOrUpdateProfileSenderRequest.MgiSessionID,
				timeStamp = createOrUpdateProfileSenderRequest.TimeStamp,
				clientSoftwareVersion = createOrUpdateProfileSenderRequest.ClientSoftwareVersion,
				poeType = createOrUpdateProfileSenderRequest.PoeType,
				channelType = createOrUpdateProfileSenderRequest.ChannelType,
				operatorName = createOrUpdateProfileSenderRequest.OperatorName,
				targetAudience = createOrUpdateProfileSenderRequest.TargetAudience,
				poeCapabilities = createOrUpdateProfileSenderRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreateOrUpdateProfileReceiverRequest ToService(DOMAIN.CreateOrUpdateProfileReceiverRequest createOrUpdateProfileReceiverRequest, Agent agent)
		{
			var serviceModel = new SERVICE.CreateOrUpdateProfileReceiverRequest {
				GAFVersionNumber = createOrUpdateProfileReceiverRequest.GAFVersionNumber,
				consumerProfileID = createOrUpdateProfileReceiverRequest.ConsumerProfileID,
				consumerProfileIDType = createOrUpdateProfileReceiverRequest.ConsumerProfileIDType,
				consumerProfileIDTypeToReturn = createOrUpdateProfileReceiverRequest.ConsumerProfileIDTypeToReturn,
				fieldValues = createOrUpdateProfileReceiverRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				verifiedFields = createOrUpdateProfileReceiverRequest.VerifiedFields?.ToArray(),
				unitProfileID = createOrUpdateProfileReceiverRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = createOrUpdateProfileReceiverRequest.UnitProfileID.HasValue,
				agentID = createOrUpdateProfileReceiverRequest.AgentID,
				agentSequence = createOrUpdateProfileReceiverRequest.AgentSequence,
				language = createOrUpdateProfileReceiverRequest.Language,
				mgiSessionID = createOrUpdateProfileReceiverRequest.MgiSessionID,
				timeStamp = createOrUpdateProfileReceiverRequest.TimeStamp,
				clientSoftwareVersion = createOrUpdateProfileReceiverRequest.ClientSoftwareVersion,
				poeType = createOrUpdateProfileReceiverRequest.PoeType,
				channelType = createOrUpdateProfileReceiverRequest.ChannelType,
				operatorName = createOrUpdateProfileReceiverRequest.OperatorName,
				targetAudience = createOrUpdateProfileReceiverRequest.TargetAudience,
				poeCapabilities = createOrUpdateProfileReceiverRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CreateOrUpdateProfileConsumerRequest ToService(DOMAIN.CreateOrUpdateProfileConsumerRequest createOrUpdateProfileConsumerRequest, Agent agent)
		{
			var serviceModel = new SERVICE.CreateOrUpdateProfileConsumerRequest {
				GAFVersionNumber = createOrUpdateProfileConsumerRequest.GAFVersionNumber,
				consumerProfileID = createOrUpdateProfileConsumerRequest.ConsumerProfileID,
				consumerProfileIDType = createOrUpdateProfileConsumerRequest.ConsumerProfileIDType,
				consumerProfileIDTypeToReturn = createOrUpdateProfileConsumerRequest.ConsumerProfileIDTypeToReturn,
				fieldValues = createOrUpdateProfileConsumerRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				verifiedFields = createOrUpdateProfileConsumerRequest.VerifiedFields?.ToArray(),
				unitProfileID = createOrUpdateProfileConsumerRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = createOrUpdateProfileConsumerRequest.UnitProfileID.HasValue,
				agentID = createOrUpdateProfileConsumerRequest.AgentID,
				agentSequence = createOrUpdateProfileConsumerRequest.AgentSequence,
				language = createOrUpdateProfileConsumerRequest.Language,
				mgiSessionID = createOrUpdateProfileConsumerRequest.MgiSessionID,
				timeStamp = createOrUpdateProfileConsumerRequest.TimeStamp,
				clientSoftwareVersion = createOrUpdateProfileConsumerRequest.ClientSoftwareVersion,
				poeType = createOrUpdateProfileConsumerRequest.PoeType,
				channelType = createOrUpdateProfileConsumerRequest.ChannelType,
				operatorName = createOrUpdateProfileConsumerRequest.OperatorName,
				targetAudience = createOrUpdateProfileConsumerRequest.TargetAudience,
				poeCapabilities = createOrUpdateProfileConsumerRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConsumerHistoryLookupRequest ToService(DOMAIN.ConsumerHistoryLookupRequest consumerHistoryLookupRequest, Agent agent)
		{
			var serviceModel = new SERVICE.ConsumerHistoryLookupRequest {
				GAFVersionNumber = consumerHistoryLookupRequest.GAFVersionNumber,
				consumerPhone = consumerHistoryLookupRequest.ConsumerPhone,
				mgiRewardsNumber = consumerHistoryLookupRequest.MgiRewardsNumber,
				billerAccountNumber = consumerHistoryLookupRequest.BillerAccountNumber,
				agentFrequentCustomerNumber = consumerHistoryLookupRequest.AgentFrequentCustomerNumber,
				maxSendersToReturn = consumerHistoryLookupRequest.MaxSendersToReturn,
				maxReceiversToReturn = consumerHistoryLookupRequest.MaxReceiversToReturn,
				mgiSessionType = (SERVICE.SessionType)consumerHistoryLookupRequest.MgiSessionType,
				unitProfileID = consumerHistoryLookupRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = consumerHistoryLookupRequest.UnitProfileID.HasValue,
				agentID = consumerHistoryLookupRequest.AgentID,
				agentSequence = consumerHistoryLookupRequest.AgentSequence,
				language = consumerHistoryLookupRequest.Language,
				mgiSessionID = consumerHistoryLookupRequest.MgiSessionID,
				timeStamp = consumerHistoryLookupRequest.TimeStamp,
				clientSoftwareVersion = consumerHistoryLookupRequest.ClientSoftwareVersion,
				poeType = consumerHistoryLookupRequest.PoeType,
				channelType = consumerHistoryLookupRequest.ChannelType,
				operatorName = consumerHistoryLookupRequest.OperatorName,
				targetAudience = consumerHistoryLookupRequest.TargetAudience,
				poeCapabilities = consumerHistoryLookupRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ConfirmTokenRequest ToService(DOMAIN.ConfirmTokenRequest confirmTokenRequest, Agent agent)
		{
			var serviceModel = new SERVICE.ConfirmTokenRequest {
				codeTableVersion = confirmTokenRequest.CodeTableVersion,
				clientTableVersions = confirmTokenRequest.ClientTableVersions?.ConvertToService<DOMAIN.VersionInfo, SERVICE.VersionInfo>(agent).ToArray(),
				unitProfileID = confirmTokenRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = confirmTokenRequest.UnitProfileID.HasValue,
				agentID = confirmTokenRequest.AgentID,
				agentSequence = confirmTokenRequest.AgentSequence,
				language = confirmTokenRequest.Language,
				mgiSessionID = confirmTokenRequest.MgiSessionID,
				timeStamp = confirmTokenRequest.TimeStamp,
				clientSoftwareVersion = confirmTokenRequest.ClientSoftwareVersion,
				poeType = confirmTokenRequest.PoeType,
				channelType = confirmTokenRequest.ChannelType,
				operatorName = confirmTokenRequest.OperatorName,
				targetAudience = confirmTokenRequest.TargetAudience,
				poeCapabilities = confirmTokenRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.ComplianceTransactionRequest ToService(DOMAIN.ComplianceTransactionRequest complianceTransactionRequest, Agent agent)
		{
			var serviceModel = new SERVICE.ComplianceTransactionRequest {
				requestType = (SERVICE.ComplianceTransactionRequestType)complianceTransactionRequest.RequestType,
				cci = complianceTransactionRequest.Cci != null ? complianceTransactionRequest.Cci.ConvertToService<DOMAIN.CustomerComplianceInfo, SERVICE.CustomerComplianceInfo>(agent) : null,
				mgReferenceNumber = complianceTransactionRequest.MgReferenceNumber,
				moneyOrder = complianceTransactionRequest.MoneyOrder?.ConvertToService<DOMAIN.MoneyOrderInfo, SERVICE.MoneyOrderInfo>(agent).ToArray(),
				unitProfileID = complianceTransactionRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = complianceTransactionRequest.UnitProfileID.HasValue,
				agentID = complianceTransactionRequest.AgentID,
				agentSequence = complianceTransactionRequest.AgentSequence,
				language = complianceTransactionRequest.Language,
				mgiSessionID = complianceTransactionRequest.MgiSessionID,
				timeStamp = complianceTransactionRequest.TimeStamp,
				clientSoftwareVersion = complianceTransactionRequest.ClientSoftwareVersion,
				poeType = complianceTransactionRequest.PoeType,
				channelType = complianceTransactionRequest.ChannelType,
				operatorName = complianceTransactionRequest.OperatorName,
				targetAudience = complianceTransactionRequest.TargetAudience,
				poeCapabilities = complianceTransactionRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CompleteSessionRequest ToService(DOMAIN.CompleteSessionRequest completeSessionRequest, Agent agent)
		{
			var serviceModel = new SERVICE.CompleteSessionRequest {
				commit = completeSessionRequest.Commit,
				mgiSessionType = (SERVICE.SessionType)completeSessionRequest.MgiSessionType,
				receiptImages = completeSessionRequest.ReceiptImages?.ConvertToService<DOMAIN.ReceiptImageContentType, SERVICE.ReceiptImageContentType>(agent).ToArray(),
				unitProfileID = completeSessionRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = completeSessionRequest.UnitProfileID.HasValue,
				agentID = completeSessionRequest.AgentID,
				agentSequence = completeSessionRequest.AgentSequence,
				language = completeSessionRequest.Language,
				mgiSessionID = completeSessionRequest.MgiSessionID,
				timeStamp = completeSessionRequest.TimeStamp,
				clientSoftwareVersion = completeSessionRequest.ClientSoftwareVersion,
				poeType = completeSessionRequest.PoeType,
				channelType = completeSessionRequest.ChannelType,
				operatorName = completeSessionRequest.OperatorName,
				targetAudience = completeSessionRequest.TargetAudience,
				poeCapabilities = completeSessionRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CityListRequest ToService(DOMAIN.CityListRequest cityListRequest, Agent agent)
		{
			var serviceModel = new SERVICE.CityListRequest {
				country = cityListRequest.Country,
				countrySubdivisionCode = cityListRequest.CountrySubdivisionCode,
				city = cityListRequest.City,
				maxRowsToReturn = cityListRequest.MaxRowsToReturn,
				unitProfileID = cityListRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = cityListRequest.UnitProfileID.HasValue,
				agentID = cityListRequest.AgentID,
				agentSequence = cityListRequest.AgentSequence,
				language = cityListRequest.Language,
				mgiSessionID = cityListRequest.MgiSessionID,
				timeStamp = cityListRequest.TimeStamp,
				clientSoftwareVersion = cityListRequest.ClientSoftwareVersion,
				poeType = cityListRequest.PoeType,
				channelType = cityListRequest.ChannelType,
				operatorName = cityListRequest.OperatorName,
				targetAudience = cityListRequest.TargetAudience,
				poeCapabilities = cityListRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.CheckInRequest ToService(DOMAIN.CheckInRequest checkInRequest, Agent agent)
		{
			var serviceModel = new SERVICE.CheckInRequest {
				unitProfileID = checkInRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = checkInRequest.UnitProfileID.HasValue,
				agentID = checkInRequest.AgentID,
				agentSequence = checkInRequest.AgentSequence,
				language = checkInRequest.Language,
				mgiSessionID = checkInRequest.MgiSessionID,
				timeStamp = checkInRequest.TimeStamp,
				clientSoftwareVersion = checkInRequest.ClientSoftwareVersion,
				poeType = checkInRequest.PoeType,
				channelType = checkInRequest.ChannelType,
				operatorName = checkInRequest.OperatorName,
				targetAudience = checkInRequest.TargetAudience,
				poeCapabilities = checkInRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BPValidationRequest ToService(DOMAIN.BPValidationRequest bPValidationRequest, Agent agent)
		{
			var serviceModel = new SERVICE.BPValidationRequest {
				GAFVersionNumber = bPValidationRequest.GAFVersionNumber,
				transactionStaging = bPValidationRequest.TransactionStaging,
				sendAmount = bPValidationRequest.SendAmount,
				feeAmount = bPValidationRequest.FeeAmount ?? default(decimal),
				feeAmountSpecified = bPValidationRequest.FeeAmount.HasValue,
				promoCodes = bPValidationRequest.PromoCodes?.ToArray(),
				sendCurrency = bPValidationRequest.SendCurrency,
				receiveCurrency = bPValidationRequest.ReceiveCurrency,
				destinationCountry = bPValidationRequest.DestinationCountry,
				productVariant = (SERVICE.ProductVariantType)bPValidationRequest.ProductVariant,
				serviceOfferingID = bPValidationRequest.ServiceOfferingID,
				receiveCode = bPValidationRequest.ReceiveCode,
				receiveAgentID = bPValidationRequest.ReceiveAgentID,
				fieldValues = bPValidationRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				verifiedFields = bPValidationRequest.VerifiedFields?.ToArray(),
				primaryReceiptLanguage = bPValidationRequest.PrimaryReceiptLanguage,
				secondaryReceiptLanguage = bPValidationRequest.SecondaryReceiptLanguage,
				receiptImages = bPValidationRequest.ReceiptImages?.ConvertToService<DOMAIN.ReceiptImageContentType, SERVICE.ReceiptImageContentType>(agent).ToArray(),
				unitProfileID = bPValidationRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = bPValidationRequest.UnitProfileID.HasValue,
				agentID = bPValidationRequest.AgentID,
				agentSequence = bPValidationRequest.AgentSequence,
				language = bPValidationRequest.Language,
				mgiSessionID = bPValidationRequest.MgiSessionID,
				timeStamp = bPValidationRequest.TimeStamp,
				clientSoftwareVersion = bPValidationRequest.ClientSoftwareVersion,
				poeType = bPValidationRequest.PoeType,
				channelType = bPValidationRequest.ChannelType,
				operatorName = bPValidationRequest.OperatorName,
				targetAudience = bPValidationRequest.TargetAudience,
				poeCapabilities = bPValidationRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillPaymentSummaryReportRequest ToService(DOMAIN.BillPaymentSummaryReportRequest billPaymentSummaryReportRequest, Agent agent)
		{
			var serviceModel = new SERVICE.BillPaymentSummaryReportRequest {
				activityDate = billPaymentSummaryReportRequest.ActivityDate,
				productVariant = billPaymentSummaryReportRequest.ProductVariant.HasValue ? (SERVICE.ProductVariantType)billPaymentSummaryReportRequest.ProductVariant : GetDefaultEnumValue<SERVICE.ProductVariantType>(),
				productVariantSpecified = billPaymentSummaryReportRequest.ProductVariant.HasValue,
				unitProfileID = billPaymentSummaryReportRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = billPaymentSummaryReportRequest.UnitProfileID.HasValue,
				agentID = billPaymentSummaryReportRequest.AgentID,
				agentSequence = billPaymentSummaryReportRequest.AgentSequence,
				language = billPaymentSummaryReportRequest.Language,
				mgiSessionID = billPaymentSummaryReportRequest.MgiSessionID,
				timeStamp = billPaymentSummaryReportRequest.TimeStamp,
				clientSoftwareVersion = billPaymentSummaryReportRequest.ClientSoftwareVersion,
				poeType = billPaymentSummaryReportRequest.PoeType,
				channelType = billPaymentSummaryReportRequest.ChannelType,
				operatorName = billPaymentSummaryReportRequest.OperatorName,
				targetAudience = billPaymentSummaryReportRequest.TargetAudience,
				poeCapabilities = billPaymentSummaryReportRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillPaymentDetailReportRequest ToService(DOMAIN.BillPaymentDetailReportRequest billPaymentDetailReportRequest, Agent agent)
		{
			var serviceModel = new SERVICE.BillPaymentDetailReportRequest {
				activityDate = billPaymentDetailReportRequest.ActivityDate,
				productVariant = billPaymentDetailReportRequest.ProductVariant.HasValue ? (SERVICE.ProductVariantType)billPaymentDetailReportRequest.ProductVariant : GetDefaultEnumValue<SERVICE.ProductVariantType>(),
				productVariantSpecified = billPaymentDetailReportRequest.ProductVariant.HasValue,
				unitProfileID = billPaymentDetailReportRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = billPaymentDetailReportRequest.UnitProfileID.HasValue,
				agentID = billPaymentDetailReportRequest.AgentID,
				agentSequence = billPaymentDetailReportRequest.AgentSequence,
				language = billPaymentDetailReportRequest.Language,
				mgiSessionID = billPaymentDetailReportRequest.MgiSessionID,
				timeStamp = billPaymentDetailReportRequest.TimeStamp,
				clientSoftwareVersion = billPaymentDetailReportRequest.ClientSoftwareVersion,
				poeType = billPaymentDetailReportRequest.PoeType,
				channelType = billPaymentDetailReportRequest.ChannelType,
				operatorName = billPaymentDetailReportRequest.OperatorName,
				targetAudience = billPaymentDetailReportRequest.TargetAudience,
				poeCapabilities = billPaymentDetailReportRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.BillerSearchRequest ToService(DOMAIN.BillerSearchRequest billerSearchRequest, Agent agent)
		{
			var serviceModel = new SERVICE.BillerSearchRequest {
				searchType = (SERVICE.BillerSearchType)billerSearchRequest.SearchType,
				productVariant = billerSearchRequest.ProductVariant.HasValue ? (SERVICE.ProductVariantType)billerSearchRequest.ProductVariant : GetDefaultEnumValue<SERVICE.ProductVariantType>(),
				productVariantSpecified = billerSearchRequest.ProductVariant.HasValue,
				industryID = billerSearchRequest.IndustryID,
				receiveCode = billerSearchRequest.ReceiveCode,
				billerName = billerSearchRequest.BillerName,
				receiveAgentID = billerSearchRequest.ReceiveAgentID,
				binNumber = billerSearchRequest.BinNumber,
				defaultInformationalFee = billerSearchRequest.DefaultInformationalFee ?? default(decimal),
				defaultInformationalFeeSpecified = billerSearchRequest.DefaultInformationalFee.HasValue,
				defaultMaxFee = billerSearchRequest.DefaultMaxFee ?? default(bool),
				defaultMaxFeeSpecified = billerSearchRequest.DefaultMaxFee.HasValue,
				maxRowsToReturn = billerSearchRequest.MaxRowsToReturn,
				unitProfileID = billerSearchRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = billerSearchRequest.UnitProfileID.HasValue,
				agentID = billerSearchRequest.AgentID,
				agentSequence = billerSearchRequest.AgentSequence,
				language = billerSearchRequest.Language,
				mgiSessionID = billerSearchRequest.MgiSessionID,
				timeStamp = billerSearchRequest.TimeStamp,
				clientSoftwareVersion = billerSearchRequest.ClientSoftwareVersion,
				poeType = billerSearchRequest.PoeType,
				channelType = billerSearchRequest.ChannelType,
				operatorName = billerSearchRequest.OperatorName,
				targetAudience = billerSearchRequest.TargetAudience,
				poeCapabilities = billerSearchRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}
		public static SERVICE.AmendValidationRequest ToService(DOMAIN.AmendValidationRequest amendValidationRequest, Agent agent)
		{
			var serviceModel = new SERVICE.AmendValidationRequest {
				GAFVersionNumber = amendValidationRequest.GAFVersionNumber,
				fieldValues = amendValidationRequest.FieldValues?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
				verifiedFields = amendValidationRequest.VerifiedFields?.ToArray(),
				primaryReceiptLanguage = amendValidationRequest.PrimaryReceiptLanguage,
				secondaryReceiptLanguage = amendValidationRequest.SecondaryReceiptLanguage,
				receiptImages = amendValidationRequest.ReceiptImages?.ConvertToService<DOMAIN.ReceiptImageContentType, SERVICE.ReceiptImageContentType>(agent).ToArray(),
				unitProfileID = amendValidationRequest.UnitProfileID ?? default(int),
				unitProfileIDSpecified = amendValidationRequest.UnitProfileID.HasValue,
				agentID = amendValidationRequest.AgentID,
				agentSequence = amendValidationRequest.AgentSequence,
				language = amendValidationRequest.Language,
				mgiSessionID = amendValidationRequest.MgiSessionID,
				timeStamp = amendValidationRequest.TimeStamp,
				clientSoftwareVersion = amendValidationRequest.ClientSoftwareVersion,
				poeType = amendValidationRequest.PoeType,
				channelType = amendValidationRequest.ChannelType,
				operatorName = amendValidationRequest.OperatorName,
				targetAudience = amendValidationRequest.TargetAudience,
				poeCapabilities = amendValidationRequest.PoeCapabilities?.ConvertToService<DOMAIN.KeyValuePairType, SERVICE.KeyValuePairType>(agent).ToArray(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(serviceModel);

			return serviceModel;
		}

		private static T GetDefaultEnumValue<T>() where T : struct
		{
			return ((T[])Enum.GetValues(typeof(T)))[0];
		}

		private static IEnumerable<U> ConvertToService<T, U>(this IEnumerable<T> models, Agent agent) 
		{
			var transformed = new List<U>();

			foreach (var model in models)
			{
				transformed.Add(model.ConvertToService<T, U>(agent));
			}

			return transformed;
		}

		private static U ConvertToService<T, U>(this T model, Agent agent) 
		{
			dynamic castModel = Convert.ChangeType(model, model.GetType());
			var serviceModel = DomainToServiceExtensions.ToService(castModel, agent);
			return serviceModel;
		}
	}
}