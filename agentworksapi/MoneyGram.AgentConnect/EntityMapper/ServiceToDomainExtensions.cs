//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using MoneyGram.AgentConnect.DomainModel;
using DOMAIN = MoneyGram.AgentConnect.DomainModel.Transaction;
using SERVICE = MoneyGram.AgentConnect.Service;

namespace MoneyGram.AgentConnect.EntityMapper
{
	public static class ServiceToDomainExtensions
	{
		public static DOMAIN.SystemError ToDomain(SERVICE.SystemError systemError)
		{
			var domainModel = new DOMAIN.SystemError {
				TimeStamp = systemError.timeStamp,
				ErrorCode = systemError.errorCode,
				ErrorString = systemError.errorString,
				SubErrorCode = systemError.subErrorCode,
				DetailString = systemError.detailString,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.VariableReceiptTextInfo ToDomain(SERVICE.VariableReceiptTextInfo variableReceiptTextInfo)
		{
			var domainModel = new DOMAIN.VariableReceiptTextInfo {
				ReceiptTextType = variableReceiptTextInfo.receiptTextType,
				TextTranslation = variableReceiptTextInfo.textTranslation?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.TextTranslationType ToDomain(SERVICE.TextTranslationType textTranslationType)
		{
			var domainModel = new DOMAIN.TextTranslationType {
				LongLanguageCode = textTranslationType.longLanguageCode,
				TextTranslation = textTranslationType.textTranslation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.UCPResponseProfileType ToDomain(SERVICE.UCPResponseProfileType uCPResponseProfileType)
		{
			var domainModel = new DOMAIN.UCPResponseProfileType {
				DateOfBirth = uCPResponseProfileType.dateOfBirthSpecified == true ? (DateTime?)uCPResponseProfileType.dateOfBirth : null,
				EmailAddress = uCPResponseProfileType.emailAddress?.Select(x => x.ConvertToDomain<SERVICE.UCPResponseEmailType, DOMAIN.UCPResponseEmailType>()).ToList(),
				IdentificationDocument = uCPResponseProfileType.identificationDocument?.Select(x => x.ConvertToDomain<SERVICE.IdentificationDocumentType, DOMAIN.IdentificationDocumentType>()).ToList(),
				Name = uCPResponseProfileType.name?.Select(x => x.ConvertToDomain<SERVICE.NameType, DOMAIN.NameType>()).ToList(),
				PhoneNumber = uCPResponseProfileType.phoneNumber?.Select(x => x.ConvertToDomain<SERVICE.UCPResponsePhoneType, DOMAIN.UCPResponsePhoneType>()).ToList(),
				ConsumerProfileIdentifier = uCPResponseProfileType.consumerProfileIdentifier?.Select(x => x.ConvertToDomain<SERVICE.ConsumerProfileIdentifierType, DOMAIN.ConsumerProfileIdentifierType>()).ToList(),
				RawAddress = uCPResponseProfileType.rawAddress?.Select(x => x.ConvertToDomain<SERVICE.RawAddressType, DOMAIN.RawAddressType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.UCPResponseEmailType ToDomain(SERVICE.UCPResponseEmailType uCPResponseEmailType)
		{
			var domainModel = new DOMAIN.UCPResponseEmailType {
				BounceDate = uCPResponseEmailType.bounceDateSpecified == true ? (DateTime?)uCPResponseEmailType.bounceDate : null,
				EmailAddress = uCPResponseEmailType.emailAddress,
				EndDate = uCPResponseEmailType.endDateSpecified == true ? (DateTime?)uCPResponseEmailType.endDate : null,
				StartDate = uCPResponseEmailType.startDateSpecified == true ? (DateTime?)uCPResponseEmailType.startDate : null,
				Status = uCPResponseEmailType.status,
				StronglyAuthenticated = uCPResponseEmailType.stronglyAuthenticatedSpecified == true ? (bool?)uCPResponseEmailType.stronglyAuthenticated : null,
				Type = uCPResponseEmailType.type,
				NotificationPreference = uCPResponseEmailType.notificationPreference?.Select(x => x.ConvertToDomain<SERVICE.NotificationPreferenceType, DOMAIN.NotificationPreferenceType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.NotificationPreferenceType ToDomain(SERVICE.NotificationPreferenceType notificationPreferenceType)
		{
			var domainModel = new DOMAIN.NotificationPreferenceType {
				EndDate = notificationPreferenceType.endDateSpecified == true ? (DateTime?)notificationPreferenceType.endDate : null,
				Frequency = notificationPreferenceType.frequency,
				Method = notificationPreferenceType.method,
				OptIn = notificationPreferenceType.optInSpecified == true ? (bool?)notificationPreferenceType.optIn : null,
				OptOutReason = notificationPreferenceType.optOutReason,
				PreferredLanguage = notificationPreferenceType.preferredLanguage,
				StartDate = notificationPreferenceType.startDateSpecified == true ? (DateTime?)notificationPreferenceType.startDate : null,
				StronglyAuthenticated = notificationPreferenceType.stronglyAuthenticatedSpecified == true ? (bool?)notificationPreferenceType.stronglyAuthenticated : null,
				Type = notificationPreferenceType.type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.IdentificationDocumentType ToDomain(SERVICE.IdentificationDocumentType identificationDocumentType)
		{
			var domainModel = new DOMAIN.IdentificationDocumentType {
				EndDate = identificationDocumentType.endDateSpecified == true ? (DateTime?)identificationDocumentType.endDate : null,
				ExpirationDay = identificationDocumentType.expirationDay,
				ExpirationMonth = identificationDocumentType.expirationMonth,
				ExpirationYear = identificationDocumentType.expirationYear,
				IdIssuerAuthorityCode = identificationDocumentType.idIssuerAuthorityCode,
				IdNumber = identificationDocumentType.idNumber,
				IssueCity = identificationDocumentType.issueCity,
				IssueCountryCode = identificationDocumentType.issueCountryCode,
				IssueCountrySubDivisionCode = identificationDocumentType.issueCountrySubDivisionCode,
				IssueDay = identificationDocumentType.issueDay,
				IssueMonth = identificationDocumentType.issueMonth,
				IssueYear = identificationDocumentType.issueYear,
				StartDate = identificationDocumentType.startDateSpecified == true ? (DateTime?)identificationDocumentType.startDate : null,
				StronglyAuthenticated = identificationDocumentType.stronglyAuthenticatedSpecified == true ? (bool?)identificationDocumentType.stronglyAuthenticated : null,
				Type = identificationDocumentType.type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.NameType ToDomain(SERVICE.NameType nameType)
		{
			var domainModel = new DOMAIN.NameType {
				FirstName = nameType.firstName,
				LastName = nameType.lastName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.UCPResponsePhoneType ToDomain(SERVICE.UCPResponsePhoneType uCPResponsePhoneType)
		{
			var domainModel = new DOMAIN.UCPResponsePhoneType {
				CountryDialInNumber = uCPResponsePhoneType.countryDialInNumber,
				EndDate = uCPResponsePhoneType.endDateSpecified == true ? (DateTime?)uCPResponsePhoneType.endDate : null,
				MobileFlag = uCPResponsePhoneType.mobileFlagSpecified == true ? (bool?)uCPResponsePhoneType.mobileFlag : null,
				PhoneNumber = uCPResponsePhoneType.phoneNumber,
				StartDate = uCPResponsePhoneType.startDateSpecified == true ? (DateTime?)uCPResponsePhoneType.startDate : null,
				StronglyAuthenticated = uCPResponsePhoneType.stronglyAuthenticatedSpecified == true ? (bool?)uCPResponsePhoneType.stronglyAuthenticated : null,
				Type = uCPResponsePhoneType.type,
				NotificationPreference = uCPResponsePhoneType.notificationPreference?.Select(x => x.ConvertToDomain<SERVICE.NotificationPreferenceType, DOMAIN.NotificationPreferenceType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerProfileIdentifierType ToDomain(SERVICE.ConsumerProfileIdentifierType consumerProfileIdentifierType)
		{
			var domainModel = new DOMAIN.ConsumerProfileIdentifierType {
				ProfileID = consumerProfileIdentifierType.profileID,
				StartDate = consumerProfileIdentifierType.startDateSpecified == true ? (DateTime?)consumerProfileIdentifierType.startDate : null,
				Type = consumerProfileIdentifierType.type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.RawAddressType ToDomain(SERVICE.RawAddressType rawAddressType)
		{
			var domainModel = new DOMAIN.RawAddressType {
				StandardizedAddress = (rawAddressType.standardizedAddress != null ? rawAddressType.standardizedAddress.ConvertToDomain<SERVICE.StandardizedAddressType, DOMAIN.StandardizedAddressType>() : null),
				AddressLine1 = rawAddressType.addressLine1,
				AddressLine2 = rawAddressType.addressLine2,
				AddressLine3 = rawAddressType.addressLine3,
				AddressLine4 = rawAddressType.addressLine4,
				City = rawAddressType.city,
				CountryCode = rawAddressType.countryCode,
				CountrySubDivisionCode = rawAddressType.countrySubDivisionCode,
				County = rawAddressType.county,
				PostalCode = rawAddressType.postalCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.StandardizedAddressType ToDomain(SERVICE.StandardizedAddressType standardizedAddressType)
		{
			var domainModel = new DOMAIN.StandardizedAddressType {
				AddressCleansingScore = standardizedAddressType.addressCleansingScore,
				AddressLine1 = standardizedAddressType.addressLine1,
				AddressLine2 = standardizedAddressType.addressLine2,
				AddressLine3 = standardizedAddressType.addressLine3,
				AddressLine4 = standardizedAddressType.addressLine4,
				City = standardizedAddressType.city,
				CountryCode = standardizedAddressType.countryCode,
				CountrySubDivisionCode = standardizedAddressType.countrySubDivisionCode,
				County = standardizedAddressType.county,
				PostalCode = standardizedAddressType.postalCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BaseRawAddressType ToDomain(SERVICE.BaseRawAddressType baseRawAddressType)
		{
			var domainModel = new DOMAIN.BaseRawAddressType {
				AddressLine1 = baseRawAddressType.addressLine1,
				AddressLine2 = baseRawAddressType.addressLine2,
				AddressLine3 = baseRawAddressType.addressLine3,
				AddressLine4 = baseRawAddressType.addressLine4,
				City = baseRawAddressType.city,
				CountryCode = baseRawAddressType.countryCode,
				CountrySubDivisionCode = baseRawAddressType.countrySubDivisionCode,
				County = baseRawAddressType.county,
				PostalCode = baseRawAddressType.postalCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SubagentInfo ToDomain(SERVICE.SubagentInfo subagentInfo)
		{
			var domainModel = new DOMAIN.SubagentInfo {
				AgentID = subagentInfo.agentID,
				SequenceNumber = subagentInfo.sequenceNumberSpecified == true ? (int?)subagentInfo.sequenceNumber : null,
				LegacyAgentID = subagentInfo.legacyAgentID,
				City = subagentInfo.city,
				BranchName = subagentInfo.branchName,
				AgentStatus = subagentInfo.agentStatus,
				StoreNumber = subagentInfo.storeNumber,
				AgentStoreName = subagentInfo.agentStoreName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.StagedTransactionInfo ToDomain(SERVICE.StagedTransactionInfo stagedTransactionInfo)
		{
			var domainModel = new DOMAIN.StagedTransactionInfo {
				MgiSessionType = (DOMAIN.SessionType)stagedTransactionInfo.mgiSessionType,
				SenderFirstName = stagedTransactionInfo.senderFirstName,
				SenderMiddleName = stagedTransactionInfo.senderMiddleName,
				SenderLastName = stagedTransactionInfo.senderLastName,
				SenderLastName2 = stagedTransactionInfo.senderLastName2,
				SenderAddress = stagedTransactionInfo.senderAddress,
				SenderCity = stagedTransactionInfo.senderCity,
				SenderCountrySubdivision = stagedTransactionInfo.senderCountrySubdivision,
				SenderCountry = stagedTransactionInfo.senderCountry,
				SenderPostalCode = stagedTransactionInfo.senderPostalCode,
				SenderPhone = stagedTransactionInfo.senderPhone,
				MgiRewardsNumber = stagedTransactionInfo.mgiRewardsNumber,
				ReceiverFirstName = stagedTransactionInfo.receiverFirstName,
				ReceiverMiddleName = stagedTransactionInfo.receiverMiddleName,
				ReceiverLastName = stagedTransactionInfo.receiverLastName,
				ReceiverLastName2 = stagedTransactionInfo.receiverLastName2,
				DestinationCountrySubdivision = stagedTransactionInfo.destinationCountrySubdivision,
				DestinationCountry = stagedTransactionInfo.destinationCountry,
				BillerName = stagedTransactionInfo.billerName,
				BillerAccountNumber = stagedTransactionInfo.billerAccountNumber,
				ConfirmationNumber = stagedTransactionInfo.confirmationNumber,
				SendAmount = stagedTransactionInfo.sendAmount,
				SendCurrency = stagedTransactionInfo.sendCurrency,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.RedirectInfo ToDomain(SERVICE.RedirectInfo redirectInfo)
		{
			var domainModel = new DOMAIN.RedirectInfo {
				OriginalSendAmount = redirectInfo.originalSendAmountSpecified == true ? (decimal?)redirectInfo.originalSendAmount : null,
				OriginalSendCurrency = redirectInfo.originalSendCurrency,
				OriginalSendFee = redirectInfo.originalSendFeeSpecified == true ? (decimal?)redirectInfo.originalSendFee : null,
				OriginalExchangeRate = redirectInfo.originalExchangeRateSpecified == true ? (decimal?)redirectInfo.originalExchangeRate : null,
				OriginalReceiveAmount = redirectInfo.originalReceiveAmountSpecified == true ? (decimal?)redirectInfo.originalReceiveAmount : null,
				OriginalReceiveCurrency = redirectInfo.originalReceiveCurrency,
				OriginalReceiveCountry = redirectInfo.originalReceiveCountry,
				NewSendFee = redirectInfo.newSendFeeSpecified == true ? (decimal?)redirectInfo.newSendFee : null,
				NewExchangeRate = redirectInfo.newExchangeRateSpecified == true ? (decimal?)redirectInfo.newExchangeRate : null,
				NewReceiveAmount = redirectInfo.newReceiveAmountSpecified == true ? (decimal?)redirectInfo.newReceiveAmount : null,
				NewReceiveCurrency = redirectInfo.newReceiveCurrency,
				FeeDifference = redirectInfo.feeDifferenceSpecified == true ? (decimal?)redirectInfo.feeDifference : null,
				RedirectType = redirectInfo.redirectTypeSpecified == true ? (DOMAIN.RedirectInfoRedirectType?)redirectInfo.redirectType : null,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PromotionLookupInfo ToDomain(SERVICE.PromotionLookupInfo promotionLookupInfo)
		{
			var domainModel = new DOMAIN.PromotionLookupInfo {
				PromotionDiscountName = promotionLookupInfo.promotionDiscountName,
				CurrencyCode = promotionLookupInfo.currencyCode,
				PromotionDiscount = promotionLookupInfo.promotionDiscountSpecified == true ? (decimal?)promotionLookupInfo.promotionDiscount : null,
				PromotionMaxDiscountAmount = promotionLookupInfo.promotionMaxDiscountAmountSpecified == true ? (decimal?)promotionLookupInfo.promotionMaxDiscountAmount : null,
				PromotionCategoryName = promotionLookupInfo.promotionCategoryName,
				PromotionName = promotionLookupInfo.promotionName,
				PromotionId = promotionLookupInfo.promotionIdSpecified == true ? (int?)promotionLookupInfo.promotionId : null,
				PromotionBeginDate = promotionLookupInfo.promotionBeginDate,
				PromotionEndDate = promotionLookupInfo.promotionEndDate,
				PromotionCategoryBeginDate = promotionLookupInfo.promotionCategoryBeginDate,
				PromotionCategoryEndDate = promotionLookupInfo.promotionCategoryEndDate,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.TransactionDocumentContentType ToDomain(SERVICE.TransactionDocumentContentType transactionDocumentContentType)
		{
			var domainModel = new DOMAIN.TransactionDocumentContentType {
				Identifier = transactionDocumentContentType.identifier,
				ReferenceNumber = transactionDocumentContentType.referenceNumber,
				MimeType = transactionDocumentContentType.mimeType,
				ImageItems = transactionDocumentContentType.imageItems?.Select(x => x.ConvertToDomain<SERVICE.ImageItemType, DOMAIN.ImageItemType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ImageItemType ToDomain(SERVICE.ImageItemType imageItemType)
		{
			var domainModel = new DOMAIN.ImageItemType {
				Label = imageItemType.label,
				Image = imageItemType.image?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PartnerCreditType ToDomain(SERVICE.PartnerCreditType partnerCreditType)
		{
			var domainModel = new DOMAIN.PartnerCreditType {
				CreditLimitInfo = partnerCreditType.creditLimitInfo?.Select(x => x.ConvertToDomain<SERVICE.CreditLimitInfo, DOMAIN.CreditLimitInfo>()).ToList(),
				GoodFundsAgentFlag = partnerCreditType.goodFundsAgentFlagSpecified == true ? (bool?)partnerCreditType.goodFundsAgentFlag : null,
				DepositProofRequiredFlag = partnerCreditType.depositProofRequiredFlagSpecified == true ? (bool?)partnerCreditType.depositProofRequiredFlag : null,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreditLimitInfo ToDomain(SERVICE.CreditLimitInfo creditLimitInfo)
		{
			var domainModel = new DOMAIN.CreditLimitInfo {
				CreditLimitType = creditLimitInfo.creditLimitType,
				CreditLimitAmount = creditLimitInfo.creditLimitAmountSpecified == true ? (decimal?)creditLimitInfo.creditLimitAmount : null,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendSummaryInfo ToDomain(SERVICE.MoneyGramSendSummaryInfo moneyGramSendSummaryInfo)
		{
			var domainModel = new DOMAIN.MoneyGramSendSummaryInfo {
				FaceAmount = moneyGramSendSummaryInfo.faceAmount,
				FeeAmount = moneyGramSendSummaryInfo.feeAmount,
				TotalAmount = moneyGramSendSummaryInfo.totalAmount,
				SendCurrency = moneyGramSendSummaryInfo.sendCurrency,
				AgentNumber = moneyGramSendSummaryInfo.agentNumber,
				AgentName = moneyGramSendSummaryInfo.agentName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendWithTaxDetailInfo ToDomain(SERVICE.MoneyGramSendWithTaxDetailInfo moneyGramSendWithTaxDetailInfo)
		{
			var domainModel = new DOMAIN.MoneyGramSendWithTaxDetailInfo {
				ReferenceNumber = moneyGramSendWithTaxDetailInfo.referenceNumber,
				FaceAmount = moneyGramSendWithTaxDetailInfo.faceAmount,
				FeeAmount = moneyGramSendWithTaxDetailInfo.feeAmount,
				TotalAmount = moneyGramSendWithTaxDetailInfo.totalAmount,
				SendCurrency = moneyGramSendWithTaxDetailInfo.sendCurrency,
				PaymentType = (DOMAIN.PaymentType)moneyGramSendWithTaxDetailInfo.paymentType,
				AgentName = moneyGramSendWithTaxDetailInfo.agentName,
				TaxAmount = moneyGramSendWithTaxDetailInfo.taxAmountSpecified == true ? (decimal?)moneyGramSendWithTaxDetailInfo.taxAmount : null,
				TaxPercentage = moneyGramSendWithTaxDetailInfo.taxPercentageSpecified == true ? (decimal?)moneyGramSendWithTaxDetailInfo.taxPercentage : null,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendDetailInfo ToDomain(SERVICE.MoneyGramSendDetailInfo moneyGramSendDetailInfo)
		{
			var domainModel = new DOMAIN.MoneyGramSendDetailInfo {
				ReferenceNumber = moneyGramSendDetailInfo.referenceNumber,
				FaceAmount = moneyGramSendDetailInfo.faceAmount,
				FeeAmount = moneyGramSendDetailInfo.feeAmount,
				TotalAmount = moneyGramSendDetailInfo.totalAmount,
				SendCurrency = moneyGramSendDetailInfo.sendCurrency,
				AgentNumber = moneyGramSendDetailInfo.agentNumber,
				PaymentType = (DOMAIN.PaymentType)moneyGramSendDetailInfo.paymentType,
				AgentName = moneyGramSendDetailInfo.agentName,
				Time = moneyGramSendDetailInfo.time,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramReceiveSummaryInfo ToDomain(SERVICE.MoneyGramReceiveSummaryInfo moneyGramReceiveSummaryInfo)
		{
			var domainModel = new DOMAIN.MoneyGramReceiveSummaryInfo {
				AgentNumber = moneyGramReceiveSummaryInfo.agentNumber,
				AgentName = moneyGramReceiveSummaryInfo.agentName,
				CashOrCheckAmount = moneyGramReceiveSummaryInfo.cashOrCheckAmountSpecified == true ? (decimal?)moneyGramReceiveSummaryInfo.cashOrCheckAmount : null,
				OtherPayoutAmount = moneyGramReceiveSummaryInfo.otherPayoutAmountSpecified == true ? (decimal?)moneyGramReceiveSummaryInfo.otherPayoutAmount : null,
				ReceiveCurrency = moneyGramReceiveSummaryInfo.receiveCurrency,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramReceiveDetailInfo ToDomain(SERVICE.MoneyGramReceiveDetailInfo moneyGramReceiveDetailInfo)
		{
			var domainModel = new DOMAIN.MoneyGramReceiveDetailInfo {
				Time = moneyGramReceiveDetailInfo.time,
				ReferenceNumber = moneyGramReceiveDetailInfo.referenceNumber,
				ReceiverName = moneyGramReceiveDetailInfo.receiverName,
				CheckNumber = moneyGramReceiveDetailInfo.checkNumber,
				ReceiveAmount = moneyGramReceiveDetailInfo.receiveAmount,
				AgentNumber = moneyGramReceiveDetailInfo.agentNumber,
				PayoutType = moneyGramReceiveDetailInfo.payoutType,
				AgentName = moneyGramReceiveDetailInfo.agentName,
				AccountNumber = moneyGramReceiveDetailInfo.accountNumber,
				ReceiveCurrency = moneyGramReceiveDetailInfo.receiveCurrency,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.LoyaltyTranslationType ToDomain(SERVICE.LoyaltyTranslationType loyaltyTranslationType)
		{
			var domainModel = new DOMAIN.LoyaltyTranslationType {
				MessageId = loyaltyTranslationType.messageId,
				MessageText = loyaltyTranslationType.messageText,
				LanguageCode = loyaltyTranslationType.languageCode,
				LongLanguageCode = loyaltyTranslationType.longLanguageCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.LoyaltyProgramTypeTranslationType ToDomain(SERVICE.LoyaltyProgramTypeTranslationType loyaltyProgramTypeTranslationType)
		{
			var domainModel = new DOMAIN.LoyaltyProgramTypeTranslationType {
				ProgramType = loyaltyProgramTypeTranslationType.programType,
				ProgramNameText = loyaltyProgramTypeTranslationType.programNameText,
				ProgramDescText = loyaltyProgramTypeTranslationType.programDescText,
				LanguageCode = loyaltyProgramTypeTranslationType.languageCode,
				LongLanguageCode = loyaltyProgramTypeTranslationType.longLanguageCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.LoyaltyCardTypeTranslationType ToDomain(SERVICE.LoyaltyCardTypeTranslationType loyaltyCardTypeTranslationType)
		{
			var domainModel = new DOMAIN.LoyaltyCardTypeTranslationType {
				CardType = loyaltyCardTypeTranslationType.cardType,
				MessageText = loyaltyCardTypeTranslationType.messageText,
				LanguageCode = loyaltyCardTypeTranslationType.languageCode,
				LongLanguageCode = loyaltyCardTypeTranslationType.longLanguageCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.LevelInfo ToDomain(SERVICE.LevelInfo levelInfo)
		{
			var domainModel = new DOMAIN.LevelInfo {
				LevelNumber = levelInfo.levelNumber,
				LevelValue = levelInfo.levelValue,
				LevelAttributeLabel = levelInfo.levelAttributeLabel,
				LevelAttributeTag = levelInfo.levelAttributeTag,
				LevelAttributeVal = levelInfo.levelAttributeVal,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.LanguageTranslationType ToDomain(SERVICE.LanguageTranslationType languageTranslationType)
		{
			var domainModel = new DOMAIN.LanguageTranslationType {
				LanguageCode = languageTranslationType.languageCode,
				LongLanguageCode = languageTranslationType.longLanguageCode,
				DisplayName = languageTranslationType.displayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.IndustryTranslationType ToDomain(SERVICE.IndustryTranslationType industryTranslationType)
		{
			var domainModel = new DOMAIN.IndustryTranslationType {
				IndustryId = industryTranslationType.industryId,
				DisplayName = industryTranslationType.displayName,
				LanguageCode = industryTranslationType.languageCode,
				LongLanguageCode = industryTranslationType.longLanguageCode,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.IndustryInfo ToDomain(SERVICE.IndustryInfo industryInfo)
		{
			var domainModel = new DOMAIN.IndustryInfo {
				IndustryID = industryInfo.industryID,
				IndustryName = industryInfo.industryName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FQDOTextTranslationType ToDomain(SERVICE.FQDOTextTranslationType fQDOTextTranslationType)
		{
			var domainModel = new DOMAIN.FQDOTextTranslationType {
				ReceiveCountry = fQDOTextTranslationType.receiveCountry,
				ServiceOption = fQDOTextTranslationType.serviceOption,
				ReceiveAgentID = fQDOTextTranslationType.receiveAgentID,
				ReceiveCurrency = fQDOTextTranslationType.receiveCurrency,
				LanguageCode = fQDOTextTranslationType.languageCode,
				LongLanguageCode = fQDOTextTranslationType.longLanguageCode,
				ServiceOptionDisplayName = fQDOTextTranslationType.serviceOptionDisplayName,
				ServiceOptionDisplayDescription = fQDOTextTranslationType.serviceOptionDisplayDescription,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ServiceOptionInfo ToDomain(SERVICE.ServiceOptionInfo serviceOptionInfo)
		{
			var domainModel = new DOMAIN.ServiceOptionInfo {
				ServiceOption = serviceOptionInfo.serviceOption,
				ReceiveCurrency = serviceOptionInfo.receiveCurrency,
				ReceiveAgentID = serviceOptionInfo.receiveAgentID,
				ServiceOptionDisplayName = serviceOptionInfo.serviceOptionDisplayName,
				ServiceOptionDisplayDescription = serviceOptionInfo.serviceOptionDisplayDescription,
				ServiceOptionCategoryId = serviceOptionInfo.serviceOptionCategoryId,
				ServiceOptionCategoryDisplayName = serviceOptionInfo.serviceOptionCategoryDisplayName,
				LocalCurrency = serviceOptionInfo.localCurrency,
				IndicativeRateAvailable = serviceOptionInfo.indicativeRateAvailable,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DestinationCountryInfo ToDomain(SERVICE.DestinationCountryInfo destinationCountryInfo)
		{
			var domainModel = new DOMAIN.DestinationCountryInfo {
				DestinationCountry = destinationCountryInfo.destinationCountry,
				ServiceOptionInfos = destinationCountryInfo.serviceOptionInfos?.Select(x => x.ConvertToDomain<SERVICE.ServiceOptionInfo, DOMAIN.ServiceOptionInfo>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DepositAndProofInfo ToDomain(SERVICE.DepositAndProofInfo depositAndProofInfo)
		{
			var domainModel = new DOMAIN.DepositAndProofInfo {
				MgiEmployeeAutoAccept = depositAndProofInfo.mgiEmployeeAutoAcceptSpecified == true ? (bool?)depositAndProofInfo.mgiEmployeeAutoAccept : null,
				DepositReferenceNumber = depositAndProofInfo.depositReferenceNumber,
				DepositDate = depositAndProofInfo.depositDate,
				AnnouncementDate = depositAndProofInfo.announcementDate,
				AnnouncementAmount = depositAndProofInfo.announcementAmountSpecified == true ? (decimal?)depositAndProofInfo.announcementAmount : null,
				AnnouncementCurrencyCode = depositAndProofInfo.announcementCurrencyCode,
				PaymentTypeCode = depositAndProofInfo.paymentTypeCode,
				BankShortCode = depositAndProofInfo.bankShortCode,
				BankName = depositAndProofInfo.bankName,
				AnnouncementRemarks = depositAndProofInfo.announcementRemarks,
				AnnouncementStatus = depositAndProofInfo.announcementStatus,
				CustomerAccountSiteID = depositAndProofInfo.customerAccountSiteID,
				AgentEmployeeID = depositAndProofInfo.agentEmployeeID,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DeliveryOptionTranslationType ToDomain(SERVICE.DeliveryOptionTranslationType deliveryOptionTranslationType)
		{
			var domainModel = new DOMAIN.DeliveryOptionTranslationType {
				ServiceOption = deliveryOptionTranslationType.serviceOption,
				LanguageCode = deliveryOptionTranslationType.languageCode,
				LongLanguageCode = deliveryOptionTranslationType.longLanguageCode,
				DisplayName = deliveryOptionTranslationType.displayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CurrencyTranslationType ToDomain(SERVICE.CurrencyTranslationType currencyTranslationType)
		{
			var domainModel = new DOMAIN.CurrencyTranslationType {
				CurrencyCode = currencyTranslationType.currencyCode,
				LanguageCode = currencyTranslationType.languageCode,
				LongLanguageCode = currencyTranslationType.longLanguageCode,
				DisplayName = currencyTranslationType.displayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CountryTranslationType ToDomain(SERVICE.CountryTranslationType countryTranslationType)
		{
			var domainModel = new DOMAIN.CountryTranslationType {
				CountryCode = countryTranslationType.countryCode,
				LanguageCode = countryTranslationType.languageCode,
				LongLanguageCode = countryTranslationType.longLanguageCode,
				DisplayName = countryTranslationType.displayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerProfileSearchInfo ToDomain(SERVICE.ConsumerProfileSearchInfo consumerProfileSearchInfo)
		{
			var domainModel = new DOMAIN.ConsumerProfileSearchInfo {
				ConsumerProfileID = consumerProfileSearchInfo.consumerProfileID,
				ConsumerProfileIDType = consumerProfileSearchInfo.consumerProfileIDType,
				CurrentValues = consumerProfileSearchInfo.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.KeyValuePairType ToDomain(SERVICE.KeyValuePairType keyValuePairType)
		{
			var domainModel = new DOMAIN.KeyValuePairType {
				InfoKey = keyValuePairType.infoKey,
				Value = keyValuePairType.value,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PaymentTypeInfo ToDomain(SERVICE.PaymentTypeInfo paymentTypeInfo)
		{
			var domainModel = new DOMAIN.PaymentTypeInfo {
				PaymentTypeCode = paymentTypeInfo.paymentTypeCode,
				PaymentTypeName = paymentTypeInfo.paymentTypeName,
				PaymentTypeDisplayName = paymentTypeInfo.paymentTypeDisplayName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BankInfo ToDomain(SERVICE.BankInfo bankInfo)
		{
			var domainModel = new DOMAIN.BankInfo {
				BankId = bankInfo.bankId,
				BankShortCode = bankInfo.bankShortCode,
				BankName = bankInfo.bankName,
				BankDisplayName = bankInfo.bankDisplayName,
				PaymentType = bankInfo.paymentType?.Select(x => x.ConvertToDomain<SERVICE.PaymentTypeInfo, DOMAIN.PaymentTypeInfo>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.AgentAddressType ToDomain(SERVICE.AgentAddressType agentAddressType)
		{
			var domainModel = new DOMAIN.AgentAddressType {
				AgentAddress = agentAddressType.agentAddress?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CurrencyInfo ToDomain(SERVICE.CurrencyInfo currencyInfo)
		{
			var domainModel = new DOMAIN.CurrencyInfo {
				CurrencyCode = currencyInfo.currencyCode,
				CurrencyName = currencyInfo.currencyName,
				CurrencyPrecision = currencyInfo.currencyPrecision,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SubdivisionInfo ToDomain(SERVICE.SubdivisionInfo subdivisionInfo)
		{
			var domainModel = new DOMAIN.SubdivisionInfo {
				CountrySubdivisionCode = subdivisionInfo.countrySubdivisionCode,
				CountrySubdivisionName = subdivisionInfo.countrySubdivisionName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CountrySubdivisionInfo ToDomain(SERVICE.CountrySubdivisionInfo countrySubdivisionInfo)
		{
			var domainModel = new DOMAIN.CountrySubdivisionInfo {
				CountryCode = countrySubdivisionInfo.countryCode,
				Subdivisions = countrySubdivisionInfo.subdivisions?.Select(x => x.ConvertToDomain<SERVICE.SubdivisionInfo, DOMAIN.SubdivisionInfo>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CountryInfo ToDomain(SERVICE.CountryInfo countryInfo)
		{
			var domainModel = new DOMAIN.CountryInfo {
				CountryCode = countryInfo.countryCode,
				CountryName = countryInfo.countryName,
				BaseCurrency = countryInfo.baseCurrency,
				LookupKeys = countryInfo.lookupKeys?.ToList(),
				ReceiveCurrencies = countryInfo.receiveCurrencies?.ToList(),
				SendCurrencies = countryInfo.sendCurrencies?.ToList(),
				CountryDialCodes = countryInfo.countryDialCodes?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerProfileTransactionHistoryType ToDomain(SERVICE.ConsumerProfileTransactionHistoryType consumerProfileTransactionHistoryType)
		{
			var domainModel = new DOMAIN.ConsumerProfileTransactionHistoryType {
				CurrentValues = consumerProfileTransactionHistoryType.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.AttributeType ToDomain(SERVICE.AttributeType attributeType)
		{
			var domainModel = new DOMAIN.AttributeType {
				AttributeLabel = attributeType.attributeLabel,
				AttributeTag = attributeType.attributeTag,
				AttributeValue = attributeType.attributeValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.HierarchyLevelInfo ToDomain(SERVICE.HierarchyLevelInfo hierarchyLevelInfo)
		{
			var domainModel = new DOMAIN.HierarchyLevelInfo {
				HierarchyLevelElementNumber = hierarchyLevelInfo.hierarchyLevelElementNumber,
				HierarchyLevelValue = hierarchyLevelInfo.hierarchyLevelValue,
				Attributes = hierarchyLevelInfo.attributes?.Select(x => x.ConvertToDomain<SERVICE.AttributeType, DOMAIN.AttributeType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GenericBusinessError ToDomain(SERVICE.GenericBusinessError genericBusinessError)
		{
			var domainModel = new DOMAIN.GenericBusinessError {
				ErrorCode = genericBusinessError.errorCode,
				Message = genericBusinessError.message,
				MessageShort = genericBusinessError.messageShort,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ErrorInfo ToDomain(SERVICE.ErrorInfo errorInfo)
		{
			var domainModel = new DOMAIN.ErrorInfo {
				ErrorCode = errorInfo.errorCode,
				ErrorMessages = errorInfo.errorMessages?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				RecoverableFlag = errorInfo.recoverableFlag,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.EstimatedReceiveAmountInfo ToDomain(SERVICE.EstimatedReceiveAmountInfo estimatedReceiveAmountInfo)
		{
			var domainModel = new DOMAIN.EstimatedReceiveAmountInfo {
				ReceiveAmount = estimatedReceiveAmountInfo.receiveAmountSpecified == true ? (decimal?)estimatedReceiveAmountInfo.receiveAmount : null,
				ReceiveCurrency = estimatedReceiveAmountInfo.receiveCurrency,
				ValidCurrencyIndicator = estimatedReceiveAmountInfo.validCurrencyIndicator,
				DisplayPayoutCurrency = estimatedReceiveAmountInfo.displayPayoutCurrency,
				TotalReceiveFees = estimatedReceiveAmountInfo.totalReceiveFeesSpecified == true ? (decimal?)estimatedReceiveAmountInfo.totalReceiveFees : null,
				TotalReceiveTaxes = estimatedReceiveAmountInfo.totalReceiveTaxesSpecified == true ? (decimal?)estimatedReceiveAmountInfo.totalReceiveTaxes : null,
				TotalReceiveAmount = estimatedReceiveAmountInfo.totalReceiveAmountSpecified == true ? (decimal?)estimatedReceiveAmountInfo.totalReceiveAmount : null,
				ReceiveFeesAreEstimated = estimatedReceiveAmountInfo.receiveFeesAreEstimated,
				ReceiveTaxesAreEstimated = estimatedReceiveAmountInfo.receiveTaxesAreEstimated,
				DetailEstimatedReceiveAmounts = estimatedReceiveAmountInfo.detailEstimatedReceiveAmounts?.Select(x => x.ConvertToDomain<SERVICE.AmountInfo, DOMAIN.AmountInfo>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.AmountInfo ToDomain(SERVICE.AmountInfo amountInfo)
		{
			var domainModel = new DOMAIN.AmountInfo {
				AmountType = amountInfo.amountType,
				Amount = amountInfo.amountSpecified == true ? (decimal?)amountInfo.amount : null,
				AmountCurrency = amountInfo.amountCurrency,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FeeInfo ToDomain(SERVICE.FeeInfo feeInfo)
		{
			var domainModel = new DOMAIN.FeeInfo {
				ValidReceiveAmount = feeInfo.validReceiveAmount,
				ValidReceiveCurrency = feeInfo.validReceiveCurrency,
				ValidExchangeRate = feeInfo.validExchangeRate,
				EstimatedReceiveAmount = feeInfo.estimatedReceiveAmountSpecified == true ? (decimal?)feeInfo.estimatedReceiveAmount : null,
				EstimatedReceiveCurrency = feeInfo.estimatedReceiveCurrency,
				EstimatedExchangeRate = feeInfo.estimatedExchangeRateSpecified == true ? (decimal?)feeInfo.estimatedExchangeRate : null,
				DisplayExchangeRate = feeInfo.displayExchangeRateSpecified == true ? (decimal?)feeInfo.displayExchangeRate : null,
				TotalAmount = feeInfo.totalAmount,
				DestinationCountry = feeInfo.destinationCountry,
				ServiceOption = feeInfo.serviceOption,
				ReceiveAmountAltered = feeInfo.receiveAmountAltered,
				SaLimitAvailable = feeInfo.saLimitAvailableSpecified == true ? (decimal?)feeInfo.saLimitAvailable : null,
				RevisedInformationalFee = feeInfo.revisedInformationalFee,
				ServiceOptionCategoryDisplayName = feeInfo.serviceOptionCategoryDisplayName,
				ServiceOptionCategoryId = feeInfo.serviceOptionCategoryId,
				ServiceOptionDisplayName = feeInfo.serviceOptionDisplayName,
				ServiceOptionDisplayDescription = feeInfo.serviceOptionDisplayDescription,
				DisplayOrder = feeInfo.displayOrderSpecified == true ? (int?)feeInfo.displayOrder : null,
				RegAuthText = feeInfo.regAuthText,
				ReceiveAgentID = feeInfo.receiveAgentID,
				ReceiveAgentName = feeInfo.receiveAgentName,
				ReceiveAgentAbbreviation = feeInfo.receiveAgentAbbreviation,
				MgManaged = feeInfo.mgManaged,
				DisclosureText = feeInfo.disclosureText,
				MgiSessionID = feeInfo.mgiSessionID,
				SendAmountAltered = feeInfo.sendAmountAltered,
				AdditionalInfoText = feeInfo.additionalInfoText,
				PromotionInfos = feeInfo.promotionInfos?.Select(x => x.ConvertToDomain<SERVICE.PromotionInfo, DOMAIN.PromotionInfo>()).ToList(),
				SendAmounts = (feeInfo.sendAmounts != null ? feeInfo.sendAmounts.ConvertToDomain<SERVICE.SendAmountInfo, DOMAIN.SendAmountInfo>() : null),
				ReceiveAmounts = (feeInfo.receiveAmounts != null ? feeInfo.receiveAmounts.ConvertToDomain<SERVICE.EstimatedReceiveAmountInfo, DOMAIN.EstimatedReceiveAmountInfo>() : null),
				ErrorInfo = (feeInfo.errorInfo != null ? feeInfo.errorInfo.ConvertToDomain<SERVICE.ErrorInfo, DOMAIN.ErrorInfo>() : null),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PromotionInfo ToDomain(SERVICE.PromotionInfo promotionInfo)
		{
			var domainModel = new DOMAIN.PromotionInfo {
				PromotionCode = promotionInfo.promotionCode,
				PromotionDiscountId = promotionInfo.promotionDiscountId,
				PromotionCategoryId = promotionInfo.promotionCategoryId,
				PromotionDiscount = promotionInfo.promotionDiscountSpecified == true ? (decimal?)promotionInfo.promotionDiscount : null,
				PromotionDiscountAmount = promotionInfo.promotionDiscountAmountSpecified == true ? (decimal?)promotionInfo.promotionDiscountAmount : null,
				PromotionErrorCode = promotionInfo.promotionErrorCode,
				PromotionErrorMessages = promotionInfo.promotionErrorMessages?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SendAmountInfo ToDomain(SERVICE.SendAmountInfo sendAmountInfo)
		{
			var domainModel = new DOMAIN.SendAmountInfo {
				SendAmount = sendAmountInfo.sendAmountSpecified == true ? (decimal?)sendAmountInfo.sendAmount : null,
				SendCurrency = sendAmountInfo.sendCurrency,
				TotalSendFees = sendAmountInfo.totalSendFeesSpecified == true ? (decimal?)sendAmountInfo.totalSendFees : null,
				TotalDiscountAmount = sendAmountInfo.totalDiscountAmountSpecified == true ? (decimal?)sendAmountInfo.totalDiscountAmount : null,
				TotalSendTaxes = sendAmountInfo.totalSendTaxesSpecified == true ? (decimal?)sendAmountInfo.totalSendTaxes : null,
				TotalAmountToCollect = sendAmountInfo.totalAmountToCollectSpecified == true ? (decimal?)sendAmountInfo.totalAmountToCollect : null,
				DetailSendAmounts = sendAmountInfo.detailSendAmounts?.Select(x => x.ConvertToDomain<SERVICE.AmountInfo, DOMAIN.AmountInfo>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CountryFeeInfo ToDomain(SERVICE.CountryFeeInfo countryFeeInfo)
		{
			var domainModel = new DOMAIN.CountryFeeInfo {
				FeeAmount = countryFeeInfo.feeAmountSpecified == true ? (decimal?)countryFeeInfo.feeAmount : null,
				SendAmount = countryFeeInfo.sendAmountSpecified == true ? (decimal?)countryFeeInfo.sendAmount : null,
				SendCurrency = countryFeeInfo.sendCurrency,
				ValidReceiveAmount = countryFeeInfo.validReceiveAmountSpecified == true ? (decimal?)countryFeeInfo.validReceiveAmount : null,
				ValidReceiveCurrency = countryFeeInfo.validReceiveCurrency,
				ValidExchangeRate = countryFeeInfo.validExchangeRateSpecified == true ? (decimal?)countryFeeInfo.validExchangeRate : null,
				ValidIndicator = countryFeeInfo.validIndicatorSpecified == true ? (bool?)countryFeeInfo.validIndicator : null,
				EstimatedReceiveAmount = countryFeeInfo.estimatedReceiveAmountSpecified == true ? (decimal?)countryFeeInfo.estimatedReceiveAmount : null,
				EstimatedReceiveCurrency = countryFeeInfo.estimatedReceiveCurrency,
				EstimatedExchangeRate = countryFeeInfo.estimatedExchangeRateSpecified == true ? (decimal?)countryFeeInfo.estimatedExchangeRate : null,
				TotalAmount = countryFeeInfo.totalAmountSpecified == true ? (decimal?)countryFeeInfo.totalAmount : null,
				ReceiveCountry = countryFeeInfo.receiveCountry,
				ServiceOption = countryFeeInfo.serviceOption,
				ReceiveAmountAltered = countryFeeInfo.receiveAmountAlteredSpecified == true ? (bool?)countryFeeInfo.receiveAmountAltered : null,
				AmountExceededIndicator = countryFeeInfo.amountExceededIndicator,
				MaxAmountAllowed = countryFeeInfo.maxAmountAllowedSpecified == true ? (decimal?)countryFeeInfo.maxAmountAllowed : null,
				ReceiveAgentID = countryFeeInfo.receiveAgentID,
				ReceiveAgentName = countryFeeInfo.receiveAgentName,
				ReceiveAgentAbbreviation = countryFeeInfo.receiveAgentAbbreviation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.StateRegulatorInfo ToDomain(SERVICE.StateRegulatorInfo stateRegulatorInfo)
		{
			var domainModel = new DOMAIN.StateRegulatorInfo {
				DfJurisdiction = stateRegulatorInfo.dfJurisdiction,
				StateRegulatorURL = stateRegulatorInfo.stateRegulatorURL,
				StateRegulatorPhone = stateRegulatorInfo.stateRegulatorPhone,
				StateRegulatorName = stateRegulatorInfo.stateRegulatorName?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DynamicContentAssemblyDetailsType ToDomain(SERVICE.DynamicContentAssemblyDetailsType dynamicContentAssemblyDetailsType)
		{
			var domainModel = new DOMAIN.DynamicContentAssemblyDetailsType {
				ResponseText = dynamicContentAssemblyDetailsType.responseText,
				ErrorCode = dynamicContentAssemblyDetailsType.errorCode,
				MimeType = dynamicContentAssemblyDetailsType.mimeType,
				MimeData = dynamicContentAssemblyDetailsType.mimeData?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiptFormatDetailsType ToDomain(SERVICE.ReceiptFormatDetailsType receiptFormatDetailsType)
		{
			var domainModel = new DOMAIN.ReceiptFormatDetailsType {
				ReceiptText = receiptFormatDetailsType.receiptText,
				Md5CheckSum = receiptFormatDetailsType.md5CheckSum,
				Version = receiptFormatDetailsType.version,
				LongLanguageCode = receiptFormatDetailsType.longLanguageCode,
				AdditionalLanguages = receiptFormatDetailsType.additionalLanguages?.ToList(),
				ResponseText = receiptFormatDetailsType.responseText,
				ErrorCode = receiptFormatDetailsType.errorCode,
				MimeType = receiptFormatDetailsType.mimeType,
				MimeData = receiptFormatDetailsType.mimeData?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DisclosureTextDetailsType ToDomain(SERVICE.DisclosureTextDetailsType disclosureTextDetailsType)
		{
			var domainModel = new DOMAIN.DisclosureTextDetailsType {
				Version = disclosureTextDetailsType.version,
				LongLanguageCode = disclosureTextDetailsType.longLanguageCode,
				DisclosureTextTag = disclosureTextDetailsType.disclosureTextTag,
				ResponseText = disclosureTextDetailsType.responseText,
				ErrorCode = disclosureTextDetailsType.errorCode,
				MimeType = disclosureTextDetailsType.mimeType,
				MimeData = disclosureTextDetailsType.mimeData?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.StoreHourInfo ToDomain(SERVICE.StoreHourInfo storeHourInfo)
		{
			var domainModel = new DOMAIN.StoreHourInfo {
				DayOfWeek = (DOMAIN.DayOfWeekType)storeHourInfo.dayOfWeek,
				OpenTime = storeHourInfo.openTimeSpecified == true ? (DateTime?)storeHourInfo.openTime : null,
				CloseTime = storeHourInfo.closeTimeSpecified == true ? (DateTime?)storeHourInfo.closeTime : null,
				Closed = storeHourInfo.closed,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.AgentInfo ToDomain(SERVICE.AgentInfo agentInfo)
		{
			var domainModel = new DOMAIN.AgentInfo {
				AgentName = agentInfo.agentName,
				Address = agentInfo.address,
				City = agentInfo.city,
				CountrySubdivisionCode = agentInfo.countrySubdivisionCode,
				ReceiveCapability = agentInfo.receiveCapabilitySpecified == true ? (bool?)agentInfo.receiveCapability : null,
				SendCapability = agentInfo.sendCapabilitySpecified == true ? (bool?)agentInfo.sendCapability : null,
				AgentPhone = agentInfo.agentPhone,
				StoreHours = agentInfo.storeHours?.Select(x => x.ConvertToDomain<SERVICE.StoreHourInfo, DOMAIN.StoreHourInfo>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerProfileIDInfo ToDomain(SERVICE.ConsumerProfileIDInfo consumerProfileIDInfo)
		{
			var domainModel = new DOMAIN.ConsumerProfileIDInfo {
				ConsumerProfileID = consumerProfileIDInfo.consumerProfileID,
				ConsumerProfileIDType = consumerProfileIDInfo.consumerProfileIDType,
				ConsumerProfileIDCreateDate = consumerProfileIDInfo.consumerProfileIDCreateDateSpecified == true ? (DateTime?)consumerProfileIDInfo.consumerProfileIDCreateDate : null,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillerLookupInfo ToDomain(SERVICE.BillerLookupInfo billerLookupInfo)
		{
			var domainModel = new DOMAIN.BillerLookupInfo {
				CurrentValues = billerLookupInfo.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiverLookupInfo ToDomain(SERVICE.ReceiverLookupInfo receiverLookupInfo)
		{
			var domainModel = new DOMAIN.ReceiverLookupInfo {
				CurrentValues = receiverLookupInfo.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SenderLookupInfo ToDomain(SERVICE.SenderLookupInfo senderLookupInfo)
		{
			var domainModel = new DOMAIN.SenderLookupInfo {
				CurrentValues = senderLookupInfo.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				ReceiverInfos = senderLookupInfo.receiverInfos?.Select(x => x.ConvertToDomain<SERVICE.ReceiverLookupInfo, DOMAIN.ReceiverLookupInfo>()).ToList(),
				BillerInfos = senderLookupInfo.billerInfos?.Select(x => x.ConvertToDomain<SERVICE.BillerLookupInfo, DOMAIN.BillerLookupInfo>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CompletionReceiptType ToDomain(SERVICE.CompletionReceiptType completionReceiptType)
		{
			var domainModel = new DOMAIN.CompletionReceiptType {
				ReceiptMimeType = completionReceiptType.receiptMimeType,
				CharsetEncoding = completionReceiptType.charsetEncoding,
				AgentReceiptMimeData = completionReceiptType.agentReceiptMimeData?.Select(x => x.ConvertToDomain<SERVICE.ReceiptSegmentType, DOMAIN.ReceiptSegmentType>()).ToList(),
				ConsumerReceipt1MimeData = completionReceiptType.consumerReceipt1MimeData?.Select(x => x.ConvertToDomain<SERVICE.ReceiptSegmentType, DOMAIN.ReceiptSegmentType>()).ToList(),
				ConsumerReceipt2MimeData = completionReceiptType.consumerReceipt2MimeData?.Select(x => x.ConvertToDomain<SERVICE.ReceiptSegmentType, DOMAIN.ReceiptSegmentType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiptSegmentType ToDomain(SERVICE.ReceiptSegmentType receiptSegmentType)
		{
			var domainModel = new DOMAIN.ReceiptSegmentType {
				Sequence = receiptSegmentType.sequenceSpecified == true ? (int?)receiptSegmentType.sequence : null,
				MimeData = receiptSegmentType.mimeData?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.TimeZoneCorrectionType ToDomain(SERVICE.TimeZoneCorrectionType timeZoneCorrectionType)
		{
			var domainModel = new DOMAIN.TimeZoneCorrectionType {
				TimeZoneId = timeZoneCorrectionType.timeZoneId,
				Offset = timeZoneCorrectionType.offsetSpecified == true ? (int?)timeZoneCorrectionType.offset : null,
				DstSavings = timeZoneCorrectionType.dstSavingsSpecified == true ? (int?)timeZoneCorrectionType.dstSavings : null,
				StartMode = timeZoneCorrectionType.startModeSpecified == true ? (int?)timeZoneCorrectionType.startMode : null,
				StartDay = timeZoneCorrectionType.startDaySpecified == true ? (int?)timeZoneCorrectionType.startDay : null,
				StartMonth = timeZoneCorrectionType.startMonthSpecified == true ? (int?)timeZoneCorrectionType.startMonth : null,
				StartDayOfWeek = timeZoneCorrectionType.startDayOfWeekSpecified == true ? (int?)timeZoneCorrectionType.startDayOfWeek : null,
				StartTime = timeZoneCorrectionType.startTimeSpecified == true ? (int?)timeZoneCorrectionType.startTime : null,
				StartTimeMode = timeZoneCorrectionType.startTimeModeSpecified == true ? (int?)timeZoneCorrectionType.startTimeMode : null,
				EndMode = timeZoneCorrectionType.endModeSpecified == true ? (int?)timeZoneCorrectionType.endMode : null,
				EndDay = timeZoneCorrectionType.endDaySpecified == true ? (int?)timeZoneCorrectionType.endDay : null,
				EndMonth = timeZoneCorrectionType.endMonthSpecified == true ? (int?)timeZoneCorrectionType.endMonth : null,
				EndDayOfWeek = timeZoneCorrectionType.endDayOfWeekSpecified == true ? (int?)timeZoneCorrectionType.endDayOfWeek : null,
				EndTime = timeZoneCorrectionType.endTimeSpecified == true ? (int?)timeZoneCorrectionType.endTime : null,
				EndTimeMode = timeZoneCorrectionType.endTimeModeSpecified == true ? (int?)timeZoneCorrectionType.endTimeMode : null,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiveAmountInfo ToDomain(SERVICE.ReceiveAmountInfo receiveAmountInfo)
		{
			var domainModel = new DOMAIN.ReceiveAmountInfo {
				ReceiveAmount = receiveAmountInfo.receiveAmountSpecified == true ? (decimal?)receiveAmountInfo.receiveAmount : null,
				ReceiveCurrency = receiveAmountInfo.receiveCurrency,
				ValidCurrencyIndicator = receiveAmountInfo.validCurrencyIndicator,
				PayoutCurrency = receiveAmountInfo.payoutCurrency,
				TotalReceiveFees = receiveAmountInfo.totalReceiveFeesSpecified == true ? (decimal?)receiveAmountInfo.totalReceiveFees : null,
				TotalReceiveTaxes = receiveAmountInfo.totalReceiveTaxesSpecified == true ? (decimal?)receiveAmountInfo.totalReceiveTaxes : null,
				TotalReceiveAmount = receiveAmountInfo.totalReceiveAmountSpecified == true ? (decimal?)receiveAmountInfo.totalReceiveAmount : null,
				ReceiveFeesAreEstimated = receiveAmountInfo.receiveFeesAreEstimated,
				ReceiveTaxesAreEstimated = receiveAmountInfo.receiveTaxesAreEstimated,
				DetailReceiveAmounts = receiveAmountInfo.detailReceiveAmounts?.Select(x => x.ConvertToDomain<SERVICE.AmountInfo, DOMAIN.AmountInfo>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillPaymentSummaryInfo ToDomain(SERVICE.BillPaymentSummaryInfo billPaymentSummaryInfo)
		{
			var domainModel = new DOMAIN.BillPaymentSummaryInfo {
				ProductVariant = (DOMAIN.ProductVariantType)billPaymentSummaryInfo.productVariant,
				FaceAmount = billPaymentSummaryInfo.faceAmount,
				FeeAmount = billPaymentSummaryInfo.feeAmount,
				TotalAmount = billPaymentSummaryInfo.totalAmount,
				AgentNumber = billPaymentSummaryInfo.agentNumber,
				AgentName = billPaymentSummaryInfo.agentName,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillPaymentDetailInfo ToDomain(SERVICE.BillPaymentDetailInfo billPaymentDetailInfo)
		{
			var domainModel = new DOMAIN.BillPaymentDetailInfo {
				ReferenceNumber = billPaymentDetailInfo.referenceNumber,
				ProductVariant = (DOMAIN.ProductVariantType)billPaymentDetailInfo.productVariant,
				FaceAmount = billPaymentDetailInfo.faceAmount,
				FeeAmount = billPaymentDetailInfo.feeAmount,
				TotalAmount = billPaymentDetailInfo.totalAmount,
				InfoFeeIndicator = billPaymentDetailInfo.infoFeeIndicatorSpecified == true ? (bool?)billPaymentDetailInfo.infoFeeIndicator : null,
				ProcessingFee = billPaymentDetailInfo.processingFeeSpecified == true ? (decimal?)billPaymentDetailInfo.processingFee : null,
				AgentNumber = billPaymentDetailInfo.agentNumber,
				PaymentType = (DOMAIN.PaymentType)billPaymentDetailInfo.paymentType,
				AgentName = billPaymentDetailInfo.agentName,
				Date = billPaymentDetailInfo.date,
				Status = (DOMAIN.TransactionStatusType)billPaymentDetailInfo.status,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillerInfo ToDomain(SERVICE.BillerInfo billerInfo)
		{
			var domainModel = new DOMAIN.BillerInfo {
				ReceiveAgentID = billerInfo.receiveAgentID,
				ReceiveCode = billerInfo.receiveCode,
				InternationalBankAccountNumber = billerInfo.internationalBankAccountNumber,
				BillerGroupID = billerInfo.billerGroupID,
				BillerGroupName = billerInfo.billerGroupName,
				BillerName = billerInfo.billerName,
				Address1 = billerInfo.address1,
				Address2 = billerInfo.address2,
				Address3 = billerInfo.address3,
				BillerCity = billerInfo.billerCity,
				BillerState = billerInfo.billerState,
				ServiceOfferingID = billerInfo.serviceOfferingID,
				ServiceOffering = billerInfo.serviceOffering,
				ServiceOfferingSecondary = billerInfo.serviceOfferingSecondary,
				ServiceOfferingShort = billerInfo.serviceOfferingShort,
				ServiceOfferingShortSecondary = billerInfo.serviceOfferingShortSecondary,
				IndustryID = billerInfo.industryID?.ToList(),
				ExpectedPostingTimeFrame = billerInfo.expectedPostingTimeFrame,
				ExpectedPostingTimeFrameSecondary = billerInfo.expectedPostingTimeFrameSecondary,
				BillerNotes = billerInfo.billerNotes,
				BillerNotesSecondary = billerInfo.billerNotesSecondary,
				SecondaryLang = billerInfo.secondaryLang,
				ProductVariant = (DOMAIN.ProductVariantType)billerInfo.productVariant,
				BillerCutoffTime = billerInfo.billerCutoffTime,
				BillerWebsite = billerInfo.billerWebsite,
				BillerPhoneNumber = billerInfo.billerPhoneNumber,
				MaskAccountNumber = billerInfo.maskAccountNumberSpecified == true ? (bool?)billerInfo.maskAccountNumber : null,
				NationalBillerFlag = billerInfo.nationalBillerFlagSpecified == true ? (bool?)billerInfo.nationalBillerFlag : null,
				UseStandardUBPFields = billerInfo.useStandardUBPFieldsSpecified == true ? (bool?)billerInfo.useStandardUBPFields : null,
				AcctNumberNumericOnly = billerInfo.acctNumberNumericOnlySpecified == true ? (bool?)billerInfo.acctNumberNumericOnly : null,
				SendFixedAmountFlag = billerInfo.sendFixedAmountFlagSpecified == true ? (bool?)billerInfo.sendFixedAmountFlag : null,
				CancelWarnFlag = billerInfo.cancelWarnFlagSpecified == true ? (bool?)billerInfo.cancelWarnFlag : null,
				RefundWarnFlag = billerInfo.refundWarnFlagSpecified == true ? (bool?)billerInfo.refundWarnFlag : null,
				DoubleAcctNumberEntryFlag = billerInfo.doubleAcctNumberEntryFlagSpecified == true ? (bool?)billerInfo.doubleAcctNumberEntryFlag : null,
				MinimumFeeAmt = billerInfo.minimumFeeAmtSpecified == true ? (decimal?)billerInfo.minimumFeeAmt : null,
				FeeType = billerInfo.feeTypeSpecified == true ? (DOMAIN.FeeType?)billerInfo.feeType : null,
				ConsolidatorLocationId = billerInfo.consolidatorLocationId,
				ConsolidatorName = billerInfo.consolidatorName,
				ClassOfTradeCode = billerInfo.classOfTradeCode,
				ExpeditedEligibleFlag = billerInfo.expeditedEligibleFlagSpecified == true ? (bool?)billerInfo.expeditedEligibleFlag : null,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PreCompletionReceiptType ToDomain(SERVICE.PreCompletionReceiptType preCompletionReceiptType)
		{
			var domainModel = new DOMAIN.PreCompletionReceiptType {
				ReceiptMimeType = preCompletionReceiptType.receiptMimeType,
				CharsetEncoding = preCompletionReceiptType.charsetEncoding,
				Disclosure1MimeData = preCompletionReceiptType.disclosure1MimeData?.Select(x => x.ConvertToDomain<SERVICE.ReceiptSegmentType, DOMAIN.ReceiptSegmentType>()).ToList(),
				Disclosure2MimeData = preCompletionReceiptType.disclosure2MimeData?.Select(x => x.ConvertToDomain<SERVICE.ReceiptSegmentType, DOMAIN.ReceiptSegmentType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ChildField ToDomain(SERVICE.ChildField childField)
		{
			var domainModel = new DOMAIN.ChildField {
				FieldValue = childField.fieldValue,
				Infos = childField.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.InfoBase ToDomain(SERVICE.InfoBase infoBase)
		{
			var domainModel = new DOMAIN.InfoBase {
				InfoKey = infoBase.infoKey,
				Label = infoBase.label,
				LabelStandAlone = infoBase.labelStandAlone,
				DisplayOrder = infoBase.displayOrderSpecified == true ? (int?)infoBase.displayOrder : null,
				HelpTextShort = infoBase.helpTextShort,
				HelpTextLong = infoBase.helpTextLong,
				Documentation = infoBase.documentation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FieldInfo ToDomain(SERVICE.FieldInfo fieldInfo)
		{
			var domainModel = new DOMAIN.FieldInfo {
				Display = fieldInfo.displaySpecified == true ? (bool?)fieldInfo.display : null,
				DataType = fieldInfo.dataTypeSpecified == true ? (DOMAIN.DataType?)fieldInfo.dataType : null,
				Enumeration = (fieldInfo.enumeration != null ? fieldInfo.enumeration.ConvertToDomain<SERVICE.EnumeratedTypeInfo, DOMAIN.EnumeratedTypeInfo>() : null),
				DisplayValue = fieldInfo.displayValue,
				InfoKey = fieldInfo.infoKey,
				Label = fieldInfo.label,
				LabelStandAlone = fieldInfo.labelStandAlone,
				DisplayOrder = fieldInfo.displayOrderSpecified == true ? (int?)fieldInfo.displayOrder : null,
				HelpTextShort = fieldInfo.helpTextShort,
				HelpTextLong = fieldInfo.helpTextLong,
				Documentation = fieldInfo.documentation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.EnumeratedTypeInfo ToDomain(SERVICE.EnumeratedTypeInfo enumeratedTypeInfo)
		{
			var domainModel = new DOMAIN.EnumeratedTypeInfo {
				Name = enumeratedTypeInfo.name,
				EnumeratedItems = enumeratedTypeInfo.enumeratedItems?.Select(x => x.ConvertToDomain<SERVICE.EnumeratedIdentifierInfo, DOMAIN.EnumeratedIdentifierInfo>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.EnumeratedIdentifierInfo ToDomain(SERVICE.EnumeratedIdentifierInfo enumeratedIdentifierInfo)
		{
			var domainModel = new DOMAIN.EnumeratedIdentifierInfo {
				Identifier = enumeratedIdentifierInfo.identifier,
				LabelShort = enumeratedIdentifierInfo.labelShort,
				Label = enumeratedIdentifierInfo.label,
				HelpTextShort = enumeratedIdentifierInfo.helpTextShort,
				HelpTextLong = enumeratedIdentifierInfo.helpTextLong,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FieldToCollectInfo ToDomain(SERVICE.FieldToCollectInfo fieldToCollectInfo)
		{
			var domainModel = new DOMAIN.FieldToCollectInfo {
				ReadOnly = fieldToCollectInfo.readOnlySpecified == true ? (bool?)fieldToCollectInfo.readOnly : null,
				Required = fieldToCollectInfo.requiredSpecified == true ? (bool?)fieldToCollectInfo.required : null,
				ChildFieldsKnown = fieldToCollectInfo.childFieldsKnownSpecified == true ? (bool?)fieldToCollectInfo.childFieldsKnown : null,
				FieldMin = fieldToCollectInfo.fieldMinSpecified == true ? (int?)fieldToCollectInfo.fieldMin : null,
				FieldMax = fieldToCollectInfo.fieldMaxSpecified == true ? (int?)fieldToCollectInfo.fieldMax : null,
				DefaultValue = fieldToCollectInfo.defaultValue,
				ValidationRegEx = fieldToCollectInfo.validationRegEx,
				ExampleFormat = fieldToCollectInfo.exampleFormat,
				ChildFields = fieldToCollectInfo.childFields?.Select(x => x.ConvertToDomain<SERVICE.ChildField, DOMAIN.ChildField>()).ToList(),
				LookupDataSource = fieldToCollectInfo.lookupDataSource,
				LookupKey = fieldToCollectInfo.lookupKey,
				Display = fieldToCollectInfo.displaySpecified == true ? (bool?)fieldToCollectInfo.display : null,
				DataType = fieldToCollectInfo.dataTypeSpecified == true ? (DOMAIN.DataType?)fieldToCollectInfo.dataType : null,
				Enumeration = (fieldToCollectInfo.enumeration != null ? fieldToCollectInfo.enumeration.ConvertToDomain<SERVICE.EnumeratedTypeInfo, DOMAIN.EnumeratedTypeInfo>() : null),
				DisplayValue = fieldToCollectInfo.displayValue,
				InfoKey = fieldToCollectInfo.infoKey,
				Label = fieldToCollectInfo.label,
				LabelStandAlone = fieldToCollectInfo.labelStandAlone,
				DisplayOrder = fieldToCollectInfo.displayOrderSpecified == true ? (int?)fieldToCollectInfo.displayOrder : null,
				HelpTextShort = fieldToCollectInfo.helpTextShort,
				HelpTextLong = fieldToCollectInfo.helpTextLong,
				Documentation = fieldToCollectInfo.documentation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CategoryInfo ToDomain(SERVICE.CategoryInfo categoryInfo)
		{
			var domainModel = new DOMAIN.CategoryInfo {
				Infos = categoryInfo.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				InfoKey = categoryInfo.infoKey,
				Label = categoryInfo.label,
				LabelStandAlone = categoryInfo.labelStandAlone,
				DisplayOrder = categoryInfo.displayOrderSpecified == true ? (int?)categoryInfo.displayOrder : null,
				HelpTextShort = categoryInfo.helpTextShort,
				HelpTextLong = categoryInfo.helpTextLong,
				Documentation = categoryInfo.documentation,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.Payload ToDomain(SERVICE.Payload payload)
		{
			var domainModel = new DOMAIN.Payload {
				DoCheckIn = payload.doCheckIn,
				TimeStamp = payload.timeStamp,
				Flags = payload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BusinessError ToDomain(SERVICE.BusinessError businessError)
		{
			var domainModel = new DOMAIN.BusinessError {
				ErrorCode = businessError.errorCode,
				Message = businessError.message,
				SubErrorCode = businessError.subErrorCode,
				DetailString = businessError.detailString,
				OffendingField = businessError.offendingField,
				ErrorCategory = businessError.errorCategory,
				MessageShort = businessError.messageShort,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.Response ToDomain(SERVICE.Response response)
		{
			var domainModel = new DOMAIN.Response {
				Errors = response.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.VersionManifestResponse ToDomain(SERVICE.VersionManifestResponse versionManifestResponse)
		{
			var domainModel = new DOMAIN.VersionManifestResponse {
				Payload = (versionManifestResponse.payload != null ? versionManifestResponse.payload.ConvertToDomain<SERVICE.VersionManifestResponsePayload, DOMAIN.VersionManifestResponsePayload>() : null),
				Errors = versionManifestResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.VersionManifestResponsePayload ToDomain(SERVICE.VersionManifestResponsePayload versionManifestResponsePayload)
		{
			var domainModel = new DOMAIN.VersionManifestResponsePayload {
				ManifestSize = versionManifestResponsePayload.manifestSize,
				ManifestURL = versionManifestResponsePayload.manifestURL,
				VersionID = versionManifestResponsePayload.versionID,
				UnitProfileID = versionManifestResponsePayload.unitProfileID,
				DoCheckIn = versionManifestResponsePayload.doCheckIn,
				TimeStamp = versionManifestResponsePayload.timeStamp,
				Flags = versionManifestResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.VariableReceiptInfoResponse ToDomain(SERVICE.VariableReceiptInfoResponse variableReceiptInfoResponse)
		{
			var domainModel = new DOMAIN.VariableReceiptInfoResponse {
				Payload = (variableReceiptInfoResponse.payload != null ? variableReceiptInfoResponse.payload.ConvertToDomain<SERVICE.VariableReceiptInfoResponsePayload, DOMAIN.VariableReceiptInfoResponsePayload>() : null),
				Errors = variableReceiptInfoResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.VariableReceiptInfoResponsePayload ToDomain(SERVICE.VariableReceiptInfoResponsePayload variableReceiptInfoResponsePayload)
		{
			var domainModel = new DOMAIN.VariableReceiptInfoResponsePayload {
				Version = variableReceiptInfoResponsePayload.version,
				ReceiptText = variableReceiptInfoResponsePayload.receiptText?.Select(x => x.ConvertToDomain<SERVICE.VariableReceiptTextInfo, DOMAIN.VariableReceiptTextInfo>()).ToList(),
				DoCheckIn = variableReceiptInfoResponsePayload.doCheckIn,
				TimeStamp = variableReceiptInfoResponsePayload.timeStamp,
				Flags = variableReceiptInfoResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.TranslationsResponse ToDomain(SERVICE.TranslationsResponse translationsResponse)
		{
			var domainModel = new DOMAIN.TranslationsResponse {
				Payload = (translationsResponse.payload != null ? translationsResponse.payload.ConvertToDomain<SERVICE.TranslationsResponsePayload, DOMAIN.TranslationsResponsePayload>() : null),
				Errors = translationsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.TranslationsResponsePayload ToDomain(SERVICE.TranslationsResponsePayload translationsResponsePayload)
		{
			var domainModel = new DOMAIN.TranslationsResponsePayload {
				TranslationsVersion = translationsResponsePayload.translationsVersion,
				CountryTranslations = translationsResponsePayload.countryTranslations?.Select(x => x.ConvertToDomain<SERVICE.CountryTranslationType, DOMAIN.CountryTranslationType>()).ToList(),
				DeliveryOptionTranslations = translationsResponsePayload.deliveryOptionTranslations?.Select(x => x.ConvertToDomain<SERVICE.DeliveryOptionTranslationType, DOMAIN.DeliveryOptionTranslationType>()).ToList(),
				CurrencyTranslations = translationsResponsePayload.currencyTranslations?.Select(x => x.ConvertToDomain<SERVICE.CurrencyTranslationType, DOMAIN.CurrencyTranslationType>()).ToList(),
				FqdoTextTranslations = translationsResponsePayload.fqdoTextTranslations?.Select(x => x.ConvertToDomain<SERVICE.FQDOTextTranslationType, DOMAIN.FQDOTextTranslationType>()).ToList(),
				IndustryTranslations = translationsResponsePayload.industryTranslations?.Select(x => x.ConvertToDomain<SERVICE.IndustryTranslationType, DOMAIN.IndustryTranslationType>()).ToList(),
				LoyaltyTranslations = translationsResponsePayload.loyaltyTranslations?.Select(x => x.ConvertToDomain<SERVICE.LoyaltyTranslationType, DOMAIN.LoyaltyTranslationType>()).ToList(),
				LoyaltyCardTypeTranslations = translationsResponsePayload.loyaltyCardTypeTranslations?.Select(x => x.ConvertToDomain<SERVICE.LoyaltyCardTypeTranslationType, DOMAIN.LoyaltyCardTypeTranslationType>()).ToList(),
				LoyaltyProgramTypeTranslations = translationsResponsePayload.loyaltyProgramTypeTranslations?.Select(x => x.ConvertToDomain<SERVICE.LoyaltyProgramTypeTranslationType, DOMAIN.LoyaltyProgramTypeTranslationType>()).ToList(),
				LanguageTranslations = translationsResponsePayload.languageTranslations?.Select(x => x.ConvertToDomain<SERVICE.LanguageTranslationType, DOMAIN.LanguageTranslationType>()).ToList(),
				DoCheckIn = translationsResponsePayload.doCheckIn,
				TimeStamp = translationsResponsePayload.timeStamp,
				Flags = translationsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.TransactionLookupResponse ToDomain(SERVICE.TransactionLookupResponse transactionLookupResponse)
		{
			var domainModel = new DOMAIN.TransactionLookupResponse {
				Payload = (transactionLookupResponse.payload != null ? transactionLookupResponse.payload.ConvertToDomain<SERVICE.TransactionLookupResponsePayload, DOMAIN.TransactionLookupResponsePayload>() : null),
				Errors = transactionLookupResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.TransactionLookupResponsePayload ToDomain(SERVICE.TransactionLookupResponsePayload transactionLookupResponsePayload)
		{
			var domainModel = new DOMAIN.TransactionLookupResponsePayload {
				GAFVersionNumber = transactionLookupResponsePayload.GAFVersionNumber,
				MgiSessionID = transactionLookupResponsePayload.mgiSessionID,
				TransactionStatus = (DOMAIN.TransactionStatusType)transactionLookupResponsePayload.transactionStatus,
				RedirectInfo = (transactionLookupResponsePayload.redirectInfo != null ? transactionLookupResponsePayload.redirectInfo.ConvertToDomain<SERVICE.RedirectInfo, DOMAIN.RedirectInfo>() : null),
				SendAmounts = (transactionLookupResponsePayload.sendAmounts != null ? transactionLookupResponsePayload.sendAmounts.ConvertToDomain<SERVICE.SendAmountInfo, DOMAIN.SendAmountInfo>() : null),
				ReceiveAmounts = (transactionLookupResponsePayload.receiveAmounts != null ? transactionLookupResponsePayload.receiveAmounts.ConvertToDomain<SERVICE.ReceiveAmountInfo, DOMAIN.ReceiveAmountInfo>() : null),
				PromotionInfos = transactionLookupResponsePayload.promotionInfos?.Select(x => x.ConvertToDomain<SERVICE.PromotionInfo, DOMAIN.PromotionInfo>()).ToList(),
				DisclosureTexts = transactionLookupResponsePayload.disclosureTexts?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				ReceiveFeeDisclosureTexts = transactionLookupResponsePayload.receiveFeeDisclosureTexts?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				ReceiveTaxDisclosureTexts = transactionLookupResponsePayload.receiveTaxDisclosureTexts?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				CurrentValues = transactionLookupResponsePayload.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				Infos = transactionLookupResponsePayload.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = transactionLookupResponsePayload.doCheckIn,
				TimeStamp = transactionLookupResponsePayload.timeStamp,
				Flags = transactionLookupResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SubagentsResponse ToDomain(SERVICE.SubagentsResponse subagentsResponse)
		{
			var domainModel = new DOMAIN.SubagentsResponse {
				Payload = (subagentsResponse.payload != null ? subagentsResponse.payload.ConvertToDomain<SERVICE.SubagentsResponsePayload, DOMAIN.SubagentsResponsePayload>() : null),
				Errors = subagentsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SubagentsResponsePayload ToDomain(SERVICE.SubagentsResponsePayload subagentsResponsePayload)
		{
			var domainModel = new DOMAIN.SubagentsResponsePayload {
				Subagents = subagentsResponsePayload.subagents?.Select(x => x.ConvertToDomain<SERVICE.SubagentInfo, DOMAIN.SubagentInfo>()).ToList(),
				DoCheckIn = subagentsResponsePayload.doCheckIn,
				TimeStamp = subagentsResponsePayload.timeStamp,
				Flags = subagentsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SendValidationResponse ToDomain(SERVICE.SendValidationResponse sendValidationResponse)
		{
			var domainModel = new DOMAIN.SendValidationResponse {
				Payload = (sendValidationResponse.payload != null ? sendValidationResponse.payload.ConvertToDomain<SERVICE.SendValidationResponsePayload, DOMAIN.SendValidationResponsePayload>() : null),
				Errors = sendValidationResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SendValidationResponsePayload ToDomain(SERVICE.SendValidationResponsePayload sendValidationResponsePayload)
		{
			var domainModel = new DOMAIN.SendValidationResponsePayload {
				MgiSessionID = sendValidationResponsePayload.mgiSessionID,
				ReadyForCommit = sendValidationResponsePayload.readyForCommit,
				GAFVersionNumber = sendValidationResponsePayload.GAFVersionNumber,
				Token = sendValidationResponsePayload.token,
				CustomerReceiveNumber = sendValidationResponsePayload.customerReceiveNumber,
				DisplayAccountID = sendValidationResponsePayload.displayAccountID,
				CustomerServiceMessage = sendValidationResponsePayload.customerServiceMessage,
				ReceiveAgentName = sendValidationResponsePayload.receiveAgentName,
				ReceiveAgentAddress = (sendValidationResponsePayload.receiveAgentAddress != null ? sendValidationResponsePayload.receiveAgentAddress.ConvertToDomain<SERVICE.AgentAddressType, DOMAIN.AgentAddressType>() : null),
				ReceiveAgentAbbreviation = sendValidationResponsePayload.receiveAgentAbbreviation,
				ExchangeRateApplied = sendValidationResponsePayload.exchangeRateAppliedSpecified == true ? (decimal?)sendValidationResponsePayload.exchangeRateApplied : null,
				SendAmounts = (sendValidationResponsePayload.sendAmounts != null ? sendValidationResponsePayload.sendAmounts.ConvertToDomain<SERVICE.SendAmountInfo, DOMAIN.SendAmountInfo>() : null),
				ReceiveAmounts = (sendValidationResponsePayload.receiveAmounts != null ? sendValidationResponsePayload.receiveAmounts.ConvertToDomain<SERVICE.ReceiveAmountInfo, DOMAIN.ReceiveAmountInfo>() : null),
				PromotionInfos = sendValidationResponsePayload.promotionInfos?.Select(x => x.ConvertToDomain<SERVICE.PromotionInfo, DOMAIN.PromotionInfo>()).ToList(),
				FieldsToCollect = sendValidationResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				Receipts = (sendValidationResponsePayload.receipts != null ? sendValidationResponsePayload.receipts.ConvertToDomain<SERVICE.PreCompletionReceiptType, DOMAIN.PreCompletionReceiptType>() : null),
				ReceiptInfo = (sendValidationResponsePayload.receiptInfo != null ? sendValidationResponsePayload.receiptInfo.ConvertToDomain<SERVICE.SendValidationResponsePayloadReceiptInfo, DOMAIN.SendValidationResponsePayloadReceiptInfo>() : null),
				DoCheckIn = sendValidationResponsePayload.doCheckIn,
				TimeStamp = sendValidationResponsePayload.timeStamp,
				Flags = sendValidationResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SendValidationResponsePayloadReceiptInfo ToDomain(SERVICE.SendValidationResponsePayloadReceiptInfo sendValidationResponsePayloadReceiptInfo)
		{
			var domainModel = new DOMAIN.SendValidationResponsePayloadReceiptInfo {
				ReceiveFeeDisclosureText = sendValidationResponsePayloadReceiptInfo.receiveFeeDisclosureTextSpecified == true ? (bool?)sendValidationResponsePayloadReceiptInfo.receiveFeeDisclosureText : null,
				ReceiveTaxDisclosureText = sendValidationResponsePayloadReceiptInfo.receiveTaxDisclosureTextSpecified == true ? (bool?)sendValidationResponsePayloadReceiptInfo.receiveTaxDisclosureText : null,
				PromotionalMessages = sendValidationResponsePayloadReceiptInfo.promotionalMessages?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				DisclosureTexts = sendValidationResponsePayloadReceiptInfo.disclosureTexts?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SendReversalValidationResponse ToDomain(SERVICE.SendReversalValidationResponse sendReversalValidationResponse)
		{
			var domainModel = new DOMAIN.SendReversalValidationResponse {
				Payload = (sendReversalValidationResponse.payload != null ? sendReversalValidationResponse.payload.ConvertToDomain<SERVICE.SendReversalValidationResponsePayload, DOMAIN.SendReversalValidationResponsePayload>() : null),
				Errors = sendReversalValidationResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SendReversalValidationResponsePayload ToDomain(SERVICE.SendReversalValidationResponsePayload sendReversalValidationResponsePayload)
		{
			var domainModel = new DOMAIN.SendReversalValidationResponsePayload {
				MgiSessionID = sendReversalValidationResponsePayload.mgiSessionID,
				ReadyForCommit = sendReversalValidationResponsePayload.readyForCommit,
				GAFVersionNumber = sendReversalValidationResponsePayload.GAFVersionNumber,
				SendAmount = sendReversalValidationResponsePayload.sendAmountSpecified == true ? (decimal?)sendReversalValidationResponsePayload.sendAmount : null,
				SendCurrency = sendReversalValidationResponsePayload.sendCurrency,
				TotalSendFees = sendReversalValidationResponsePayload.totalSendFeesSpecified == true ? (decimal?)sendReversalValidationResponsePayload.totalSendFees : null,
				TotalSendTaxes = sendReversalValidationResponsePayload.totalSendTaxesSpecified == true ? (decimal?)sendReversalValidationResponsePayload.totalSendTaxes : null,
				TotalReversalAmount = sendReversalValidationResponsePayload.totalReversalAmountSpecified == true ? (decimal?)sendReversalValidationResponsePayload.totalReversalAmount : null,
				DetailSendAmounts = sendReversalValidationResponsePayload.detailSendAmounts?.Select(x => x.ConvertToDomain<SERVICE.AmountInfo, DOMAIN.AmountInfo>()).ToList(),
				ReversalType = sendReversalValidationResponsePayload.reversalTypeSpecified == true ? (DOMAIN.SendReversalType?)sendReversalValidationResponsePayload.reversalType : null,
				FieldsToCollect = sendReversalValidationResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				Receipts = (sendReversalValidationResponsePayload.receipts != null ? sendReversalValidationResponsePayload.receipts.ConvertToDomain<SERVICE.PreCompletionReceiptType, DOMAIN.PreCompletionReceiptType>() : null),
				ReceiptInfo = (sendReversalValidationResponsePayload.receiptInfo != null ? sendReversalValidationResponsePayload.receiptInfo.ConvertToDomain<SERVICE.SendReversalValidationResponsePayloadReceiptInfo, DOMAIN.SendReversalValidationResponsePayloadReceiptInfo>() : null),
				DoCheckIn = sendReversalValidationResponsePayload.doCheckIn,
				TimeStamp = sendReversalValidationResponsePayload.timeStamp,
				Flags = sendReversalValidationResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SendReversalValidationResponsePayloadReceiptInfo ToDomain(SERVICE.SendReversalValidationResponsePayloadReceiptInfo sendReversalValidationResponsePayloadReceiptInfo)
		{
			var domainModel = new DOMAIN.SendReversalValidationResponsePayloadReceiptInfo {
				DisclosureTexts = sendReversalValidationResponsePayloadReceiptInfo.disclosureTexts?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SearchStagedTransactionsResponse ToDomain(SERVICE.SearchStagedTransactionsResponse searchStagedTransactionsResponse)
		{
			var domainModel = new DOMAIN.SearchStagedTransactionsResponse {
				Payload = (searchStagedTransactionsResponse.payload != null ? searchStagedTransactionsResponse.payload.ConvertToDomain<SERVICE.SearchStagedTransactionsResponsePayload, DOMAIN.SearchStagedTransactionsResponsePayload>() : null),
				Errors = searchStagedTransactionsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SearchStagedTransactionsResponsePayload ToDomain(SERVICE.SearchStagedTransactionsResponsePayload searchStagedTransactionsResponsePayload)
		{
			var domainModel = new DOMAIN.SearchStagedTransactionsResponsePayload {
				StagedTransactionInfos = searchStagedTransactionsResponsePayload.stagedTransactionInfos?.Select(x => x.ConvertToDomain<SERVICE.StagedTransactionInfo, DOMAIN.StagedTransactionInfo>()).ToList(),
				DoCheckIn = searchStagedTransactionsResponsePayload.doCheckIn,
				TimeStamp = searchStagedTransactionsResponsePayload.timeStamp,
				Flags = searchStagedTransactionsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SearchConsumerProfilesResponse ToDomain(SERVICE.SearchConsumerProfilesResponse searchConsumerProfilesResponse)
		{
			var domainModel = new DOMAIN.SearchConsumerProfilesResponse {
				Payload = (searchConsumerProfilesResponse.payload != null ? searchConsumerProfilesResponse.payload.ConvertToDomain<SERVICE.SearchConsumerProfilesResponsePayload, DOMAIN.SearchConsumerProfilesResponsePayload>() : null),
				Errors = searchConsumerProfilesResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SearchConsumerProfilesResponsePayload ToDomain(SERVICE.SearchConsumerProfilesResponsePayload searchConsumerProfilesResponsePayload)
		{
			var domainModel = new DOMAIN.SearchConsumerProfilesResponsePayload {
				RequestGAFVersionNumber = searchConsumerProfilesResponsePayload.requestGAFVersionNumber,
				ResponseGAFVersionNumber = searchConsumerProfilesResponsePayload.responseGAFVersionNumber,
				ConsumerProfileSearchInfos = searchConsumerProfilesResponsePayload.consumerProfileSearchInfos?.Select(x => x.ConvertToDomain<SERVICE.ConsumerProfileSearchInfo, DOMAIN.ConsumerProfileSearchInfo>()).ToList(),
				Infos = searchConsumerProfilesResponsePayload.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				FieldsToCollect = searchConsumerProfilesResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = searchConsumerProfilesResponsePayload.doCheckIn,
				TimeStamp = searchConsumerProfilesResponsePayload.timeStamp,
				Flags = searchConsumerProfilesResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveTransactionDocumentResponse ToDomain(SERVICE.SaveTransactionDocumentResponse saveTransactionDocumentResponse)
		{
			var domainModel = new DOMAIN.SaveTransactionDocumentResponse {
				Payload = (saveTransactionDocumentResponse.payload != null ? saveTransactionDocumentResponse.payload.ConvertToDomain<SERVICE.SaveTransactionDocumentResponsePayload, DOMAIN.SaveTransactionDocumentResponsePayload>() : null),
				Errors = saveTransactionDocumentResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveTransactionDocumentResponsePayload ToDomain(SERVICE.SaveTransactionDocumentResponsePayload saveTransactionDocumentResponsePayload)
		{
			var domainModel = new DOMAIN.SaveTransactionDocumentResponsePayload {
				DocumentId = saveTransactionDocumentResponsePayload.documentId,
				DoCheckIn = saveTransactionDocumentResponsePayload.doCheckIn,
				TimeStamp = saveTransactionDocumentResponsePayload.timeStamp,
				Flags = saveTransactionDocumentResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveSubagentsResponse ToDomain(SERVICE.SaveSubagentsResponse saveSubagentsResponse)
		{
			var domainModel = new DOMAIN.SaveSubagentsResponse {
				Payload = (saveSubagentsResponse.payload != null ? saveSubagentsResponse.payload.ConvertToDomain<SERVICE.SaveSubagentsResponsePayload, DOMAIN.SaveSubagentsResponsePayload>() : null),
				Errors = saveSubagentsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveSubagentsResponsePayload ToDomain(SERVICE.SaveSubagentsResponsePayload saveSubagentsResponsePayload)
		{
			var domainModel = new DOMAIN.SaveSubagentsResponsePayload {
				DoCheckIn = saveSubagentsResponsePayload.doCheckIn,
				TimeStamp = saveSubagentsResponsePayload.timeStamp,
				Flags = saveSubagentsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveProfileResponse ToDomain(SERVICE.SaveProfileResponse saveProfileResponse)
		{
			var domainModel = new DOMAIN.SaveProfileResponse {
				Payload = (saveProfileResponse.payload != null ? saveProfileResponse.payload.ConvertToDomain<SERVICE.SaveProfileResponsePayload, DOMAIN.SaveProfileResponsePayload>() : null),
				Errors = saveProfileResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveProfileResponsePayload ToDomain(SERVICE.SaveProfileResponsePayload saveProfileResponsePayload)
		{
			var domainModel = new DOMAIN.SaveProfileResponsePayload {
				DoCheckIn = saveProfileResponsePayload.doCheckIn,
				TimeStamp = saveProfileResponsePayload.timeStamp,
				Flags = saveProfileResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveDebugDataResponse ToDomain(SERVICE.SaveDebugDataResponse saveDebugDataResponse)
		{
			var domainModel = new DOMAIN.SaveDebugDataResponse {
				Payload = (saveDebugDataResponse.payload != null ? saveDebugDataResponse.payload.ConvertToDomain<SERVICE.SaveDebugDataResponsePayload, DOMAIN.SaveDebugDataResponsePayload>() : null),
				Errors = saveDebugDataResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveDebugDataResponsePayload ToDomain(SERVICE.SaveDebugDataResponsePayload saveDebugDataResponsePayload)
		{
			var domainModel = new DOMAIN.SaveDebugDataResponsePayload {
				DoCheckIn = saveDebugDataResponsePayload.doCheckIn,
				TimeStamp = saveDebugDataResponsePayload.timeStamp,
				Flags = saveDebugDataResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveConsumerProfileDocumentResponse ToDomain(SERVICE.SaveConsumerProfileDocumentResponse saveConsumerProfileDocumentResponse)
		{
			var domainModel = new DOMAIN.SaveConsumerProfileDocumentResponse {
				Payload = (saveConsumerProfileDocumentResponse.payload != null ? saveConsumerProfileDocumentResponse.payload.ConvertToDomain<SERVICE.SaveConsumerProfileDocumentResponsePayload, DOMAIN.SaveConsumerProfileDocumentResponsePayload>() : null),
				Errors = saveConsumerProfileDocumentResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveConsumerProfileDocumentResponsePayload ToDomain(SERVICE.SaveConsumerProfileDocumentResponsePayload saveConsumerProfileDocumentResponsePayload)
		{
			var domainModel = new DOMAIN.SaveConsumerProfileDocumentResponsePayload {
				ImageReferenceId = saveConsumerProfileDocumentResponsePayload.imageReferenceId,
				DoCheckIn = saveConsumerProfileDocumentResponsePayload.doCheckIn,
				TimeStamp = saveConsumerProfileDocumentResponsePayload.timeStamp,
				Flags = saveConsumerProfileDocumentResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SavePersonalIDImageResponse ToDomain(SERVICE.SavePersonalIDImageResponse savePersonalIDImageResponse)
		{
			var domainModel = new DOMAIN.SavePersonalIDImageResponse {
				Payload = (savePersonalIDImageResponse.payload != null ? savePersonalIDImageResponse.payload.ConvertToDomain<SERVICE.SavePersonalIDImageResponsePayload, DOMAIN.SavePersonalIDImageResponsePayload>() : null),
				Errors = savePersonalIDImageResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SavePersonalIDImageResponsePayload ToDomain(SERVICE.SavePersonalIDImageResponsePayload savePersonalIDImageResponsePayload)
		{
			var domainModel = new DOMAIN.SavePersonalIDImageResponsePayload {
				ImageReferenceId = savePersonalIDImageResponsePayload.imageReferenceId,
				DoCheckIn = savePersonalIDImageResponsePayload.doCheckIn,
				TimeStamp = savePersonalIDImageResponsePayload.timeStamp,
				Flags = savePersonalIDImageResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveConsumerProfileImageResponse ToDomain(SERVICE.SaveConsumerProfileImageResponse saveConsumerProfileImageResponse)
		{
			var domainModel = new DOMAIN.SaveConsumerProfileImageResponse {
				Payload = (saveConsumerProfileImageResponse.payload != null ? saveConsumerProfileImageResponse.payload.ConvertToDomain<SERVICE.SaveConsumerProfileImageResponsePayload, DOMAIN.SaveConsumerProfileImageResponsePayload>() : null),
				Errors = saveConsumerProfileImageResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveConsumerProfileImageResponsePayload ToDomain(SERVICE.SaveConsumerProfileImageResponsePayload saveConsumerProfileImageResponsePayload)
		{
			var domainModel = new DOMAIN.SaveConsumerProfileImageResponsePayload {
				MgiSessionID = saveConsumerProfileImageResponsePayload.mgiSessionID,
				GAFVersionNumber = saveConsumerProfileImageResponsePayload.GAFVersionNumber,
				ImageReferenceID = saveConsumerProfileImageResponsePayload.ImageReferenceID,
				DoCheckIn = saveConsumerProfileImageResponsePayload.doCheckIn,
				TimeStamp = saveConsumerProfileImageResponsePayload.timeStamp,
				Flags = saveConsumerProfileImageResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.RegisterHardTokenResponse ToDomain(SERVICE.RegisterHardTokenResponse registerHardTokenResponse)
		{
			var domainModel = new DOMAIN.RegisterHardTokenResponse {
				Payload = (registerHardTokenResponse.payload != null ? registerHardTokenResponse.payload.ConvertToDomain<SERVICE.RegisterHardTokenResponsePayload, DOMAIN.RegisterHardTokenResponsePayload>() : null),
				Errors = registerHardTokenResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.RegisterHardTokenResponsePayload ToDomain(SERVICE.RegisterHardTokenResponsePayload registerHardTokenResponsePayload)
		{
			var domainModel = new DOMAIN.RegisterHardTokenResponsePayload {
				RegistrationSuccessful = registerHardTokenResponsePayload.registrationSuccessful,
				DoCheckIn = registerHardTokenResponsePayload.doCheckIn,
				TimeStamp = registerHardTokenResponsePayload.timeStamp,
				Flags = registerHardTokenResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiveValidationResponse ToDomain(SERVICE.ReceiveValidationResponse receiveValidationResponse)
		{
			var domainModel = new DOMAIN.ReceiveValidationResponse {
				Payload = (receiveValidationResponse.payload != null ? receiveValidationResponse.payload.ConvertToDomain<SERVICE.ReceiveValidationResponsePayload, DOMAIN.ReceiveValidationResponsePayload>() : null),
				Errors = receiveValidationResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiveValidationResponsePayload ToDomain(SERVICE.ReceiveValidationResponsePayload receiveValidationResponsePayload)
		{
			var domainModel = new DOMAIN.ReceiveValidationResponsePayload {
				MgiSessionID = receiveValidationResponsePayload.mgiSessionID,
				Token = receiveValidationResponsePayload.token,
				ReadyForCommit = receiveValidationResponsePayload.readyForCommit,
				GAFVersionNumber = receiveValidationResponsePayload.GAFVersionNumber,
				FieldsToCollect = receiveValidationResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				Receipts = (receiveValidationResponsePayload.receipts != null ? receiveValidationResponsePayload.receipts.ConvertToDomain<SERVICE.PreCompletionReceiptType, DOMAIN.PreCompletionReceiptType>() : null),
				ReceiptInfo = (receiveValidationResponsePayload.receiptInfo != null ? receiveValidationResponsePayload.receiptInfo.ConvertToDomain<SERVICE.ReceiveValidationResponsePayloadReceiptInfo, DOMAIN.ReceiveValidationResponsePayloadReceiptInfo>() : null),
				DoCheckIn = receiveValidationResponsePayload.doCheckIn,
				TimeStamp = receiveValidationResponsePayload.timeStamp,
				Flags = receiveValidationResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiveValidationResponsePayloadReceiptInfo ToDomain(SERVICE.ReceiveValidationResponsePayloadReceiptInfo receiveValidationResponsePayloadReceiptInfo)
		{
			var domainModel = new DOMAIN.ReceiveValidationResponsePayloadReceiptInfo {
				DisclosureTexts = receiveValidationResponsePayloadReceiptInfo.disclosureTexts?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiveReversalValidationResponse ToDomain(SERVICE.ReceiveReversalValidationResponse receiveReversalValidationResponse)
		{
			var domainModel = new DOMAIN.ReceiveReversalValidationResponse {
				Payload = (receiveReversalValidationResponse.payload != null ? receiveReversalValidationResponse.payload.ConvertToDomain<SERVICE.ReceiveReversalValidationResponsePayload, DOMAIN.ReceiveReversalValidationResponsePayload>() : null),
				Errors = receiveReversalValidationResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiveReversalValidationResponsePayload ToDomain(SERVICE.ReceiveReversalValidationResponsePayload receiveReversalValidationResponsePayload)
		{
			var domainModel = new DOMAIN.ReceiveReversalValidationResponsePayload {
				MgiSessionID = receiveReversalValidationResponsePayload.mgiSessionID,
				ReadyForCommit = receiveReversalValidationResponsePayload.readyForCommit,
				GAFVersionNumber = receiveReversalValidationResponsePayload.GAFVersionNumber,
				FieldsToCollect = receiveReversalValidationResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				Receipts = (receiveReversalValidationResponsePayload.receipts != null ? receiveReversalValidationResponsePayload.receipts.ConvertToDomain<SERVICE.PreCompletionReceiptType, DOMAIN.PreCompletionReceiptType>() : null),
				ReceiptInfo = (receiveReversalValidationResponsePayload.receiptInfo != null ? receiveReversalValidationResponsePayload.receiptInfo.ConvertToDomain<SERVICE.ReceiveReversalValidationResponsePayloadReceiptInfo, DOMAIN.ReceiveReversalValidationResponsePayloadReceiptInfo>() : null),
				DoCheckIn = receiveReversalValidationResponsePayload.doCheckIn,
				TimeStamp = receiveReversalValidationResponsePayload.timeStamp,
				Flags = receiveReversalValidationResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiveReversalValidationResponsePayloadReceiptInfo ToDomain(SERVICE.ReceiveReversalValidationResponsePayloadReceiptInfo receiveReversalValidationResponsePayloadReceiptInfo)
		{
			var domainModel = new DOMAIN.ReceiveReversalValidationResponsePayloadReceiptInfo {
				DisclosureTexts = receiveReversalValidationResponsePayloadReceiptInfo.disclosureTexts?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiptsFormatDetailsResponse ToDomain(SERVICE.ReceiptsFormatDetailsResponse receiptsFormatDetailsResponse)
		{
			var domainModel = new DOMAIN.ReceiptsFormatDetailsResponse {
				Payload = (receiptsFormatDetailsResponse.payload != null ? receiptsFormatDetailsResponse.payload.ConvertToDomain<SERVICE.ReceiptsFormatDetailsResponsePayload, DOMAIN.ReceiptsFormatDetailsResponsePayload>() : null),
				Errors = receiptsFormatDetailsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiptsFormatDetailsResponsePayload ToDomain(SERVICE.ReceiptsFormatDetailsResponsePayload receiptsFormatDetailsResponsePayload)
		{
			var domainModel = new DOMAIN.ReceiptsFormatDetailsResponsePayload {
				ReceiptFormatDetails = receiptsFormatDetailsResponsePayload.receiptFormatDetails?.Select(x => x.ConvertToDomain<SERVICE.ReceiptFormatDetailsType, DOMAIN.ReceiptFormatDetailsType>()).ToList(),
				DoCheckIn = receiptsFormatDetailsResponsePayload.doCheckIn,
				TimeStamp = receiptsFormatDetailsResponsePayload.timeStamp,
				Flags = receiptsFormatDetailsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PromotionLookupByCodeResponse ToDomain(SERVICE.PromotionLookupByCodeResponse promotionLookupByCodeResponse)
		{
			var domainModel = new DOMAIN.PromotionLookupByCodeResponse {
				Payload = (promotionLookupByCodeResponse.payload != null ? promotionLookupByCodeResponse.payload.ConvertToDomain<SERVICE.PromotionLookupByCodeResponsePayload, DOMAIN.PromotionLookupByCodeResponsePayload>() : null),
				Errors = promotionLookupByCodeResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PromotionLookupByCodeResponsePayload ToDomain(SERVICE.PromotionLookupByCodeResponsePayload promotionLookupByCodeResponsePayload)
		{
			var domainModel = new DOMAIN.PromotionLookupByCodeResponsePayload {
				PromotionLookupInfo = (promotionLookupByCodeResponsePayload.promotionLookupInfo != null ? promotionLookupByCodeResponsePayload.promotionLookupInfo.ConvertToDomain<SERVICE.PromotionLookupInfo, DOMAIN.PromotionLookupInfo>() : null),
				DoCheckIn = promotionLookupByCodeResponsePayload.doCheckIn,
				TimeStamp = promotionLookupByCodeResponsePayload.timeStamp,
				Flags = promotionLookupByCodeResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ProfileResponse ToDomain(SERVICE.ProfileResponse profileResponse)
		{
			var domainModel = new DOMAIN.ProfileResponse {
				Payload = (profileResponse.payload != null ? profileResponse.payload.ConvertToDomain<SERVICE.ProfileResponsePayload, DOMAIN.ProfileResponsePayload>() : null),
				Errors = profileResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ProfileResponsePayload ToDomain(SERVICE.ProfileResponsePayload profileResponsePayload)
		{
			var domainModel = new DOMAIN.ProfileResponsePayload {
				ProfileItem = profileResponsePayload.profileItem?.Select(x => x.ConvertToDomain<SERVICE.ProfileItemType, DOMAIN.ProfileItemType>()).ToList(),
				ProductProfileItem = profileResponsePayload.productProfileItem?.Select(x => x.ConvertToDomain<SERVICE.ProductProfileItemType, DOMAIN.ProductProfileItemType>()).ToList(),
				EmployeeProfileItem = profileResponsePayload.employeeProfileItem?.Select(x => x.ConvertToDomain<SERVICE.EmployeeProfileItemType, DOMAIN.EmployeeProfileItemType>()).ToList(),
				DoCheckIn = profileResponsePayload.doCheckIn,
				TimeStamp = profileResponsePayload.timeStamp,
				Flags = profileResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ProfileItemType ToDomain(SERVICE.ProfileItemType profileItemType)
		{
			var domainModel = new DOMAIN.ProfileItemType {
				Index = profileItemType.index,
				Key = profileItemType.key,
				Value = profileItemType.value,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ProductProfileItemType ToDomain(SERVICE.ProductProfileItemType productProfileItemType)
		{
			var domainModel = new DOMAIN.ProductProfileItemType {
				Index = productProfileItemType.index,
				Key = productProfileItemType.key,
				Value = productProfileItemType.value,
				ProductID = productProfileItemType.productID,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.EmployeeProfileItemType ToDomain(SERVICE.EmployeeProfileItemType employeeProfileItemType)
		{
			var domainModel = new DOMAIN.EmployeeProfileItemType {
				EmployeeID = employeeProfileItemType.employeeID,
				Key = employeeProfileItemType.key,
				Index = employeeProfileItemType.indexSpecified == true ? (int?)employeeProfileItemType.index : null,
				Value = employeeProfileItemType.value,
				ProductID = employeeProfileItemType.productID,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ProfileChangeResponse ToDomain(SERVICE.ProfileChangeResponse profileChangeResponse)
		{
			var domainModel = new DOMAIN.ProfileChangeResponse {
				Payload = (profileChangeResponse.payload != null ? profileChangeResponse.payload.ConvertToDomain<SERVICE.ProfileChangeResponsePayload, DOMAIN.ProfileChangeResponsePayload>() : null),
				Errors = profileChangeResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ProfileChangeResponsePayload ToDomain(SERVICE.ProfileChangeResponsePayload profileChangeResponsePayload)
		{
			var domainModel = new DOMAIN.ProfileChangeResponsePayload {
				DoCheckIn = profileChangeResponsePayload.doCheckIn,
				TimeStamp = profileChangeResponsePayload.timeStamp,
				Flags = profileChangeResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.OpenOTPLoginResponse ToDomain(SERVICE.OpenOTPLoginResponse openOTPLoginResponse)
		{
			var domainModel = new DOMAIN.OpenOTPLoginResponse {
				Payload = (openOTPLoginResponse.payload != null ? openOTPLoginResponse.payload.ConvertToDomain<SERVICE.OpenOTPLoginResponsePayload, DOMAIN.OpenOTPLoginResponsePayload>() : null),
				Errors = openOTPLoginResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.OpenOTPLoginResponsePayload ToDomain(SERVICE.OpenOTPLoginResponsePayload openOTPLoginResponsePayload)
		{
			var domainModel = new DOMAIN.OpenOTPLoginResponsePayload {
				LoginSuccessful = openOTPLoginResponsePayload.loginSuccessful,
				DoCheckIn = openOTPLoginResponsePayload.doCheckIn,
				TimeStamp = openOTPLoginResponsePayload.timeStamp,
				Flags = openOTPLoginResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyOrderTotalResponse ToDomain(SERVICE.MoneyOrderTotalResponse moneyOrderTotalResponse)
		{
			var domainModel = new DOMAIN.MoneyOrderTotalResponse {
				Payload = (moneyOrderTotalResponse.payload != null ? moneyOrderTotalResponse.payload.ConvertToDomain<SERVICE.MoneyOrderTotalResponsePayload, DOMAIN.MoneyOrderTotalResponsePayload>() : null),
				Errors = moneyOrderTotalResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyOrderTotalResponsePayload ToDomain(SERVICE.MoneyOrderTotalResponsePayload moneyOrderTotalResponsePayload)
		{
			var domainModel = new DOMAIN.MoneyOrderTotalResponsePayload {
				BatchID = moneyOrderTotalResponsePayload.batchID,
				DoCheckIn = moneyOrderTotalResponsePayload.doCheckIn,
				TimeStamp = moneyOrderTotalResponsePayload.timeStamp,
				Flags = moneyOrderTotalResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendSummaryReportResponse ToDomain(SERVICE.MoneyGramSendSummaryReportResponse moneyGramSendSummaryReportResponse)
		{
			var domainModel = new DOMAIN.MoneyGramSendSummaryReportResponse {
				Payload = (moneyGramSendSummaryReportResponse.payload != null ? moneyGramSendSummaryReportResponse.payload.ConvertToDomain<SERVICE.MoneyGramSendSummaryReportResponsePayload, DOMAIN.MoneyGramSendSummaryReportResponsePayload>() : null),
				Errors = moneyGramSendSummaryReportResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendSummaryReportResponsePayload ToDomain(SERVICE.MoneyGramSendSummaryReportResponsePayload moneyGramSendSummaryReportResponsePayload)
		{
			var domainModel = new DOMAIN.MoneyGramSendSummaryReportResponsePayload {
				ReportInfo = moneyGramSendSummaryReportResponsePayload.reportInfo?.Select(x => x.ConvertToDomain<SERVICE.MoneyGramSendSummaryInfo, DOMAIN.MoneyGramSendSummaryInfo>()).ToList(),
				DoCheckIn = moneyGramSendSummaryReportResponsePayload.doCheckIn,
				TimeStamp = moneyGramSendSummaryReportResponsePayload.timeStamp,
				Flags = moneyGramSendSummaryReportResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendDetailReportWithTaxResponse ToDomain(SERVICE.MoneyGramSendDetailReportWithTaxResponse moneyGramSendDetailReportWithTaxResponse)
		{
			var domainModel = new DOMAIN.MoneyGramSendDetailReportWithTaxResponse {
				Payload = (moneyGramSendDetailReportWithTaxResponse.payload != null ? moneyGramSendDetailReportWithTaxResponse.payload.ConvertToDomain<SERVICE.MoneyGramSendDetailReportWithTaxResponsePayload, DOMAIN.MoneyGramSendDetailReportWithTaxResponsePayload>() : null),
				Errors = moneyGramSendDetailReportWithTaxResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendDetailReportWithTaxResponsePayload ToDomain(SERVICE.MoneyGramSendDetailReportWithTaxResponsePayload moneyGramSendDetailReportWithTaxResponsePayload)
		{
			var domainModel = new DOMAIN.MoneyGramSendDetailReportWithTaxResponsePayload {
				ReportInfo = moneyGramSendDetailReportWithTaxResponsePayload.reportInfo?.Select(x => x.ConvertToDomain<SERVICE.MoneyGramSendWithTaxDetailInfo, DOMAIN.MoneyGramSendWithTaxDetailInfo>()).ToList(),
				DoCheckIn = moneyGramSendDetailReportWithTaxResponsePayload.doCheckIn,
				TimeStamp = moneyGramSendDetailReportWithTaxResponsePayload.timeStamp,
				Flags = moneyGramSendDetailReportWithTaxResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendDetailReportResponse ToDomain(SERVICE.MoneyGramSendDetailReportResponse moneyGramSendDetailReportResponse)
		{
			var domainModel = new DOMAIN.MoneyGramSendDetailReportResponse {
				Payload = (moneyGramSendDetailReportResponse.payload != null ? moneyGramSendDetailReportResponse.payload.ConvertToDomain<SERVICE.MoneyGramSendDetailReportResponsePayload, DOMAIN.MoneyGramSendDetailReportResponsePayload>() : null),
				Errors = moneyGramSendDetailReportResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendDetailReportResponsePayload ToDomain(SERVICE.MoneyGramSendDetailReportResponsePayload moneyGramSendDetailReportResponsePayload)
		{
			var domainModel = new DOMAIN.MoneyGramSendDetailReportResponsePayload {
				ReportInfo = moneyGramSendDetailReportResponsePayload.reportInfo?.Select(x => x.ConvertToDomain<SERVICE.MoneyGramSendDetailInfo, DOMAIN.MoneyGramSendDetailInfo>()).ToList(),
				DoCheckIn = moneyGramSendDetailReportResponsePayload.doCheckIn,
				TimeStamp = moneyGramSendDetailReportResponsePayload.timeStamp,
				Flags = moneyGramSendDetailReportResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramReceiveSummaryReportResponse ToDomain(SERVICE.MoneyGramReceiveSummaryReportResponse moneyGramReceiveSummaryReportResponse)
		{
			var domainModel = new DOMAIN.MoneyGramReceiveSummaryReportResponse {
				Payload = (moneyGramReceiveSummaryReportResponse.payload != null ? moneyGramReceiveSummaryReportResponse.payload.ConvertToDomain<SERVICE.MoneyGramReceiveSummaryReportResponsePayload, DOMAIN.MoneyGramReceiveSummaryReportResponsePayload>() : null),
				Errors = moneyGramReceiveSummaryReportResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramReceiveSummaryReportResponsePayload ToDomain(SERVICE.MoneyGramReceiveSummaryReportResponsePayload moneyGramReceiveSummaryReportResponsePayload)
		{
			var domainModel = new DOMAIN.MoneyGramReceiveSummaryReportResponsePayload {
				ReportInfo = moneyGramReceiveSummaryReportResponsePayload.reportInfo?.Select(x => x.ConvertToDomain<SERVICE.MoneyGramReceiveSummaryInfo, DOMAIN.MoneyGramReceiveSummaryInfo>()).ToList(),
				DoCheckIn = moneyGramReceiveSummaryReportResponsePayload.doCheckIn,
				TimeStamp = moneyGramReceiveSummaryReportResponsePayload.timeStamp,
				Flags = moneyGramReceiveSummaryReportResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramReceiveDetailReportResponse ToDomain(SERVICE.MoneyGramReceiveDetailReportResponse moneyGramReceiveDetailReportResponse)
		{
			var domainModel = new DOMAIN.MoneyGramReceiveDetailReportResponse {
				Payload = (moneyGramReceiveDetailReportResponse.payload != null ? moneyGramReceiveDetailReportResponse.payload.ConvertToDomain<SERVICE.MoneyGramReceiveDetailReportResponsePayload, DOMAIN.MoneyGramReceiveDetailReportResponsePayload>() : null),
				Errors = moneyGramReceiveDetailReportResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramReceiveDetailReportResponsePayload ToDomain(SERVICE.MoneyGramReceiveDetailReportResponsePayload moneyGramReceiveDetailReportResponsePayload)
		{
			var domainModel = new DOMAIN.MoneyGramReceiveDetailReportResponsePayload {
				ReportInfo = moneyGramReceiveDetailReportResponsePayload.reportInfo?.Select(x => x.ConvertToDomain<SERVICE.MoneyGramReceiveDetailInfo, DOMAIN.MoneyGramReceiveDetailInfo>()).ToList(),
				DoCheckIn = moneyGramReceiveDetailReportResponsePayload.doCheckIn,
				TimeStamp = moneyGramReceiveDetailReportResponsePayload.timeStamp,
				Flags = moneyGramReceiveDetailReportResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.InjectedInstructionResponse ToDomain(SERVICE.InjectedInstructionResponse injectedInstructionResponse)
		{
			var domainModel = new DOMAIN.InjectedInstructionResponse {
				Payload = (injectedInstructionResponse.payload != null ? injectedInstructionResponse.payload.ConvertToDomain<SERVICE.InjectedInstructionResponsePayload, DOMAIN.InjectedInstructionResponsePayload>() : null),
				Errors = injectedInstructionResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.InjectedInstructionResponsePayload ToDomain(SERVICE.InjectedInstructionResponsePayload injectedInstructionResponsePayload)
		{
			var domainModel = new DOMAIN.InjectedInstructionResponsePayload {
				DoCheckIn = injectedInstructionResponsePayload.doCheckIn,
				TimeStamp = injectedInstructionResponsePayload.timeStamp,
				Flags = injectedInstructionResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.InitialSetupResponse ToDomain(SERVICE.InitialSetupResponse initialSetupResponse)
		{
			var domainModel = new DOMAIN.InitialSetupResponse {
				Payload = (initialSetupResponse.payload != null ? initialSetupResponse.payload.ConvertToDomain<SERVICE.InitialSetupResponsePayload, DOMAIN.InitialSetupResponsePayload>() : null),
				Errors = initialSetupResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.InitialSetupResponsePayload ToDomain(SERVICE.InitialSetupResponsePayload initialSetupResponsePayload)
		{
			var domainModel = new DOMAIN.InitialSetupResponsePayload {
				Token = initialSetupResponsePayload.token,
				UnitProfileID = initialSetupResponsePayload.unitProfileID,
				DoCheckIn = initialSetupResponsePayload.doCheckIn,
				TimeStamp = initialSetupResponsePayload.timeStamp,
				Flags = initialSetupResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.IndustryResponse ToDomain(SERVICE.IndustryResponse industryResponse)
		{
			var domainModel = new DOMAIN.IndustryResponse {
				Payload = (industryResponse.payload != null ? industryResponse.payload.ConvertToDomain<SERVICE.IndustryResponsePayload, DOMAIN.IndustryResponsePayload>() : null),
				Errors = industryResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.IndustryResponsePayload ToDomain(SERVICE.IndustryResponsePayload industryResponsePayload)
		{
			var domainModel = new DOMAIN.IndustryResponsePayload {
				IndustryInfoList = industryResponsePayload.industryInfoList?.Select(x => x.ConvertToDomain<SERVICE.IndustryInfo, DOMAIN.IndustryInfo>()).ToList(),
				DoCheckIn = industryResponsePayload.doCheckIn,
				TimeStamp = industryResponsePayload.timeStamp,
				Flags = industryResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetUCPByConsumerAttributesResponse ToDomain(SERVICE.GetUCPByConsumerAttributesResponse getUCPByConsumerAttributesResponse)
		{
			var domainModel = new DOMAIN.GetUCPByConsumerAttributesResponse {
				Payload = (getUCPByConsumerAttributesResponse.payload != null ? getUCPByConsumerAttributesResponse.payload.ConvertToDomain<SERVICE.GetUCPByConsumerAttributesResponsePayload, DOMAIN.GetUCPByConsumerAttributesResponsePayload>() : null),
				Errors = getUCPByConsumerAttributesResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetUCPByConsumerAttributesResponsePayload ToDomain(SERVICE.GetUCPByConsumerAttributesResponsePayload getUCPByConsumerAttributesResponsePayload)
		{
			var domainModel = new DOMAIN.GetUCPByConsumerAttributesResponsePayload {
				ConsumerProfile = (getUCPByConsumerAttributesResponsePayload.consumerProfile != null ? getUCPByConsumerAttributesResponsePayload.consumerProfile.ConvertToDomain<SERVICE.UCPResponseProfileType, DOMAIN.UCPResponseProfileType>() : null),
				DoCheckIn = getUCPByConsumerAttributesResponsePayload.doCheckIn,
				TimeStamp = getUCPByConsumerAttributesResponsePayload.timeStamp,
				Flags = getUCPByConsumerAttributesResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetServiceOptionsResponse ToDomain(SERVICE.GetServiceOptionsResponse getServiceOptionsResponse)
		{
			var domainModel = new DOMAIN.GetServiceOptionsResponse {
				Payload = (getServiceOptionsResponse.payload != null ? getServiceOptionsResponse.payload.ConvertToDomain<SERVICE.GetServiceOptionsResponsePayload, DOMAIN.GetServiceOptionsResponsePayload>() : null),
				Errors = getServiceOptionsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetServiceOptionsResponsePayload ToDomain(SERVICE.GetServiceOptionsResponsePayload getServiceOptionsResponsePayload)
		{
			var domainModel = new DOMAIN.GetServiceOptionsResponsePayload {
				DestinationCountryInfos = getServiceOptionsResponsePayload.destinationCountryInfos?.Select(x => x.ConvertToDomain<SERVICE.DestinationCountryInfo, DOMAIN.DestinationCountryInfo>()).ToList(),
				DoCheckIn = getServiceOptionsResponsePayload.doCheckIn,
				TimeStamp = getServiceOptionsResponsePayload.timeStamp,
				Flags = getServiceOptionsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetReceiptForReprintResponse ToDomain(SERVICE.GetReceiptForReprintResponse getReceiptForReprintResponse)
		{
			var domainModel = new DOMAIN.GetReceiptForReprintResponse {
				Payload = (getReceiptForReprintResponse.payload != null ? getReceiptForReprintResponse.payload.ConvertToDomain<SERVICE.GetReceiptForReprintResponsePayload, DOMAIN.GetReceiptForReprintResponsePayload>() : null),
				Errors = getReceiptForReprintResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetReceiptForReprintResponsePayload ToDomain(SERVICE.GetReceiptForReprintResponsePayload getReceiptForReprintResponsePayload)
		{
			var domainModel = new DOMAIN.GetReceiptForReprintResponsePayload {
				ReceiptMimeType = getReceiptForReprintResponsePayload.receiptMimeType,
				AgentReceiptMimeData = getReceiptForReprintResponsePayload.agentReceiptMimeData?.ToList(),
				ConsumerReceipt1MimeData = getReceiptForReprintResponsePayload.consumerReceipt1MimeData?.ToList(),
				ConsumerReceipt2MimeData = getReceiptForReprintResponsePayload.consumerReceipt2MimeData?.ToList(),
				DoCheckIn = getReceiptForReprintResponsePayload.doCheckIn,
				TimeStamp = getReceiptForReprintResponsePayload.timeStamp,
				Flags = getReceiptForReprintResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetProfileSenderResponse ToDomain(SERVICE.GetProfileSenderResponse getProfileSenderResponse)
		{
			var domainModel = new DOMAIN.GetProfileSenderResponse {
				Payload = (getProfileSenderResponse.payload != null ? getProfileSenderResponse.payload.ConvertToDomain<SERVICE.GetProfileSenderResponsePayload, DOMAIN.GetProfileSenderResponsePayload>() : null),
				Errors = getProfileSenderResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetProfileSenderResponsePayload ToDomain(SERVICE.GetProfileSenderResponsePayload getProfileSenderResponsePayload)
		{
			var domainModel = new DOMAIN.GetProfileSenderResponsePayload {
				MgiSessionID = getProfileSenderResponsePayload.mgiSessionID,
				GAFVersionNumber = getProfileSenderResponsePayload.GAFVersionNumber,
				CurrentValues = getProfileSenderResponsePayload.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				Infos = getProfileSenderResponsePayload.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				Receivers = getProfileSenderResponsePayload.receivers?.Select(x => x?.Select(y => y.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToArray()).ToList(),
				Billers = getProfileSenderResponsePayload.billers?.Select(x => x?.Select(y => y.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToArray()).ToList(),
				DoCheckIn = getProfileSenderResponsePayload.doCheckIn,
				TimeStamp = getProfileSenderResponsePayload.timeStamp,
				Flags = getProfileSenderResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetProfileReceiverResponse ToDomain(SERVICE.GetProfileReceiverResponse getProfileReceiverResponse)
		{
			var domainModel = new DOMAIN.GetProfileReceiverResponse {
				Payload = (getProfileReceiverResponse.payload != null ? getProfileReceiverResponse.payload.ConvertToDomain<SERVICE.GetProfileReceiverResponsePayload, DOMAIN.GetProfileReceiverResponsePayload>() : null),
				Errors = getProfileReceiverResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetProfileReceiverResponsePayload ToDomain(SERVICE.GetProfileReceiverResponsePayload getProfileReceiverResponsePayload)
		{
			var domainModel = new DOMAIN.GetProfileReceiverResponsePayload {
				MgiSessionID = getProfileReceiverResponsePayload.mgiSessionID,
				GAFVersionNumber = getProfileReceiverResponsePayload.GAFVersionNumber,
				CurrentValues = getProfileReceiverResponsePayload.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				Infos = getProfileReceiverResponsePayload.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = getProfileReceiverResponsePayload.doCheckIn,
				TimeStamp = getProfileReceiverResponsePayload.timeStamp,
				Flags = getProfileReceiverResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetProfileConsumerResponse ToDomain(SERVICE.GetProfileConsumerResponse getProfileConsumerResponse)
		{
			var domainModel = new DOMAIN.GetProfileConsumerResponse {
				Payload = (getProfileConsumerResponse.payload != null ? getProfileConsumerResponse.payload.ConvertToDomain<SERVICE.GetProfileConsumerResponsePayload, DOMAIN.GetProfileConsumerResponsePayload>() : null),
				Errors = getProfileConsumerResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetProfileConsumerResponsePayload ToDomain(SERVICE.GetProfileConsumerResponsePayload getProfileConsumerResponsePayload)
		{
			var domainModel = new DOMAIN.GetProfileConsumerResponsePayload {
				MgiSessionID = getProfileConsumerResponsePayload.mgiSessionID,
				GAFVersionNumber = getProfileConsumerResponsePayload.GAFVersionNumber,
				CurrentValues = getProfileConsumerResponsePayload.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				Infos = getProfileConsumerResponsePayload.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = getProfileConsumerResponsePayload.doCheckIn,
				TimeStamp = getProfileConsumerResponsePayload.timeStamp,
				Flags = getProfileConsumerResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetConsumerProfileDocumentResponse ToDomain(SERVICE.GetConsumerProfileDocumentResponse getConsumerProfileDocumentResponse)
		{
			var domainModel = new DOMAIN.GetConsumerProfileDocumentResponse {
				Payload = (getConsumerProfileDocumentResponse.payload != null ? getConsumerProfileDocumentResponse.payload.ConvertToDomain<SERVICE.GetConsumerProfileDocumentResponsePayload, DOMAIN.GetConsumerProfileDocumentResponsePayload>() : null),
				Errors = getConsumerProfileDocumentResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetConsumerProfileDocumentResponsePayload ToDomain(SERVICE.GetConsumerProfileDocumentResponsePayload getConsumerProfileDocumentResponsePayload)
		{
			var domainModel = new DOMAIN.GetConsumerProfileDocumentResponsePayload {
				MimeType = getConsumerProfileDocumentResponsePayload.mimeType,
				ImageItems = getConsumerProfileDocumentResponsePayload.imageItems?.Select(x => x.ConvertToDomain<SERVICE.ImageItemType, DOMAIN.ImageItemType>()).ToList(),
				DoCheckIn = getConsumerProfileDocumentResponsePayload.doCheckIn,
				TimeStamp = getConsumerProfileDocumentResponsePayload.timeStamp,
				Flags = getConsumerProfileDocumentResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetPersonalIDImageResponse ToDomain(SERVICE.GetPersonalIDImageResponse getPersonalIDImageResponse)
		{
			var domainModel = new DOMAIN.GetPersonalIDImageResponse {
				Payload = (getPersonalIDImageResponse.payload != null ? getPersonalIDImageResponse.payload.ConvertToDomain<SERVICE.GetPersonalIDImageResponsePayload, DOMAIN.GetPersonalIDImageResponsePayload>() : null),
				Errors = getPersonalIDImageResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetPersonalIDImageResponsePayload ToDomain(SERVICE.GetPersonalIDImageResponsePayload getPersonalIDImageResponsePayload)
		{
			var domainModel = new DOMAIN.GetPersonalIDImageResponsePayload {
				MimeType = getPersonalIDImageResponsePayload.mimeType,
				ImageItems = getPersonalIDImageResponsePayload.imageItems?.Select(x => x.ConvertToDomain<SERVICE.ImageItemType, DOMAIN.ImageItemType>()).ToList(),
				DoCheckIn = getPersonalIDImageResponsePayload.doCheckIn,
				TimeStamp = getPersonalIDImageResponsePayload.timeStamp,
				Flags = getPersonalIDImageResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetEnumerationsResponse ToDomain(SERVICE.GetEnumerationsResponse getEnumerationsResponse)
		{
			var domainModel = new DOMAIN.GetEnumerationsResponse {
				Payload = (getEnumerationsResponse.payload != null ? getEnumerationsResponse.payload.ConvertToDomain<SERVICE.GetEnumerationsResponsePayload, DOMAIN.GetEnumerationsResponsePayload>() : null),
				Errors = getEnumerationsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetEnumerationsResponsePayload ToDomain(SERVICE.GetEnumerationsResponsePayload getEnumerationsResponsePayload)
		{
			var domainModel = new DOMAIN.GetEnumerationsResponsePayload {
				Version = getEnumerationsResponsePayload.version,
				Enumerations = getEnumerationsResponsePayload.enumerations?.Select(x => x.ConvertToDomain<SERVICE.EnumeratedTypeInfo, DOMAIN.EnumeratedTypeInfo>()).ToList(),
				DoCheckIn = getEnumerationsResponsePayload.doCheckIn,
				TimeStamp = getEnumerationsResponsePayload.timeStamp,
				Flags = getEnumerationsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetDepositInformationResponse ToDomain(SERVICE.GetDepositInformationResponse getDepositInformationResponse)
		{
			var domainModel = new DOMAIN.GetDepositInformationResponse {
				Payload = (getDepositInformationResponse.payload != null ? getDepositInformationResponse.payload.ConvertToDomain<SERVICE.GetDepositInformationResponsePayload, DOMAIN.GetDepositInformationResponsePayload>() : null),
				Errors = getDepositInformationResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetDepositInformationResponsePayload ToDomain(SERVICE.GetDepositInformationResponsePayload getDepositInformationResponsePayload)
		{
			var domainModel = new DOMAIN.GetDepositInformationResponsePayload {
				StartingARBalance = getDepositInformationResponsePayload.startingARBalance,
				DepositAndProofTotalAmount = getDepositInformationResponsePayload.depositAndProofTotalAmount,
				OutstandingTransactionTotalAmount = getDepositInformationResponsePayload.outstandingTransactionTotalAmount,
				CurrentCreditLimit = getDepositInformationResponsePayload.currentCreditLimit,
				OutstandingBalance = getDepositInformationResponsePayload.outstandingBalance,
				AvailableCredit = getDepositInformationResponsePayload.availableCredit,
				DepositAndProofInfo = getDepositInformationResponsePayload.depositAndProofInfo?.Select(x => x.ConvertToDomain<SERVICE.DepositAndProofInfo, DOMAIN.DepositAndProofInfo>()).ToList(),
				PartnerCredit = (getDepositInformationResponsePayload.partnerCredit != null ? getDepositInformationResponsePayload.partnerCredit.ConvertToDomain<SERVICE.PartnerCreditType, DOMAIN.PartnerCreditType>() : null),
				DoCheckIn = getDepositInformationResponsePayload.doCheckIn,
				TimeStamp = getDepositInformationResponsePayload.timeStamp,
				Flags = getDepositInformationResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetDepositBankListResponse ToDomain(SERVICE.GetDepositBankListResponse getDepositBankListResponse)
		{
			var domainModel = new DOMAIN.GetDepositBankListResponse {
				Payload = (getDepositBankListResponse.payload != null ? getDepositBankListResponse.payload.ConvertToDomain<SERVICE.GetDepositBankListResponsePayload, DOMAIN.GetDepositBankListResponsePayload>() : null),
				Errors = getDepositBankListResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetDepositBankListResponsePayload ToDomain(SERVICE.GetDepositBankListResponsePayload getDepositBankListResponsePayload)
		{
			var domainModel = new DOMAIN.GetDepositBankListResponsePayload {
				Bank = getDepositBankListResponsePayload.bank?.Select(x => x.ConvertToDomain<SERVICE.BankInfo, DOMAIN.BankInfo>()).ToList(),
				DoCheckIn = getDepositBankListResponsePayload.doCheckIn,
				TimeStamp = getDepositBankListResponsePayload.timeStamp,
				Flags = getDepositBankListResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetDebugDataResponse ToDomain(SERVICE.GetDebugDataResponse getDebugDataResponse)
		{
			var domainModel = new DOMAIN.GetDebugDataResponse {
				Payload = (getDebugDataResponse.payload != null ? getDebugDataResponse.payload.ConvertToDomain<SERVICE.GetDebugDataResponsePayload, DOMAIN.GetDebugDataResponsePayload>() : null),
				Errors = getDebugDataResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetDebugDataResponsePayload ToDomain(SERVICE.GetDebugDataResponsePayload getDebugDataResponsePayload)
		{
			var domainModel = new DOMAIN.GetDebugDataResponsePayload {
				EndOfLog = getDebugDataResponsePayload.endOfLog,
				CollectionEndTimestamp = getDebugDataResponsePayload.collectionEndTimestamp,
				Length = getDebugDataResponsePayload.length,
				SequenceNumber = getDebugDataResponsePayload.sequenceNumber,
				DebugData = getDebugDataResponsePayload.debugData,
				DoCheckIn = getDebugDataResponsePayload.doCheckIn,
				TimeStamp = getDebugDataResponsePayload.timeStamp,
				Flags = getDebugDataResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetCurrencyInfoResponse ToDomain(SERVICE.GetCurrencyInfoResponse getCurrencyInfoResponse)
		{
			var domainModel = new DOMAIN.GetCurrencyInfoResponse {
				Payload = (getCurrencyInfoResponse.payload != null ? getCurrencyInfoResponse.payload.ConvertToDomain<SERVICE.GetCurrencyInfoResponsePayload, DOMAIN.GetCurrencyInfoResponsePayload>() : null),
				Errors = getCurrencyInfoResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetCurrencyInfoResponsePayload ToDomain(SERVICE.GetCurrencyInfoResponsePayload getCurrencyInfoResponsePayload)
		{
			var domainModel = new DOMAIN.GetCurrencyInfoResponsePayload {
				Version = getCurrencyInfoResponsePayload.version,
				CurrencyInfos = getCurrencyInfoResponsePayload.currencyInfos?.Select(x => x.ConvertToDomain<SERVICE.CurrencyInfo, DOMAIN.CurrencyInfo>()).ToList(),
				DoCheckIn = getCurrencyInfoResponsePayload.doCheckIn,
				TimeStamp = getCurrencyInfoResponsePayload.timeStamp,
				Flags = getCurrencyInfoResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetCountrySubdivisionResponse ToDomain(SERVICE.GetCountrySubdivisionResponse getCountrySubdivisionResponse)
		{
			var domainModel = new DOMAIN.GetCountrySubdivisionResponse {
				Payload = (getCountrySubdivisionResponse.payload != null ? getCountrySubdivisionResponse.payload.ConvertToDomain<SERVICE.GetCountrySubdivisionResponsePayload, DOMAIN.GetCountrySubdivisionResponsePayload>() : null),
				Errors = getCountrySubdivisionResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetCountrySubdivisionResponsePayload ToDomain(SERVICE.GetCountrySubdivisionResponsePayload getCountrySubdivisionResponsePayload)
		{
			var domainModel = new DOMAIN.GetCountrySubdivisionResponsePayload {
				Version = getCountrySubdivisionResponsePayload.version,
				CountrySubdivisionInfos = getCountrySubdivisionResponsePayload.countrySubdivisionInfos?.Select(x => x.ConvertToDomain<SERVICE.CountrySubdivisionInfo, DOMAIN.CountrySubdivisionInfo>()).ToList(),
				DoCheckIn = getCountrySubdivisionResponsePayload.doCheckIn,
				TimeStamp = getCountrySubdivisionResponsePayload.timeStamp,
				Flags = getCountrySubdivisionResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetCountryInfoResponse ToDomain(SERVICE.GetCountryInfoResponse getCountryInfoResponse)
		{
			var domainModel = new DOMAIN.GetCountryInfoResponse {
				Payload = (getCountryInfoResponse.payload != null ? getCountryInfoResponse.payload.ConvertToDomain<SERVICE.GetCountryInfoResponsePayload, DOMAIN.GetCountryInfoResponsePayload>() : null),
				Errors = getCountryInfoResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetCountryInfoResponsePayload ToDomain(SERVICE.GetCountryInfoResponsePayload getCountryInfoResponsePayload)
		{
			var domainModel = new DOMAIN.GetCountryInfoResponsePayload {
				Version = getCountryInfoResponsePayload.version,
				CountryInfos = getCountryInfoResponsePayload.countryInfos?.Select(x => x.ConvertToDomain<SERVICE.CountryInfo, DOMAIN.CountryInfo>()).ToList(),
				DoCheckIn = getCountryInfoResponsePayload.doCheckIn,
				TimeStamp = getCountryInfoResponsePayload.timeStamp,
				Flags = getCountryInfoResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetConsumerProfileTransactionHistoryResponse ToDomain(SERVICE.GetConsumerProfileTransactionHistoryResponse getConsumerProfileTransactionHistoryResponse)
		{
			var domainModel = new DOMAIN.GetConsumerProfileTransactionHistoryResponse {
				Payload = (getConsumerProfileTransactionHistoryResponse.payload != null ? getConsumerProfileTransactionHistoryResponse.payload.ConvertToDomain<SERVICE.GetConsumerProfileTransactionHistoryResponsePayload, DOMAIN.GetConsumerProfileTransactionHistoryResponsePayload>() : null),
				Errors = getConsumerProfileTransactionHistoryResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetConsumerProfileTransactionHistoryResponsePayload ToDomain(SERVICE.GetConsumerProfileTransactionHistoryResponsePayload getConsumerProfileTransactionHistoryResponsePayload)
		{
			var domainModel = new DOMAIN.GetConsumerProfileTransactionHistoryResponsePayload {
				MgiSessionID = getConsumerProfileTransactionHistoryResponsePayload.mgiSessionID,
				GAFVersionNumber = getConsumerProfileTransactionHistoryResponsePayload.GAFVersionNumber,
				NumberOfRowsFound = getConsumerProfileTransactionHistoryResponsePayload.numberOfRowsFound,
				Transactions = getConsumerProfileTransactionHistoryResponsePayload.transactions?.Select(x => x.ConvertToDomain<SERVICE.ConsumerProfileTransactionHistoryType, DOMAIN.ConsumerProfileTransactionHistoryType>()).ToList(),
				Infos = getConsumerProfileTransactionHistoryResponsePayload.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = getConsumerProfileTransactionHistoryResponsePayload.doCheckIn,
				TimeStamp = getConsumerProfileTransactionHistoryResponsePayload.timeStamp,
				Flags = getConsumerProfileTransactionHistoryResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetBroadcastMessagesResponse ToDomain(SERVICE.GetBroadcastMessagesResponse getBroadcastMessagesResponse)
		{
			var domainModel = new DOMAIN.GetBroadcastMessagesResponse {
				Payload = (getBroadcastMessagesResponse.payload != null ? getBroadcastMessagesResponse.payload.ConvertToDomain<SERVICE.GetBroadcastMessagesResponsePayload, DOMAIN.GetBroadcastMessagesResponsePayload>() : null),
				Errors = getBroadcastMessagesResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetBroadcastMessagesResponsePayload ToDomain(SERVICE.GetBroadcastMessagesResponsePayload getBroadcastMessagesResponsePayload)
		{
			var domainModel = new DOMAIN.GetBroadcastMessagesResponsePayload {
				Status = getBroadcastMessagesResponsePayload.status,
				MessageInfos = getBroadcastMessagesResponsePayload.messageInfos?.Select(x => x.ConvertToDomain<SERVICE.MessageInfo, DOMAIN.MessageInfo>()).ToList(),
				DoCheckIn = getBroadcastMessagesResponsePayload.doCheckIn,
				TimeStamp = getBroadcastMessagesResponsePayload.timeStamp,
				Flags = getBroadcastMessagesResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MessageInfo ToDomain(SERVICE.MessageInfo messageInfo)
		{
			var domainModel = new DOMAIN.MessageInfo {
				MessageId = messageInfo.messageIdSpecified == true ? (int?)messageInfo.messageId : null,
				MessageVersion = messageInfo.messageVersionSpecified == true ? (int?)messageInfo.messageVersion : null,
				MsgLanguageCode = messageInfo.msgLanguageCode,
				StartDate = messageInfo.startDate,
				ExpiryDate = messageInfo.expiryDate,
				SubjectMimeData = messageInfo.subjectMimeData,
				ContentMimeData = messageInfo.contentMimeData,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetBankDetailsResponse ToDomain(SERVICE.GetBankDetailsResponse getBankDetailsResponse)
		{
			var domainModel = new DOMAIN.GetBankDetailsResponse {
				Payload = (getBankDetailsResponse.payload != null ? getBankDetailsResponse.payload.ConvertToDomain<SERVICE.GetBankDetailsResponsePayload, DOMAIN.GetBankDetailsResponsePayload>() : null),
				Errors = getBankDetailsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetBankDetailsResponsePayload ToDomain(SERVICE.GetBankDetailsResponsePayload getBankDetailsResponsePayload)
		{
			var domainModel = new DOMAIN.GetBankDetailsResponsePayload {
				CurrentValues = getBankDetailsResponsePayload.currentValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				Infos = getBankDetailsResponsePayload.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = getBankDetailsResponsePayload.doCheckIn,
				TimeStamp = getBankDetailsResponsePayload.timeStamp,
				Flags = getBankDetailsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetBankDetailsByLevelResponse ToDomain(SERVICE.GetBankDetailsByLevelResponse getBankDetailsByLevelResponse)
		{
			var domainModel = new DOMAIN.GetBankDetailsByLevelResponse {
				Payload = (getBankDetailsByLevelResponse.payload != null ? getBankDetailsByLevelResponse.payload.ConvertToDomain<SERVICE.GetBankDetailsByLevelResponsePayload, DOMAIN.GetBankDetailsByLevelResponsePayload>() : null),
				Errors = getBankDetailsByLevelResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetBankDetailsByLevelResponsePayload ToDomain(SERVICE.GetBankDetailsByLevelResponsePayload getBankDetailsByLevelResponsePayload)
		{
			var domainModel = new DOMAIN.GetBankDetailsByLevelResponsePayload {
				HierarchyLevelNumber = getBankDetailsByLevelResponsePayload.hierarchyLevelNumber,
				HierarchyLevelLabel = getBankDetailsByLevelResponsePayload.hierarchyLevelLabel,
				HierarchyLevelInfos = getBankDetailsByLevelResponsePayload.hierarchyLevelInfos?.Select(x => x.ConvertToDomain<SERVICE.HierarchyLevelInfo, DOMAIN.HierarchyLevelInfo>()).ToList(),
				DoCheckIn = getBankDetailsByLevelResponsePayload.doCheckIn,
				TimeStamp = getBankDetailsByLevelResponsePayload.timeStamp,
				Flags = getBankDetailsByLevelResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetAllFieldsResponse ToDomain(SERVICE.GetAllFieldsResponse getAllFieldsResponse)
		{
			var domainModel = new DOMAIN.GetAllFieldsResponse {
				Payload = (getAllFieldsResponse.payload != null ? getAllFieldsResponse.payload.ConvertToDomain<SERVICE.GetAllFieldsResponsePayload, DOMAIN.GetAllFieldsResponsePayload>() : null),
				Errors = getAllFieldsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetAllFieldsResponsePayload ToDomain(SERVICE.GetAllFieldsResponsePayload getAllFieldsResponsePayload)
		{
			var domainModel = new DOMAIN.GetAllFieldsResponsePayload {
				Version = getAllFieldsResponsePayload.version,
				Infos = getAllFieldsResponsePayload.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = getAllFieldsResponsePayload.doCheckIn,
				TimeStamp = getAllFieldsResponsePayload.timeStamp,
				Flags = getAllFieldsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetAllErrorsResponse ToDomain(SERVICE.GetAllErrorsResponse getAllErrorsResponse)
		{
			var domainModel = new DOMAIN.GetAllErrorsResponse {
				Payload = (getAllErrorsResponse.payload != null ? getAllErrorsResponse.payload.ConvertToDomain<SERVICE.GetAllErrorsResponsePayload, DOMAIN.GetAllErrorsResponsePayload>() : null),
				Errors = getAllErrorsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetAllErrorsResponsePayload ToDomain(SERVICE.GetAllErrorsResponsePayload getAllErrorsResponsePayload)
		{
			var domainModel = new DOMAIN.GetAllErrorsResponsePayload {
				Version = getAllErrorsResponsePayload.version,
				DefinedErrors = getAllErrorsResponsePayload.definedErrors?.Select(x => x.ConvertToDomain<SERVICE.GenericBusinessError, DOMAIN.GenericBusinessError>()).ToList(),
				DoCheckIn = getAllErrorsResponsePayload.doCheckIn,
				TimeStamp = getAllErrorsResponsePayload.timeStamp,
				Flags = getAllErrorsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FeeLookupResponse ToDomain(SERVICE.FeeLookupResponse feeLookupResponse)
		{
			var domainModel = new DOMAIN.FeeLookupResponse {
				Payload = (feeLookupResponse.payload != null ? feeLookupResponse.payload.ConvertToDomain<SERVICE.FeeLookupResponsePayload, DOMAIN.FeeLookupResponsePayload>() : null),
				Errors = feeLookupResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FeeLookupResponsePayload ToDomain(SERVICE.FeeLookupResponsePayload feeLookupResponsePayload)
		{
			var domainModel = new DOMAIN.FeeLookupResponsePayload {
				FeeInfos = feeLookupResponsePayload.feeInfos?.Select(x => x.ConvertToDomain<SERVICE.FeeInfo, DOMAIN.FeeInfo>()).ToList(),
				DoCheckIn = feeLookupResponsePayload.doCheckIn,
				TimeStamp = feeLookupResponsePayload.timeStamp,
				Flags = feeLookupResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FeeLookupBySendCountryResponse ToDomain(SERVICE.FeeLookupBySendCountryResponse feeLookupBySendCountryResponse)
		{
			var domainModel = new DOMAIN.FeeLookupBySendCountryResponse {
				Payload = (feeLookupBySendCountryResponse.payload != null ? feeLookupBySendCountryResponse.payload.ConvertToDomain<SERVICE.FeeLookupBySendCountryResponsePayload, DOMAIN.FeeLookupBySendCountryResponsePayload>() : null),
				Errors = feeLookupBySendCountryResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FeeLookupBySendCountryResponsePayload ToDomain(SERVICE.FeeLookupBySendCountryResponsePayload feeLookupBySendCountryResponsePayload)
		{
			var domainModel = new DOMAIN.FeeLookupBySendCountryResponsePayload {
				CountryFeeInfo = feeLookupBySendCountryResponsePayload.countryFeeInfo?.Select(x => x.ConvertToDomain<SERVICE.CountryFeeInfo, DOMAIN.CountryFeeInfo>()).ToList(),
				DoCheckIn = feeLookupBySendCountryResponsePayload.doCheckIn,
				TimeStamp = feeLookupBySendCountryResponsePayload.timeStamp,
				Flags = feeLookupBySendCountryResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DwProfileResponse ToDomain(SERVICE.DwProfileResponse dwProfileResponse)
		{
			var domainModel = new DOMAIN.DwProfileResponse {
				Payload = (dwProfileResponse.payload != null ? dwProfileResponse.payload.ConvertToDomain<SERVICE.DwProfileResponsePayload, DOMAIN.DwProfileResponsePayload>() : null),
				Errors = dwProfileResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DwProfileResponsePayload ToDomain(SERVICE.DwProfileResponsePayload dwProfileResponsePayload)
		{
			var domainModel = new DOMAIN.DwProfileResponsePayload {
				Profile = dwProfileResponsePayload.profile,
				DoCheckIn = dwProfileResponsePayload.doCheckIn,
				TimeStamp = dwProfileResponsePayload.timeStamp,
				Flags = dwProfileResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DwPasswordResponse ToDomain(SERVICE.DwPasswordResponse dwPasswordResponse)
		{
			var domainModel = new DOMAIN.DwPasswordResponse {
				Payload = (dwPasswordResponse.payload != null ? dwPasswordResponse.payload.ConvertToDomain<SERVICE.DwPasswordResponsePayload, DOMAIN.DwPasswordResponsePayload>() : null),
				Errors = dwPasswordResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DwPasswordResponsePayload ToDomain(SERVICE.DwPasswordResponsePayload dwPasswordResponsePayload)
		{
			var domainModel = new DOMAIN.DwPasswordResponsePayload {
				Status = dwPasswordResponsePayload.status,
				ReasonCode = (DOMAIN.DwPasswordReasonCodeType)dwPasswordResponsePayload.reasonCode,
				DoCheckIn = dwPasswordResponsePayload.doCheckIn,
				TimeStamp = dwPasswordResponsePayload.timeStamp,
				Flags = dwPasswordResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DwInitialSetupResponse ToDomain(SERVICE.DwInitialSetupResponse dwInitialSetupResponse)
		{
			var domainModel = new DOMAIN.DwInitialSetupResponse {
				Payload = (dwInitialSetupResponse.payload != null ? dwInitialSetupResponse.payload.ConvertToDomain<SERVICE.DwInitialSetupResponsePayload, DOMAIN.DwInitialSetupResponsePayload>() : null),
				Errors = dwInitialSetupResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DwInitialSetupResponsePayload ToDomain(SERVICE.DwInitialSetupResponsePayload dwInitialSetupResponsePayload)
		{
			var domainModel = new DOMAIN.DwInitialSetupResponsePayload {
				UnitProfileID = dwInitialSetupResponsePayload.unitProfileID,
				Token = dwInitialSetupResponsePayload.token,
				Profile = dwInitialSetupResponsePayload.profile,
				DoCheckIn = dwInitialSetupResponsePayload.doCheckIn,
				TimeStamp = dwInitialSetupResponsePayload.timeStamp,
				Flags = dwInitialSetupResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DoddFrankStateRegulatorInfoResponse ToDomain(SERVICE.DoddFrankStateRegulatorInfoResponse doddFrankStateRegulatorInfoResponse)
		{
			var domainModel = new DOMAIN.DoddFrankStateRegulatorInfoResponse {
				Payload = (doddFrankStateRegulatorInfoResponse.payload != null ? doddFrankStateRegulatorInfoResponse.payload.ConvertToDomain<SERVICE.DoddFrankStateRegulatorInfoResponsePayload, DOMAIN.DoddFrankStateRegulatorInfoResponsePayload>() : null),
				Errors = doddFrankStateRegulatorInfoResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DoddFrankStateRegulatorInfoResponsePayload ToDomain(SERVICE.DoddFrankStateRegulatorInfoResponsePayload doddFrankStateRegulatorInfoResponsePayload)
		{
			var domainModel = new DOMAIN.DoddFrankStateRegulatorInfoResponsePayload {
				Version = doddFrankStateRegulatorInfoResponsePayload.version,
				StateRegulatorInfo = doddFrankStateRegulatorInfoResponsePayload.stateRegulatorInfo?.Select(x => x.ConvertToDomain<SERVICE.StateRegulatorInfo, DOMAIN.StateRegulatorInfo>()).ToList(),
				DoCheckIn = doddFrankStateRegulatorInfoResponsePayload.doCheckIn,
				TimeStamp = doddFrankStateRegulatorInfoResponsePayload.timeStamp,
				Flags = doddFrankStateRegulatorInfoResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DisclosureTextDetailsResponse ToDomain(SERVICE.DisclosureTextDetailsResponse disclosureTextDetailsResponse)
		{
			var domainModel = new DOMAIN.DisclosureTextDetailsResponse {
				Payload = (disclosureTextDetailsResponse.payload != null ? disclosureTextDetailsResponse.payload.ConvertToDomain<SERVICE.DisclosureTextDetailsResponsePayload, DOMAIN.DisclosureTextDetailsResponsePayload>() : null),
				Errors = disclosureTextDetailsResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DisclosureTextDetailsResponsePayload ToDomain(SERVICE.DisclosureTextDetailsResponsePayload disclosureTextDetailsResponsePayload)
		{
			var domainModel = new DOMAIN.DisclosureTextDetailsResponsePayload {
				DisclosureTextDetails = disclosureTextDetailsResponsePayload.disclosureTextDetails?.Select(x => x.ConvertToDomain<SERVICE.DisclosureTextDetailsType, DOMAIN.DisclosureTextDetailsType>()).ToList(),
				DoCheckIn = disclosureTextDetailsResponsePayload.doCheckIn,
				TimeStamp = disclosureTextDetailsResponsePayload.timeStamp,
				Flags = disclosureTextDetailsResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DirectoryOfAgentsByZipResponse ToDomain(SERVICE.DirectoryOfAgentsByZipResponse directoryOfAgentsByZipResponse)
		{
			var domainModel = new DOMAIN.DirectoryOfAgentsByZipResponse {
				Payload = (directoryOfAgentsByZipResponse.payload != null ? directoryOfAgentsByZipResponse.payload.ConvertToDomain<SERVICE.DirectoryOfAgentsByZipResponsePayload, DOMAIN.DirectoryOfAgentsByZipResponsePayload>() : null),
				Errors = directoryOfAgentsByZipResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DirectoryOfAgentsByZipResponsePayload ToDomain(SERVICE.DirectoryOfAgentsByZipResponsePayload directoryOfAgentsByZipResponsePayload)
		{
			var domainModel = new DOMAIN.DirectoryOfAgentsByZipResponsePayload {
				AgentInfo = directoryOfAgentsByZipResponsePayload.agentInfo?.Select(x => x.ConvertToDomain<SERVICE.AgentInfo, DOMAIN.AgentInfo>()).ToList(),
				DoCheckIn = directoryOfAgentsByZipResponsePayload.doCheckIn,
				TimeStamp = directoryOfAgentsByZipResponsePayload.timeStamp,
				Flags = directoryOfAgentsByZipResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DirectoryOfAgentsByCityResponse ToDomain(SERVICE.DirectoryOfAgentsByCityResponse directoryOfAgentsByCityResponse)
		{
			var domainModel = new DOMAIN.DirectoryOfAgentsByCityResponse {
				Payload = (directoryOfAgentsByCityResponse.payload != null ? directoryOfAgentsByCityResponse.payload.ConvertToDomain<SERVICE.DirectoryOfAgentsByCityResponsePayload, DOMAIN.DirectoryOfAgentsByCityResponsePayload>() : null),
				Errors = directoryOfAgentsByCityResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DirectoryOfAgentsByCityResponsePayload ToDomain(SERVICE.DirectoryOfAgentsByCityResponsePayload directoryOfAgentsByCityResponsePayload)
		{
			var domainModel = new DOMAIN.DirectoryOfAgentsByCityResponsePayload {
				AgentInfo = directoryOfAgentsByCityResponsePayload.agentInfo?.Select(x => x.ConvertToDomain<SERVICE.AgentInfo, DOMAIN.AgentInfo>()).ToList(),
				DoCheckIn = directoryOfAgentsByCityResponsePayload.doCheckIn,
				TimeStamp = directoryOfAgentsByCityResponsePayload.timeStamp,
				Flags = directoryOfAgentsByCityResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponse ToDomain(SERVICE.DirectoryOfAgentsByAreaCodePrefixResponse directoryOfAgentsByAreaCodePrefixResponse)
		{
			var domainModel = new DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponse {
				Payload = (directoryOfAgentsByAreaCodePrefixResponse.payload != null ? directoryOfAgentsByAreaCodePrefixResponse.payload.ConvertToDomain<SERVICE.DirectoryOfAgentsByAreaCodePrefixResponsePayload, DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponsePayload>() : null),
				Errors = directoryOfAgentsByAreaCodePrefixResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponsePayload ToDomain(SERVICE.DirectoryOfAgentsByAreaCodePrefixResponsePayload directoryOfAgentsByAreaCodePrefixResponsePayload)
		{
			var domainModel = new DOMAIN.DirectoryOfAgentsByAreaCodePrefixResponsePayload {
				AgentInfo = directoryOfAgentsByAreaCodePrefixResponsePayload.agentInfo?.Select(x => x.ConvertToDomain<SERVICE.AgentInfo, DOMAIN.AgentInfo>()).ToList(),
				DoCheckIn = directoryOfAgentsByAreaCodePrefixResponsePayload.doCheckIn,
				TimeStamp = directoryOfAgentsByAreaCodePrefixResponsePayload.timeStamp,
				Flags = directoryOfAgentsByAreaCodePrefixResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DepositAnnouncementResponse ToDomain(SERVICE.DepositAnnouncementResponse depositAnnouncementResponse)
		{
			var domainModel = new DOMAIN.DepositAnnouncementResponse {
				Payload = (depositAnnouncementResponse.payload != null ? depositAnnouncementResponse.payload.ConvertToDomain<SERVICE.DepositAnnouncementResponsePayload, DOMAIN.DepositAnnouncementResponsePayload>() : null),
				Errors = depositAnnouncementResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DepositAnnouncementResponsePayload ToDomain(SERVICE.DepositAnnouncementResponsePayload depositAnnouncementResponsePayload)
		{
			var domainModel = new DOMAIN.DepositAnnouncementResponsePayload {
				DepositAnnouncementID = depositAnnouncementResponsePayload.depositAnnouncementID,
				DoCheckIn = depositAnnouncementResponsePayload.doCheckIn,
				TimeStamp = depositAnnouncementResponsePayload.timeStamp,
				Flags = depositAnnouncementResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreateOrUpdateProfileSenderResponse ToDomain(SERVICE.CreateOrUpdateProfileSenderResponse createOrUpdateProfileSenderResponse)
		{
			var domainModel = new DOMAIN.CreateOrUpdateProfileSenderResponse {
				Payload = (createOrUpdateProfileSenderResponse.payload != null ? createOrUpdateProfileSenderResponse.payload.ConvertToDomain<SERVICE.CreateOrUpdateProfileSenderResponsePayload, DOMAIN.CreateOrUpdateProfileSenderResponsePayload>() : null),
				Errors = createOrUpdateProfileSenderResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreateOrUpdateProfileSenderResponsePayload ToDomain(SERVICE.CreateOrUpdateProfileSenderResponsePayload createOrUpdateProfileSenderResponsePayload)
		{
			var domainModel = new DOMAIN.CreateOrUpdateProfileSenderResponsePayload {
				MgiSessionID = createOrUpdateProfileSenderResponsePayload.mgiSessionID,
				GAFVersionNumber = createOrUpdateProfileSenderResponsePayload.GAFVersionNumber,
				CustomerServiceMessage = createOrUpdateProfileSenderResponsePayload.customerServiceMessage,
				ConsumerProfileID = createOrUpdateProfileSenderResponsePayload.consumerProfileID,
				ConsumerProfileIDs = createOrUpdateProfileSenderResponsePayload.consumerProfileIDs?.Select(x => x.ConvertToDomain<SERVICE.ConsumerProfileIDInfo, DOMAIN.ConsumerProfileIDInfo>()).ToList(),
				FieldsToCollect = createOrUpdateProfileSenderResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = createOrUpdateProfileSenderResponsePayload.doCheckIn,
				TimeStamp = createOrUpdateProfileSenderResponsePayload.timeStamp,
				Flags = createOrUpdateProfileSenderResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreateOrUpdateProfileReceiverResponse ToDomain(SERVICE.CreateOrUpdateProfileReceiverResponse createOrUpdateProfileReceiverResponse)
		{
			var domainModel = new DOMAIN.CreateOrUpdateProfileReceiverResponse {
				Payload = (createOrUpdateProfileReceiverResponse.payload != null ? createOrUpdateProfileReceiverResponse.payload.ConvertToDomain<SERVICE.CreateOrUpdateProfileReceiverResponsePayload, DOMAIN.CreateOrUpdateProfileReceiverResponsePayload>() : null),
				Errors = createOrUpdateProfileReceiverResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreateOrUpdateProfileReceiverResponsePayload ToDomain(SERVICE.CreateOrUpdateProfileReceiverResponsePayload createOrUpdateProfileReceiverResponsePayload)
		{
			var domainModel = new DOMAIN.CreateOrUpdateProfileReceiverResponsePayload {
				MgiSessionID = createOrUpdateProfileReceiverResponsePayload.mgiSessionID,
				GAFVersionNumber = createOrUpdateProfileReceiverResponsePayload.GAFVersionNumber,
				CustomerServiceMessage = createOrUpdateProfileReceiverResponsePayload.customerServiceMessage,
				ConsumerProfileID = createOrUpdateProfileReceiverResponsePayload.consumerProfileID,
				ConsumerProfileIDs = createOrUpdateProfileReceiverResponsePayload.consumerProfileIDs?.Select(x => x.ConvertToDomain<SERVICE.ConsumerProfileIDInfo, DOMAIN.ConsumerProfileIDInfo>()).ToList(),
				FieldsToCollect = createOrUpdateProfileReceiverResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = createOrUpdateProfileReceiverResponsePayload.doCheckIn,
				TimeStamp = createOrUpdateProfileReceiverResponsePayload.timeStamp,
				Flags = createOrUpdateProfileReceiverResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreateOrUpdateProfileConsumerResponse ToDomain(SERVICE.CreateOrUpdateProfileConsumerResponse createOrUpdateProfileConsumerResponse)
		{
			var domainModel = new DOMAIN.CreateOrUpdateProfileConsumerResponse {
				Payload = (createOrUpdateProfileConsumerResponse.payload != null ? createOrUpdateProfileConsumerResponse.payload.ConvertToDomain<SERVICE.CreateOrUpdateProfileConsumerResponsePayload, DOMAIN.CreateOrUpdateProfileConsumerResponsePayload>() : null),
				Errors = createOrUpdateProfileConsumerResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreateOrUpdateProfileConsumerResponsePayload ToDomain(SERVICE.CreateOrUpdateProfileConsumerResponsePayload createOrUpdateProfileConsumerResponsePayload)
		{
			var domainModel = new DOMAIN.CreateOrUpdateProfileConsumerResponsePayload {
				MgiSessionID = createOrUpdateProfileConsumerResponsePayload.mgiSessionID,
				GAFVersionNumber = createOrUpdateProfileConsumerResponsePayload.GAFVersionNumber,
				CustomerServiceMessage = createOrUpdateProfileConsumerResponsePayload.customerServiceMessage,
				ConsumerProfileID = createOrUpdateProfileConsumerResponsePayload.consumerProfileID,
				ConsumerProfileIDs = createOrUpdateProfileConsumerResponsePayload.consumerProfileIDs?.Select(x => x.ConvertToDomain<SERVICE.ConsumerProfileIDInfo, DOMAIN.ConsumerProfileIDInfo>()).ToList(),
				FieldsToCollect = createOrUpdateProfileConsumerResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				DoCheckIn = createOrUpdateProfileConsumerResponsePayload.doCheckIn,
				TimeStamp = createOrUpdateProfileConsumerResponsePayload.timeStamp,
				Flags = createOrUpdateProfileConsumerResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerHistoryLookupResponse ToDomain(SERVICE.ConsumerHistoryLookupResponse consumerHistoryLookupResponse)
		{
			var domainModel = new DOMAIN.ConsumerHistoryLookupResponse {
				Payload = (consumerHistoryLookupResponse.payload != null ? consumerHistoryLookupResponse.payload.ConvertToDomain<SERVICE.ConsumerHistoryLookupResponsePayload, DOMAIN.ConsumerHistoryLookupResponsePayload>() : null),
				Errors = consumerHistoryLookupResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerHistoryLookupResponsePayload ToDomain(SERVICE.ConsumerHistoryLookupResponsePayload consumerHistoryLookupResponsePayload)
		{
			var domainModel = new DOMAIN.ConsumerHistoryLookupResponsePayload {
				SenderInfos = (consumerHistoryLookupResponsePayload.senderInfos != null ? consumerHistoryLookupResponsePayload.senderInfos.ConvertToDomain<SERVICE.ConsumerHistoryLookupResponsePayloadSenderInfos, DOMAIN.ConsumerHistoryLookupResponsePayloadSenderInfos>() : null),
				DoCheckIn = consumerHistoryLookupResponsePayload.doCheckIn,
				TimeStamp = consumerHistoryLookupResponsePayload.timeStamp,
				Flags = consumerHistoryLookupResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerHistoryLookupResponsePayloadSenderInfos ToDomain(SERVICE.ConsumerHistoryLookupResponsePayloadSenderInfos consumerHistoryLookupResponsePayloadSenderInfos)
		{
			var domainModel = new DOMAIN.ConsumerHistoryLookupResponsePayloadSenderInfos {
				SenderInfo = consumerHistoryLookupResponsePayloadSenderInfos.senderInfo?.Select(x => x.ConvertToDomain<SERVICE.SenderLookupInfo, DOMAIN.SenderLookupInfo>()).ToList(),
				Infos = consumerHistoryLookupResponsePayloadSenderInfos.infos?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConfirmTokenResponse ToDomain(SERVICE.ConfirmTokenResponse confirmTokenResponse)
		{
			var domainModel = new DOMAIN.ConfirmTokenResponse {
				Payload = (confirmTokenResponse.payload != null ? confirmTokenResponse.payload.ConvertToDomain<SERVICE.ConfirmTokenResponsePayload, DOMAIN.ConfirmTokenResponsePayload>() : null),
				Errors = confirmTokenResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConfirmTokenResponsePayload ToDomain(SERVICE.ConfirmTokenResponsePayload confirmTokenResponsePayload)
		{
			var domainModel = new DOMAIN.ConfirmTokenResponsePayload {
				ProfileChanged = confirmTokenResponsePayload.profileChanged,
				CodeTableChanged = confirmTokenResponsePayload.codeTableChanged,
				DoCheckIn = confirmTokenResponsePayload.doCheckIn,
				TimeStamp = confirmTokenResponsePayload.timeStamp,
				Flags = confirmTokenResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ComplianceTransactionResponse ToDomain(SERVICE.ComplianceTransactionResponse complianceTransactionResponse)
		{
			var domainModel = new DOMAIN.ComplianceTransactionResponse {
				Payload = (complianceTransactionResponse.payload != null ? complianceTransactionResponse.payload.ConvertToDomain<SERVICE.ComplianceTransactionResponsePayload, DOMAIN.ComplianceTransactionResponsePayload>() : null),
				Errors = complianceTransactionResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ComplianceTransactionResponsePayload ToDomain(SERVICE.ComplianceTransactionResponsePayload complianceTransactionResponsePayload)
		{
			var domainModel = new DOMAIN.ComplianceTransactionResponsePayload {
				ComplianceInfoRequired = complianceTransactionResponsePayload.complianceInfoRequired,
				Cci = (complianceTransactionResponsePayload.cci != null ? complianceTransactionResponsePayload.cci.ConvertToDomain<SERVICE.CustomerComplianceInfo, DOMAIN.CustomerComplianceInfo>() : null),
				OfacStatus = complianceTransactionResponsePayload.ofacStatus,
				OfacSourceID = complianceTransactionResponsePayload.ofacSourceID,
				BatchID = complianceTransactionResponsePayload.batchID,
				DoCheckIn = complianceTransactionResponsePayload.doCheckIn,
				TimeStamp = complianceTransactionResponsePayload.timeStamp,
				Flags = complianceTransactionResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CustomerComplianceInfo ToDomain(SERVICE.CustomerComplianceInfo customerComplianceInfo)
		{
			var domainModel = new DOMAIN.CustomerComplianceInfo {
				TypeCode = (DOMAIN.CustomerComplianceTypeCodeType)customerComplianceInfo.typeCode,
				OperatorName = customerComplianceInfo.operatorName,
				LocalDateTime = customerComplianceInfo.localDateTimeSpecified == true ? (DateTime?)customerComplianceInfo.localDateTime : null,
				EmployeeNumber = customerComplianceInfo.employeeNumber,
				Comments = customerComplianceInfo.comments,
				Category = customerComplianceInfo.categorySpecified == true ? (int?)customerComplianceInfo.category : null,
				OtherCategory = customerComplianceInfo.otherCategory,
				Character = customerComplianceInfo.characterSpecified == true ? (int?)customerComplianceInfo.character : null,
				LastName = customerComplianceInfo.lastName,
				FirstName = customerComplianceInfo.firstName,
				MiddleInitial = customerComplianceInfo.middleInitial,
				Address = customerComplianceInfo.address,
				Address2 = customerComplianceInfo.address2,
				City = customerComplianceInfo.city,
				State = customerComplianceInfo.state,
				ZipCode = customerComplianceInfo.zipCode,
				Country = customerComplianceInfo.country,
				PhotoIdType = customerComplianceInfo.photoIdTypeSpecified == true ? (DOMAIN.PhotoIdType?)customerComplianceInfo.photoIdType : null,
				PhotoIdNumber = customerComplianceInfo.photoIdNumber,
				PhotoIdState = customerComplianceInfo.photoIdState,
				PhotoIdCountry = customerComplianceInfo.photoIdCountry,
				DateOfBirth = customerComplianceInfo.dateOfBirthSpecified == true ? (DateTime?)customerComplianceInfo.dateOfBirth : null,
				PhoneNumber = customerComplianceInfo.phoneNumber,
				Occupation = customerComplianceInfo.occupation,
				LegalIdType = customerComplianceInfo.legalIdTypeSpecified == true ? (DOMAIN.LegalIdType?)customerComplianceInfo.legalIdType : null,
				LegalIdNumber = customerComplianceInfo.legalIdNumber,
				ThirdPartyDBA = customerComplianceInfo.thirdPartyDBA,
				ThirdPartyLastName = customerComplianceInfo.thirdPartyLastName,
				ThirdPartyFirstName = customerComplianceInfo.thirdPartyFirstName,
				ThirdPartyMiddleInitial = customerComplianceInfo.thirdPartyMiddleInitial,
				ThirdPartyAddress = customerComplianceInfo.thirdPartyAddress,
				ThirdPartyAddress2 = customerComplianceInfo.thirdPartyAddress2,
				ThirdPartyCity = customerComplianceInfo.thirdPartyCity,
				ThirdPartyState = customerComplianceInfo.thirdPartyState,
				ThirdPartyZipCode = customerComplianceInfo.thirdPartyZipCode,
				ThirdPartyCountry = customerComplianceInfo.thirdPartyCountry,
				ThirdPartyDOB = customerComplianceInfo.thirdPartyDOBSpecified == true ? (DateTime?)customerComplianceInfo.thirdPartyDOB : null,
				ThirdPartyPhoneNumber = customerComplianceInfo.thirdPartyPhoneNumber,
				ThirdPartyOccupation = customerComplianceInfo.thirdPartyOccupation,
				ThirdPartyLegalIdType = customerComplianceInfo.thirdPartyLegalIdTypeSpecified == true ? (DOMAIN.LegalIdType?)customerComplianceInfo.thirdPartyLegalIdType : null,
				ThirdPartyLegalIdNumber = customerComplianceInfo.thirdPartyLegalIdNumber,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CompleteSessionResponse ToDomain(SERVICE.CompleteSessionResponse completeSessionResponse)
		{
			var domainModel = new DOMAIN.CompleteSessionResponse {
				Payload = (completeSessionResponse.payload != null ? completeSessionResponse.payload.ConvertToDomain<SERVICE.CompleteSessionResponsePayload, DOMAIN.CompleteSessionResponsePayload>() : null),
				Errors = completeSessionResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CompleteSessionResponsePayload ToDomain(SERVICE.CompleteSessionResponsePayload completeSessionResponsePayload)
		{
			var domainModel = new DOMAIN.CompleteSessionResponsePayload {
				ConfirmationNumber = completeSessionResponsePayload.confirmationNumber,
				ReferenceNumber = completeSessionResponsePayload.referenceNumber,
				TransactionID = completeSessionResponsePayload.transactionID,
				ReferenceNumberText = completeSessionResponsePayload.referenceNumberText,
				PartnerConfirmationNumber = completeSessionResponsePayload.partnerConfirmationNumber,
				PartnerName = completeSessionResponsePayload.partnerName,
				ReceiveAgentAbbreviation = completeSessionResponsePayload.receiveAgentAbbreviation,
				FreePhoneCallPIN = completeSessionResponsePayload.freePhoneCallPIN,
				TollFreePhoneNumber = completeSessionResponsePayload.tollFreePhoneNumber,
				ExpectedDateOfDelivery = completeSessionResponsePayload.expectedDateOfDeliverySpecified == true ? (DateTime?)completeSessionResponsePayload.expectedDateOfDelivery : null,
				TransactionDateTime = completeSessionResponsePayload.transactionDateTime,
				AgentCheckAuthorizationNumber = completeSessionResponsePayload.agentCheckAuthorizationNumber,
				Receipts = (completeSessionResponsePayload.receipts != null ? completeSessionResponsePayload.receipts.ConvertToDomain<SERVICE.CompletionReceiptType, DOMAIN.CompletionReceiptType>() : null),
				ReceiptInfo = (completeSessionResponsePayload.receiptInfo != null ? completeSessionResponsePayload.receiptInfo.ConvertToDomain<SERVICE.CompleteSessionResponsePayloadReceiptInfo, DOMAIN.CompleteSessionResponsePayloadReceiptInfo>() : null),
				DoCheckIn = completeSessionResponsePayload.doCheckIn,
				TimeStamp = completeSessionResponsePayload.timeStamp,
				Flags = completeSessionResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CompleteSessionResponsePayloadReceiptInfo ToDomain(SERVICE.CompleteSessionResponsePayloadReceiptInfo completeSessionResponsePayloadReceiptInfo)
		{
			var domainModel = new DOMAIN.CompleteSessionResponsePayloadReceiptInfo {
				ReceiptTextInfos = completeSessionResponsePayloadReceiptInfo.receiptTextInfos?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CityListResponse ToDomain(SERVICE.CityListResponse cityListResponse)
		{
			var domainModel = new DOMAIN.CityListResponse {
				Payload = (cityListResponse.payload != null ? cityListResponse.payload.ConvertToDomain<SERVICE.CityListResponsePayload, DOMAIN.CityListResponsePayload>() : null),
				Errors = cityListResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CityListResponsePayload ToDomain(SERVICE.CityListResponsePayload cityListResponsePayload)
		{
			var domainModel = new DOMAIN.CityListResponsePayload {
				City = cityListResponsePayload.city?.ToList(),
				DoCheckIn = cityListResponsePayload.doCheckIn,
				TimeStamp = cityListResponsePayload.timeStamp,
				Flags = cityListResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CheckInResponse ToDomain(SERVICE.CheckInResponse checkInResponse)
		{
			var domainModel = new DOMAIN.CheckInResponse {
				Payload = (checkInResponse.payload != null ? checkInResponse.payload.ConvertToDomain<SERVICE.CheckInResponsePayload, DOMAIN.CheckInResponsePayload>() : null),
				Errors = checkInResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CheckInResponsePayload ToDomain(SERVICE.CheckInResponsePayload checkInResponsePayload)
		{
			var domainModel = new DOMAIN.CheckInResponsePayload {
				Token = checkInResponsePayload.token,
				TimeZoneCorrection = (checkInResponsePayload.timeZoneCorrection != null ? checkInResponsePayload.timeZoneCorrection.ConvertToDomain<SERVICE.TimeZoneCorrectionType, DOMAIN.TimeZoneCorrectionType>() : null),
				DoCheckIn = checkInResponsePayload.doCheckIn,
				TimeStamp = checkInResponsePayload.timeStamp,
				Flags = checkInResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BPValidationResponse ToDomain(SERVICE.BPValidationResponse bPValidationResponse)
		{
			var domainModel = new DOMAIN.BPValidationResponse {
				Payload = (bPValidationResponse.payload != null ? bPValidationResponse.payload.ConvertToDomain<SERVICE.BPValidationResponsePayload, DOMAIN.BPValidationResponsePayload>() : null),
				Errors = bPValidationResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BPValidationResponsePayload ToDomain(SERVICE.BPValidationResponsePayload bPValidationResponsePayload)
		{
			var domainModel = new DOMAIN.BPValidationResponsePayload {
				MgiSessionID = bPValidationResponsePayload.mgiSessionID,
				ReadyForCommit = bPValidationResponsePayload.readyForCommit,
				GAFVersionNumber = bPValidationResponsePayload.GAFVersionNumber,
				Token = bPValidationResponsePayload.token,
				MgiRewardsNumber = bPValidationResponsePayload.mgiRewardsNumber,
				ProductVariant = (DOMAIN.ProductVariantType)bPValidationResponsePayload.productVariant,
				BillerCutoffTime = bPValidationResponsePayload.billerCutoffTime,
				BillerAddress = bPValidationResponsePayload.billerAddress,
				BillerAddress2 = bPValidationResponsePayload.billerAddress2,
				BillerAddress3 = bPValidationResponsePayload.billerAddress3,
				BillerCity = bPValidationResponsePayload.billerCity,
				BillerState = bPValidationResponsePayload.billerState,
				BillerPostalCode = bPValidationResponsePayload.billerPostalCode,
				BillerPhone = bPValidationResponsePayload.billerPhone,
				AgentTransactionId = bPValidationResponsePayload.agentTransactionId,
				ServiceOfferingID = bPValidationResponsePayload.serviceOfferingID,
				ProcessingFee = bPValidationResponsePayload.processingFeeSpecified == true ? (decimal?)bPValidationResponsePayload.processingFee : null,
				InfoFeeIndicator = bPValidationResponsePayload.infoFeeIndicatorSpecified == true ? (bool?)bPValidationResponsePayload.infoFeeIndicator : null,
				ExchangeRateApplied = bPValidationResponsePayload.exchangeRateAppliedSpecified == true ? (decimal?)bPValidationResponsePayload.exchangeRateApplied : null,
				SendAmounts = (bPValidationResponsePayload.sendAmounts != null ? bPValidationResponsePayload.sendAmounts.ConvertToDomain<SERVICE.SendAmountInfo, DOMAIN.SendAmountInfo>() : null),
				ReceiveAmounts = (bPValidationResponsePayload.receiveAmounts != null ? bPValidationResponsePayload.receiveAmounts.ConvertToDomain<SERVICE.ReceiveAmountInfo, DOMAIN.ReceiveAmountInfo>() : null),
				PromotionInfos = bPValidationResponsePayload.promotionInfos?.Select(x => x.ConvertToDomain<SERVICE.PromotionInfo, DOMAIN.PromotionInfo>()).ToList(),
				FieldsToCollect = bPValidationResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				Receipts = (bPValidationResponsePayload.receipts != null ? bPValidationResponsePayload.receipts.ConvertToDomain<SERVICE.PreCompletionReceiptType, DOMAIN.PreCompletionReceiptType>() : null),
				ReceiptInfo = (bPValidationResponsePayload.receiptInfo != null ? bPValidationResponsePayload.receiptInfo.ConvertToDomain<SERVICE.BPValidationResponsePayloadReceiptInfo, DOMAIN.BPValidationResponsePayloadReceiptInfo>() : null),
				DoCheckIn = bPValidationResponsePayload.doCheckIn,
				TimeStamp = bPValidationResponsePayload.timeStamp,
				Flags = bPValidationResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BPValidationResponsePayloadReceiptInfo ToDomain(SERVICE.BPValidationResponsePayloadReceiptInfo bPValidationResponsePayloadReceiptInfo)
		{
			var domainModel = new DOMAIN.BPValidationResponsePayloadReceiptInfo {
				BillerWebsite = bPValidationResponsePayloadReceiptInfo.billerWebsite,
				PrintMGICustomerServiceNumber = bPValidationResponsePayloadReceiptInfo.printMGICustomerServiceNumberSpecified == true ? (bool?)bPValidationResponsePayloadReceiptInfo.printMGICustomerServiceNumber : null,
				ExpectedPostingTimeFrames = bPValidationResponsePayloadReceiptInfo.expectedPostingTimeFrames?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				BillerNotes = bPValidationResponsePayloadReceiptInfo.billerNotes?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				ServiceOfferingDescriptions = bPValidationResponsePayloadReceiptInfo.serviceOfferingDescriptions?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				CustomerTips = bPValidationResponsePayloadReceiptInfo.customerTips?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				PromotionalMessages = bPValidationResponsePayloadReceiptInfo.promotionalMessages?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
				DisclosureTexts = bPValidationResponsePayloadReceiptInfo.disclosureTexts?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillPaymentSummaryReportResponse ToDomain(SERVICE.BillPaymentSummaryReportResponse billPaymentSummaryReportResponse)
		{
			var domainModel = new DOMAIN.BillPaymentSummaryReportResponse {
				Payload = (billPaymentSummaryReportResponse.payload != null ? billPaymentSummaryReportResponse.payload.ConvertToDomain<SERVICE.BillPaymentSummaryReportResponsePayload, DOMAIN.BillPaymentSummaryReportResponsePayload>() : null),
				Errors = billPaymentSummaryReportResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillPaymentSummaryReportResponsePayload ToDomain(SERVICE.BillPaymentSummaryReportResponsePayload billPaymentSummaryReportResponsePayload)
		{
			var domainModel = new DOMAIN.BillPaymentSummaryReportResponsePayload {
				ReportInfo = billPaymentSummaryReportResponsePayload.reportInfo?.Select(x => x.ConvertToDomain<SERVICE.BillPaymentSummaryInfo, DOMAIN.BillPaymentSummaryInfo>()).ToList(),
				DoCheckIn = billPaymentSummaryReportResponsePayload.doCheckIn,
				TimeStamp = billPaymentSummaryReportResponsePayload.timeStamp,
				Flags = billPaymentSummaryReportResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillPaymentDetailReportResponse ToDomain(SERVICE.BillPaymentDetailReportResponse billPaymentDetailReportResponse)
		{
			var domainModel = new DOMAIN.BillPaymentDetailReportResponse {
				Payload = (billPaymentDetailReportResponse.payload != null ? billPaymentDetailReportResponse.payload.ConvertToDomain<SERVICE.BillPaymentDetailReportResponsePayload, DOMAIN.BillPaymentDetailReportResponsePayload>() : null),
				Errors = billPaymentDetailReportResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillPaymentDetailReportResponsePayload ToDomain(SERVICE.BillPaymentDetailReportResponsePayload billPaymentDetailReportResponsePayload)
		{
			var domainModel = new DOMAIN.BillPaymentDetailReportResponsePayload {
				ReportInfo = billPaymentDetailReportResponsePayload.reportInfo?.Select(x => x.ConvertToDomain<SERVICE.BillPaymentDetailInfo, DOMAIN.BillPaymentDetailInfo>()).ToList(),
				DoCheckIn = billPaymentDetailReportResponsePayload.doCheckIn,
				TimeStamp = billPaymentDetailReportResponsePayload.timeStamp,
				Flags = billPaymentDetailReportResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillerSearchResponse ToDomain(SERVICE.BillerSearchResponse billerSearchResponse)
		{
			var domainModel = new DOMAIN.BillerSearchResponse {
				Payload = (billerSearchResponse.payload != null ? billerSearchResponse.payload.ConvertToDomain<SERVICE.BillerSearchResponsePayload, DOMAIN.BillerSearchResponsePayload>() : null),
				Errors = billerSearchResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillerSearchResponsePayload ToDomain(SERVICE.BillerSearchResponsePayload billerSearchResponsePayload)
		{
			var domainModel = new DOMAIN.BillerSearchResponsePayload {
				BillerInfo = billerSearchResponsePayload.billerInfo?.Select(x => x.ConvertToDomain<SERVICE.BillerInfo, DOMAIN.BillerInfo>()).ToList(),
				DoCheckIn = billerSearchResponsePayload.doCheckIn,
				TimeStamp = billerSearchResponsePayload.timeStamp,
				Flags = billerSearchResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.AmendValidationResponse ToDomain(SERVICE.AmendValidationResponse amendValidationResponse)
		{
			var domainModel = new DOMAIN.AmendValidationResponse {
				Payload = (amendValidationResponse.payload != null ? amendValidationResponse.payload.ConvertToDomain<SERVICE.AmendValidationResponsePayload, DOMAIN.AmendValidationResponsePayload>() : null),
				Errors = amendValidationResponse.errors?.Select(x => x.ConvertToDomain<SERVICE.BusinessError, DOMAIN.BusinessError>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.AmendValidationResponsePayload ToDomain(SERVICE.AmendValidationResponsePayload amendValidationResponsePayload)
		{
			var domainModel = new DOMAIN.AmendValidationResponsePayload {
				MgiSessionID = amendValidationResponsePayload.mgiSessionID,
				ReadyForCommit = amendValidationResponsePayload.readyForCommit,
				GAFVersionNumber = amendValidationResponsePayload.GAFVersionNumber,
				FieldsToCollect = amendValidationResponsePayload.fieldsToCollect?.Select(x => x.ConvertToDomain<SERVICE.InfoBase, DOMAIN.InfoBase>()).ToList(),
				Receipts = (amendValidationResponsePayload.receipts != null ? amendValidationResponsePayload.receipts.ConvertToDomain<SERVICE.PreCompletionReceiptType, DOMAIN.PreCompletionReceiptType>() : null),
				ReceiptInfo = (amendValidationResponsePayload.receiptInfo != null ? amendValidationResponsePayload.receiptInfo.ConvertToDomain<SERVICE.AmendValidationResponsePayloadReceiptInfo, DOMAIN.AmendValidationResponsePayloadReceiptInfo>() : null),
				DoCheckIn = amendValidationResponsePayload.doCheckIn,
				TimeStamp = amendValidationResponsePayload.timeStamp,
				Flags = amendValidationResponsePayload.flags,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.AmendValidationResponsePayloadReceiptInfo ToDomain(SERVICE.AmendValidationResponsePayloadReceiptInfo amendValidationResponsePayloadReceiptInfo)
		{
			var domainModel = new DOMAIN.AmendValidationResponsePayloadReceiptInfo {
				DisclosureTexts = amendValidationResponsePayloadReceiptInfo.disclosureTexts?.Select(x => x.ConvertToDomain<SERVICE.TextTranslationType, DOMAIN.TextTranslationType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DocumentItemType ToDomain(SERVICE.DocumentItemType documentItemType)
		{
			var domainModel = new DOMAIN.DocumentItemType {
				Label = documentItemType.label,
				Image = documentItemType.image,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SubagentProfileUpdateType ToDomain(SERVICE.SubagentProfileUpdateType subagentProfileUpdateType)
		{
			var domainModel = new DOMAIN.SubagentProfileUpdateType {
				AgentID = subagentProfileUpdateType.agentID,
				SequenceNumber = subagentProfileUpdateType.sequenceNumber,
				ProfileItemName = subagentProfileUpdateType.profileItemName,
				ProfileItemValue = subagentProfileUpdateType.profileItemValue,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerProfileDocumentContentType ToDomain(SERVICE.ConsumerProfileDocumentContentType consumerProfileDocumentContentType)
		{
			var domainModel = new DOMAIN.ConsumerProfileDocumentContentType {
				Identifier = consumerProfileDocumentContentType.identifier,
				DocumentIssueDate = consumerProfileDocumentContentType.documentIssueDate,
				MimeType = consumerProfileDocumentContentType.mimeType,
				ImageItems = consumerProfileDocumentContentType.imageItems?.Select(x => x.ConvertToDomain<SERVICE.ImageItemType, DOMAIN.ImageItemType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PersonalIDImageContentType ToDomain(SERVICE.PersonalIDImageContentType personalIDImageContentType)
		{
			var domainModel = new DOMAIN.PersonalIDImageContentType {
				Identifier = personalIDImageContentType.identifier,
				PersonalIDChoice = personalIDImageContentType.personalIDChoice,
				PersonalIDVerificationStr = personalIDImageContentType.personalIDVerificationStr,
				PersonalIDNumber = personalIDImageContentType.personalIDNumber,
				MimeType = personalIDImageContentType.mimeType,
				ImageItems = personalIDImageContentType.imageItems?.Select(x => x.ConvertToDomain<SERVICE.ImageItemType, DOMAIN.ImageItemType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerProfileImageContentType ToDomain(SERVICE.ConsumerProfileImageContentType consumerProfileImageContentType)
		{
			var domainModel = new DOMAIN.ConsumerProfileImageContentType {
				Identifier = consumerProfileImageContentType.identifier,
				MimeType = consumerProfileImageContentType.mimeType,
				Image = consumerProfileImageContentType.image?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiptType ToDomain(SERVICE.ReceiptType receiptType)
		{
			var domainModel = new DOMAIN.ReceiptType {
				ReceiptText = receiptType.receiptText,
				Md5CheckSum = receiptType.md5CheckSum,
				Version = receiptType.version,
				LongLanguageCode = receiptType.longLanguageCode,
				Province = receiptType.province,
				AdditionalLanguages = receiptType.additionalLanguages?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.UCPRequestPhoneType ToDomain(SERVICE.UCPRequestPhoneType uCPRequestPhoneType)
		{
			var domainModel = new DOMAIN.UCPRequestPhoneType {
				PhoneNumber = uCPRequestPhoneType.phoneNumber,
				Type = uCPRequestPhoneType.type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.UCPRequestEmailType ToDomain(SERVICE.UCPRequestEmailType uCPRequestEmailType)
		{
			var domainModel = new DOMAIN.UCPRequestEmailType {
				EmailAddress = uCPRequestEmailType.emailAddress,
				Type = uCPRequestEmailType.type,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.UCPRequestProfileType ToDomain(SERVICE.UCPRequestProfileType uCPRequestProfileType)
		{
			var domainModel = new DOMAIN.UCPRequestProfileType {
				DateOfBirth = uCPRequestProfileType.dateOfBirthSpecified == true ? (DateTime?)uCPRequestProfileType.dateOfBirth : null,
				EmailAddress = uCPRequestProfileType.emailAddress?.Select(x => x.ConvertToDomain<SERVICE.UCPRequestEmailType, DOMAIN.UCPRequestEmailType>()).ToList(),
				Name = uCPRequestProfileType.name?.Select(x => x.ConvertToDomain<SERVICE.NameType, DOMAIN.NameType>()).ToList(),
				PhoneNumber = uCPRequestProfileType.phoneNumber?.Select(x => x.ConvertToDomain<SERVICE.UCPRequestPhoneType, DOMAIN.UCPRequestPhoneType>()).ToList(),
				RawAddress = uCPRequestProfileType.rawAddress?.Select(x => x.ConvertToDomain<SERVICE.RawAddressType, DOMAIN.RawAddressType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PropertyType ToDomain(SERVICE.PropertyType propertyType)
		{
			var domainModel = new DOMAIN.PropertyType {
				Name = propertyType.Name,
				Value = propertyType.Value,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CustomFieldsType ToDomain(SERVICE.CustomFieldsType customFieldsType)
		{
			var domainModel = new DOMAIN.CustomFieldsType {
				NameValue = (customFieldsType.NameValue != null ? customFieldsType.NameValue.ConvertToDomain<SERVICE.PropertyType, DOMAIN.PropertyType>() : null),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DCATokenType ToDomain(SERVICE.DCATokenType dCATokenType)
		{
			var domainModel = new DOMAIN.DCATokenType {
				Key = dCATokenType.key,
				Value = dCATokenType.value,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.VersionInfo ToDomain(SERVICE.VersionInfo versionInfo)
		{
			var domainModel = new DOMAIN.VersionInfo {
				VersionType = versionInfo.versionType,
				VersionLevel = versionInfo.versionLevel,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyOrderInfo ToDomain(SERVICE.MoneyOrderInfo moneyOrderInfo)
		{
			var domainModel = new DOMAIN.MoneyOrderInfo {
				PrintStatus = (DOMAIN.MoneyOrderPrintStatusType)moneyOrderInfo.printStatus,
				MoAccountNumber = moneyOrderInfo.moAccountNumber,
				DeviceID = moneyOrderInfo.deviceID,
				SerialNumber = moneyOrderInfo.serialNumber,
				ItemAmount = moneyOrderInfo.itemAmountSpecified == true ? (decimal?)moneyOrderInfo.itemAmount : null,
				DateTimePrinted = moneyOrderInfo.dateTimePrintedSpecified == true ? (DateTime?)moneyOrderInfo.dateTimePrinted : null,
				ItemFee = moneyOrderInfo.itemFeeSpecified == true ? (decimal?)moneyOrderInfo.itemFee : null,
				PeriodNumber = moneyOrderInfo.periodNumber,
				DocumentSequenceNbr = moneyOrderInfo.documentSequenceNbr,
				DocumentType = moneyOrderInfo.documentType,
				DispenserID = moneyOrderInfo.dispenserID,
				VoidFlag = moneyOrderInfo.voidFlagSpecified == true ? (bool?)moneyOrderInfo.voidFlag : null,
				VoidReasonCode = moneyOrderInfo.voidReasonCodeSpecified == true ? (DOMAIN.MoneyOrderVoidReasonCodeType?)moneyOrderInfo.voidReasonCode : null,
				TaxID = moneyOrderInfo.taxID,
				EmployeeID = moneyOrderInfo.employeeID,
				VendorNumber = moneyOrderInfo.vendorNumber,
				RemoteIssuanceFlag = moneyOrderInfo.remoteIssuanceFlagSpecified == true ? (bool?)moneyOrderInfo.remoteIssuanceFlag : null,
				SaleIssuanceTag = moneyOrderInfo.saleIssuanceTag,
				DiscountPercentage = moneyOrderInfo.discountPercentageSpecified == true ? (decimal?)moneyOrderInfo.discountPercentage : null,
				DiscountAmount = moneyOrderInfo.discountAmountSpecified == true ? (decimal?)moneyOrderInfo.discountAmount : null,
				AccountingStartDay = moneyOrderInfo.accountingStartDay,
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiptImageContentType ToDomain(SERVICE.ReceiptImageContentType receiptImageContentType)
		{
			var domainModel = new DOMAIN.ReceiptImageContentType {
				Identifier = receiptImageContentType.identifier,
				MimeType = receiptImageContentType.mimeType,
				Image = receiptImageContentType.image?.ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.Request ToDomain(SERVICE.Request request)
		{
			var domainModel = new DOMAIN.Request {
				UnitProfileID = request.unitProfileIDSpecified == true ? (int?)request.unitProfileID : null,
				AgentID = request.agentID,
				AgentSequence = request.agentSequence,
				Language = request.language,
				MgiSessionID = request.mgiSessionID,
				TimeStamp = request.timeStamp,
				ClientSoftwareVersion = request.clientSoftwareVersion,
				PoeType = request.poeType,
				ChannelType = request.channelType,
				OperatorName = request.operatorName,
				TargetAudience = request.targetAudience,
				PoeCapabilities = request.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.VersionManifestRequest ToDomain(SERVICE.VersionManifestRequest versionManifestRequest)
		{
			var domainModel = new DOMAIN.VersionManifestRequest {
				UnitProfileID = versionManifestRequest.unitProfileIDSpecified == true ? (int?)versionManifestRequest.unitProfileID : null,
				AgentID = versionManifestRequest.agentID,
				AgentSequence = versionManifestRequest.agentSequence,
				Language = versionManifestRequest.language,
				MgiSessionID = versionManifestRequest.mgiSessionID,
				TimeStamp = versionManifestRequest.timeStamp,
				ClientSoftwareVersion = versionManifestRequest.clientSoftwareVersion,
				PoeType = versionManifestRequest.poeType,
				ChannelType = versionManifestRequest.channelType,
				OperatorName = versionManifestRequest.operatorName,
				TargetAudience = versionManifestRequest.targetAudience,
				PoeCapabilities = versionManifestRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.VariableReceiptInfoRequest ToDomain(SERVICE.VariableReceiptInfoRequest variableReceiptInfoRequest)
		{
			var domainModel = new DOMAIN.VariableReceiptInfoRequest {
				Languages = variableReceiptInfoRequest.languages?.ToList(),
				UnitProfileID = variableReceiptInfoRequest.unitProfileIDSpecified == true ? (int?)variableReceiptInfoRequest.unitProfileID : null,
				AgentID = variableReceiptInfoRequest.agentID,
				AgentSequence = variableReceiptInfoRequest.agentSequence,
				Language = variableReceiptInfoRequest.language,
				MgiSessionID = variableReceiptInfoRequest.mgiSessionID,
				TimeStamp = variableReceiptInfoRequest.timeStamp,
				ClientSoftwareVersion = variableReceiptInfoRequest.clientSoftwareVersion,
				PoeType = variableReceiptInfoRequest.poeType,
				ChannelType = variableReceiptInfoRequest.channelType,
				OperatorName = variableReceiptInfoRequest.operatorName,
				TargetAudience = variableReceiptInfoRequest.targetAudience,
				PoeCapabilities = variableReceiptInfoRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.TranslationsRequest ToDomain(SERVICE.TranslationsRequest translationsRequest)
		{
			var domainModel = new DOMAIN.TranslationsRequest {
				LanguageCodes = translationsRequest.languageCodes,
				UnitProfileID = translationsRequest.unitProfileIDSpecified == true ? (int?)translationsRequest.unitProfileID : null,
				AgentID = translationsRequest.agentID,
				AgentSequence = translationsRequest.agentSequence,
				Language = translationsRequest.language,
				MgiSessionID = translationsRequest.mgiSessionID,
				TimeStamp = translationsRequest.timeStamp,
				ClientSoftwareVersion = translationsRequest.clientSoftwareVersion,
				PoeType = translationsRequest.poeType,
				ChannelType = translationsRequest.channelType,
				OperatorName = translationsRequest.operatorName,
				TargetAudience = translationsRequest.targetAudience,
				PoeCapabilities = translationsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.TransactionLookupRequest ToDomain(SERVICE.TransactionLookupRequest transactionLookupRequest)
		{
			var domainModel = new DOMAIN.TransactionLookupRequest {
				GAFVersionNumber = transactionLookupRequest.GAFVersionNumber,
				PurposeOfLookup = transactionLookupRequest.purposeOfLookup,
				ReferenceNumber = transactionLookupRequest.referenceNumber,
				ConfirmationNumber = transactionLookupRequest.confirmationNumber,
				TransactionPin = transactionLookupRequest.transactionPin,
				UnitProfileID = transactionLookupRequest.unitProfileIDSpecified == true ? (int?)transactionLookupRequest.unitProfileID : null,
				AgentID = transactionLookupRequest.agentID,
				AgentSequence = transactionLookupRequest.agentSequence,
				Language = transactionLookupRequest.language,
				MgiSessionID = transactionLookupRequest.mgiSessionID,
				TimeStamp = transactionLookupRequest.timeStamp,
				ClientSoftwareVersion = transactionLookupRequest.clientSoftwareVersion,
				PoeType = transactionLookupRequest.poeType,
				ChannelType = transactionLookupRequest.channelType,
				OperatorName = transactionLookupRequest.operatorName,
				TargetAudience = transactionLookupRequest.targetAudience,
				PoeCapabilities = transactionLookupRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SubagentsRequest ToDomain(SERVICE.SubagentsRequest subagentsRequest)
		{
			var domainModel = new DOMAIN.SubagentsRequest {
				UnitProfileID = subagentsRequest.unitProfileIDSpecified == true ? (int?)subagentsRequest.unitProfileID : null,
				AgentID = subagentsRequest.agentID,
				AgentSequence = subagentsRequest.agentSequence,
				Language = subagentsRequest.language,
				MgiSessionID = subagentsRequest.mgiSessionID,
				TimeStamp = subagentsRequest.timeStamp,
				ClientSoftwareVersion = subagentsRequest.clientSoftwareVersion,
				PoeType = subagentsRequest.poeType,
				ChannelType = subagentsRequest.channelType,
				OperatorName = subagentsRequest.operatorName,
				TargetAudience = subagentsRequest.targetAudience,
				PoeCapabilities = subagentsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SendValidationRequest ToDomain(SERVICE.SendValidationRequest sendValidationRequest)
		{
			var domainModel = new DOMAIN.SendValidationRequest {
				GAFVersionNumber = sendValidationRequest.GAFVersionNumber,
				TransactionStaging = sendValidationRequest.transactionStaging,
				SendAmount = sendValidationRequest.sendAmount,
				SendCurrency = sendValidationRequest.sendCurrency,
				FeeAmount = sendValidationRequest.feeAmountSpecified == true ? (decimal?)sendValidationRequest.feeAmount : null,
				PromoCodes = sendValidationRequest.promoCodes?.ToList(),
				DestinationCountry = sendValidationRequest.destinationCountry,
				ServiceOption = sendValidationRequest.serviceOption,
				ReceiveCurrency = sendValidationRequest.receiveCurrency,
				ReceiveAgentID = sendValidationRequest.receiveAgentID,
				FieldValues = sendValidationRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				VerifiedFields = sendValidationRequest.verifiedFields?.ToList(),
				PrimaryReceiptLanguage = sendValidationRequest.primaryReceiptLanguage,
				SecondaryReceiptLanguage = sendValidationRequest.secondaryReceiptLanguage,
				ReceiptImages = sendValidationRequest.receiptImages?.Select(x => x.ConvertToDomain<SERVICE.ReceiptImageContentType, DOMAIN.ReceiptImageContentType>()).ToList(),
				UnitProfileID = sendValidationRequest.unitProfileIDSpecified == true ? (int?)sendValidationRequest.unitProfileID : null,
				AgentID = sendValidationRequest.agentID,
				AgentSequence = sendValidationRequest.agentSequence,
				Language = sendValidationRequest.language,
				MgiSessionID = sendValidationRequest.mgiSessionID,
				TimeStamp = sendValidationRequest.timeStamp,
				ClientSoftwareVersion = sendValidationRequest.clientSoftwareVersion,
				PoeType = sendValidationRequest.poeType,
				ChannelType = sendValidationRequest.channelType,
				OperatorName = sendValidationRequest.operatorName,
				TargetAudience = sendValidationRequest.targetAudience,
				PoeCapabilities = sendValidationRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SendReversalValidationRequest ToDomain(SERVICE.SendReversalValidationRequest sendReversalValidationRequest)
		{
			var domainModel = new DOMAIN.SendReversalValidationRequest {
				GAFVersionNumber = sendReversalValidationRequest.GAFVersionNumber,
				SendAmount = sendReversalValidationRequest.sendAmount,
				SendCurrency = sendReversalValidationRequest.sendCurrency,
				FeeRefund = sendReversalValidationRequest.feeRefund,
				FieldValues = sendReversalValidationRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				VerifiedFields = sendReversalValidationRequest.verifiedFields?.ToList(),
				PrimaryReceiptLanguage = sendReversalValidationRequest.primaryReceiptLanguage,
				SecondaryReceiptLanguage = sendReversalValidationRequest.secondaryReceiptLanguage,
				ReceiptImages = sendReversalValidationRequest.receiptImages?.Select(x => x.ConvertToDomain<SERVICE.ReceiptImageContentType, DOMAIN.ReceiptImageContentType>()).ToList(),
				UnitProfileID = sendReversalValidationRequest.unitProfileIDSpecified == true ? (int?)sendReversalValidationRequest.unitProfileID : null,
				AgentID = sendReversalValidationRequest.agentID,
				AgentSequence = sendReversalValidationRequest.agentSequence,
				Language = sendReversalValidationRequest.language,
				MgiSessionID = sendReversalValidationRequest.mgiSessionID,
				TimeStamp = sendReversalValidationRequest.timeStamp,
				ClientSoftwareVersion = sendReversalValidationRequest.clientSoftwareVersion,
				PoeType = sendReversalValidationRequest.poeType,
				ChannelType = sendReversalValidationRequest.channelType,
				OperatorName = sendReversalValidationRequest.operatorName,
				TargetAudience = sendReversalValidationRequest.targetAudience,
				PoeCapabilities = sendReversalValidationRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SearchStagedTransactionsRequest ToDomain(SERVICE.SearchStagedTransactionsRequest searchStagedTransactionsRequest)
		{
			var domainModel = new DOMAIN.SearchStagedTransactionsRequest {
				MgiRewardsNumber = searchStagedTransactionsRequest.mgiRewardsNumber,
				SenderPhoneNumber = searchStagedTransactionsRequest.senderPhoneNumber,
				SenderFirstName = searchStagedTransactionsRequest.senderFirstName,
				SenderLastName = searchStagedTransactionsRequest.senderLastName,
				BillerAccountNumber = searchStagedTransactionsRequest.billerAccountNumber,
				MgiSessionType = searchStagedTransactionsRequest.mgiSessionTypeSpecified == true ? (DOMAIN.SessionType?)searchStagedTransactionsRequest.mgiSessionType : null,
				ThisLocationOnly = searchStagedTransactionsRequest.thisLocationOnly,
				MaxRowsToReturn = searchStagedTransactionsRequest.maxRowsToReturn,
				ReturnFormFreeOnly = searchStagedTransactionsRequest.returnFormFreeOnly,
				UnitProfileID = searchStagedTransactionsRequest.unitProfileIDSpecified == true ? (int?)searchStagedTransactionsRequest.unitProfileID : null,
				AgentID = searchStagedTransactionsRequest.agentID,
				AgentSequence = searchStagedTransactionsRequest.agentSequence,
				Language = searchStagedTransactionsRequest.language,
				MgiSessionID = searchStagedTransactionsRequest.mgiSessionID,
				TimeStamp = searchStagedTransactionsRequest.timeStamp,
				ClientSoftwareVersion = searchStagedTransactionsRequest.clientSoftwareVersion,
				PoeType = searchStagedTransactionsRequest.poeType,
				ChannelType = searchStagedTransactionsRequest.channelType,
				OperatorName = searchStagedTransactionsRequest.operatorName,
				TargetAudience = searchStagedTransactionsRequest.targetAudience,
				PoeCapabilities = searchStagedTransactionsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SearchConsumerProfilesRequest ToDomain(SERVICE.SearchConsumerProfilesRequest searchConsumerProfilesRequest)
		{
			var domainModel = new DOMAIN.SearchConsumerProfilesRequest {
				GAFVersionNumber = searchConsumerProfilesRequest.GAFVersionNumber,
				FieldValues = searchConsumerProfilesRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				UnitProfileID = searchConsumerProfilesRequest.unitProfileIDSpecified == true ? (int?)searchConsumerProfilesRequest.unitProfileID : null,
				AgentID = searchConsumerProfilesRequest.agentID,
				AgentSequence = searchConsumerProfilesRequest.agentSequence,
				Language = searchConsumerProfilesRequest.language,
				MgiSessionID = searchConsumerProfilesRequest.mgiSessionID,
				TimeStamp = searchConsumerProfilesRequest.timeStamp,
				ClientSoftwareVersion = searchConsumerProfilesRequest.clientSoftwareVersion,
				PoeType = searchConsumerProfilesRequest.poeType,
				ChannelType = searchConsumerProfilesRequest.channelType,
				OperatorName = searchConsumerProfilesRequest.operatorName,
				TargetAudience = searchConsumerProfilesRequest.targetAudience,
				PoeCapabilities = searchConsumerProfilesRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveTransactionDocumentRequest ToDomain(SERVICE.SaveTransactionDocumentRequest saveTransactionDocumentRequest)
		{
			var domainModel = new DOMAIN.SaveTransactionDocumentRequest {
				SessionType = (DOMAIN.SessionType)saveTransactionDocumentRequest.sessionType,
				ReferenceNumber = saveTransactionDocumentRequest.referenceNumber,
				SenderFirstName = saveTransactionDocumentRequest.senderFirstName,
				SenderMiddleName = saveTransactionDocumentRequest.senderMiddleName,
				SenderLastName = saveTransactionDocumentRequest.senderLastName,
				SenderLastName2 = saveTransactionDocumentRequest.senderLastName2,
				ReceiverFirstName = saveTransactionDocumentRequest.receiverFirstName,
				ReceiverMiddleName = saveTransactionDocumentRequest.receiverMiddleName,
				ReceiverLastName = saveTransactionDocumentRequest.receiverLastName,
				ReceiverLastName2 = saveTransactionDocumentRequest.receiverLastName2,
				Identifier = saveTransactionDocumentRequest.identifier,
				MimeType = saveTransactionDocumentRequest.mimeType,
				DocumentItems = saveTransactionDocumentRequest.documentItems?.Select(x => x.ConvertToDomain<SERVICE.DocumentItemType, DOMAIN.DocumentItemType>()).ToList(),
				UnitProfileID = saveTransactionDocumentRequest.unitProfileIDSpecified == true ? (int?)saveTransactionDocumentRequest.unitProfileID : null,
				AgentID = saveTransactionDocumentRequest.agentID,
				AgentSequence = saveTransactionDocumentRequest.agentSequence,
				Language = saveTransactionDocumentRequest.language,
				MgiSessionID = saveTransactionDocumentRequest.mgiSessionID,
				TimeStamp = saveTransactionDocumentRequest.timeStamp,
				ClientSoftwareVersion = saveTransactionDocumentRequest.clientSoftwareVersion,
				PoeType = saveTransactionDocumentRequest.poeType,
				ChannelType = saveTransactionDocumentRequest.channelType,
				OperatorName = saveTransactionDocumentRequest.operatorName,
				TargetAudience = saveTransactionDocumentRequest.targetAudience,
				PoeCapabilities = saveTransactionDocumentRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveSubagentsRequest ToDomain(SERVICE.SaveSubagentsRequest saveSubagentsRequest)
		{
			var domainModel = new DOMAIN.SaveSubagentsRequest {
				SubagentProfileUpdates = saveSubagentsRequest.subagentProfileUpdates?.Select(x => x.ConvertToDomain<SERVICE.SubagentProfileUpdateType, DOMAIN.SubagentProfileUpdateType>()).ToList(),
				UnitProfileID = saveSubagentsRequest.unitProfileIDSpecified == true ? (int?)saveSubagentsRequest.unitProfileID : null,
				AgentID = saveSubagentsRequest.agentID,
				AgentSequence = saveSubagentsRequest.agentSequence,
				Language = saveSubagentsRequest.language,
				MgiSessionID = saveSubagentsRequest.mgiSessionID,
				TimeStamp = saveSubagentsRequest.timeStamp,
				ClientSoftwareVersion = saveSubagentsRequest.clientSoftwareVersion,
				PoeType = saveSubagentsRequest.poeType,
				ChannelType = saveSubagentsRequest.channelType,
				OperatorName = saveSubagentsRequest.operatorName,
				TargetAudience = saveSubagentsRequest.targetAudience,
				PoeCapabilities = saveSubagentsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveProfileRequest ToDomain(SERVICE.SaveProfileRequest saveProfileRequest)
		{
			var domainModel = new DOMAIN.SaveProfileRequest {
				ProfileItems = saveProfileRequest.profileItems?.Select(x => x.ConvertToDomain<SERVICE.ProfileItemType, DOMAIN.ProfileItemType>()).ToList(),
				ProductProfileItems = saveProfileRequest.productProfileItems?.Select(x => x.ConvertToDomain<SERVICE.ProductProfileItemType, DOMAIN.ProductProfileItemType>()).ToList(),
				EmployeeProfileItems = saveProfileRequest.employeeProfileItems?.Select(x => x.ConvertToDomain<SERVICE.EmployeeProfileItemType, DOMAIN.EmployeeProfileItemType>()).ToList(),
				UnitProfileID = saveProfileRequest.unitProfileIDSpecified == true ? (int?)saveProfileRequest.unitProfileID : null,
				AgentID = saveProfileRequest.agentID,
				AgentSequence = saveProfileRequest.agentSequence,
				Language = saveProfileRequest.language,
				MgiSessionID = saveProfileRequest.mgiSessionID,
				TimeStamp = saveProfileRequest.timeStamp,
				ClientSoftwareVersion = saveProfileRequest.clientSoftwareVersion,
				PoeType = saveProfileRequest.poeType,
				ChannelType = saveProfileRequest.channelType,
				OperatorName = saveProfileRequest.operatorName,
				TargetAudience = saveProfileRequest.targetAudience,
				PoeCapabilities = saveProfileRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveDebugDataRequest ToDomain(SERVICE.SaveDebugDataRequest saveDebugDataRequest)
		{
			var domainModel = new DOMAIN.SaveDebugDataRequest {
				EndOfLog = saveDebugDataRequest.endOfLog,
				CollectionEndTimestamp = saveDebugDataRequest.collectionEndTimestamp,
				Length = saveDebugDataRequest.length,
				SequenceNumber = saveDebugDataRequest.sequenceNumber,
				DebugData = saveDebugDataRequest.debugData,
				UnitProfileID = saveDebugDataRequest.unitProfileIDSpecified == true ? (int?)saveDebugDataRequest.unitProfileID : null,
				AgentID = saveDebugDataRequest.agentID,
				AgentSequence = saveDebugDataRequest.agentSequence,
				Language = saveDebugDataRequest.language,
				MgiSessionID = saveDebugDataRequest.mgiSessionID,
				TimeStamp = saveDebugDataRequest.timeStamp,
				ClientSoftwareVersion = saveDebugDataRequest.clientSoftwareVersion,
				PoeType = saveDebugDataRequest.poeType,
				ChannelType = saveDebugDataRequest.channelType,
				OperatorName = saveDebugDataRequest.operatorName,
				TargetAudience = saveDebugDataRequest.targetAudience,
				PoeCapabilities = saveDebugDataRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveConsumerProfileDocumentRequest ToDomain(SERVICE.SaveConsumerProfileDocumentRequest saveConsumerProfileDocumentRequest)
		{
			var domainModel = new DOMAIN.SaveConsumerProfileDocumentRequest {
				ConsumerProfileID = saveConsumerProfileDocumentRequest.consumerProfileID,
				ConsumerProfileIDType = saveConsumerProfileDocumentRequest.consumerProfileIDType,
				ConsumerProfileDocument = (saveConsumerProfileDocumentRequest.consumerProfileDocument != null ? saveConsumerProfileDocumentRequest.consumerProfileDocument.ConvertToDomain<SERVICE.ConsumerProfileDocumentContentType, DOMAIN.ConsumerProfileDocumentContentType>() : null),
				UnitProfileID = saveConsumerProfileDocumentRequest.unitProfileIDSpecified == true ? (int?)saveConsumerProfileDocumentRequest.unitProfileID : null,
				AgentID = saveConsumerProfileDocumentRequest.agentID,
				AgentSequence = saveConsumerProfileDocumentRequest.agentSequence,
				Language = saveConsumerProfileDocumentRequest.language,
				MgiSessionID = saveConsumerProfileDocumentRequest.mgiSessionID,
				TimeStamp = saveConsumerProfileDocumentRequest.timeStamp,
				ClientSoftwareVersion = saveConsumerProfileDocumentRequest.clientSoftwareVersion,
				PoeType = saveConsumerProfileDocumentRequest.poeType,
				ChannelType = saveConsumerProfileDocumentRequest.channelType,
				OperatorName = saveConsumerProfileDocumentRequest.operatorName,
				TargetAudience = saveConsumerProfileDocumentRequest.targetAudience,
				PoeCapabilities = saveConsumerProfileDocumentRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SavePersonalIDImageRequest ToDomain(SERVICE.SavePersonalIDImageRequest savePersonalIDImageRequest)
		{
			var domainModel = new DOMAIN.SavePersonalIDImageRequest {
				ConsumerProfileID = savePersonalIDImageRequest.consumerProfileID,
				ConsumerProfileIDType = savePersonalIDImageRequest.consumerProfileIDType,
				PersonalIDImage = (savePersonalIDImageRequest.personalIDImage != null ? savePersonalIDImageRequest.personalIDImage.ConvertToDomain<SERVICE.PersonalIDImageContentType, DOMAIN.PersonalIDImageContentType>() : null),
				UnitProfileID = savePersonalIDImageRequest.unitProfileIDSpecified == true ? (int?)savePersonalIDImageRequest.unitProfileID : null,
				AgentID = savePersonalIDImageRequest.agentID,
				AgentSequence = savePersonalIDImageRequest.agentSequence,
				Language = savePersonalIDImageRequest.language,
				MgiSessionID = savePersonalIDImageRequest.mgiSessionID,
				TimeStamp = savePersonalIDImageRequest.timeStamp,
				ClientSoftwareVersion = savePersonalIDImageRequest.clientSoftwareVersion,
				PoeType = savePersonalIDImageRequest.poeType,
				ChannelType = savePersonalIDImageRequest.channelType,
				OperatorName = savePersonalIDImageRequest.operatorName,
				TargetAudience = savePersonalIDImageRequest.targetAudience,
				PoeCapabilities = savePersonalIDImageRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.SaveConsumerProfileImageRequest ToDomain(SERVICE.SaveConsumerProfileImageRequest saveConsumerProfileImageRequest)
		{
			var domainModel = new DOMAIN.SaveConsumerProfileImageRequest {
				GAFVersionNumber = saveConsumerProfileImageRequest.GAFVersionNumber,
				ConsumerProfileID = saveConsumerProfileImageRequest.consumerProfileID,
				ConsumerProfileIDType = saveConsumerProfileImageRequest.consumerProfileIDType,
				ConsumerProfileImage = (saveConsumerProfileImageRequest.ConsumerProfileImage != null ? saveConsumerProfileImageRequest.ConsumerProfileImage.ConvertToDomain<SERVICE.ConsumerProfileImageContentType, DOMAIN.ConsumerProfileImageContentType>() : null),
				FieldValues = saveConsumerProfileImageRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				UnitProfileID = saveConsumerProfileImageRequest.unitProfileIDSpecified == true ? (int?)saveConsumerProfileImageRequest.unitProfileID : null,
				AgentID = saveConsumerProfileImageRequest.agentID,
				AgentSequence = saveConsumerProfileImageRequest.agentSequence,
				Language = saveConsumerProfileImageRequest.language,
				MgiSessionID = saveConsumerProfileImageRequest.mgiSessionID,
				TimeStamp = saveConsumerProfileImageRequest.timeStamp,
				ClientSoftwareVersion = saveConsumerProfileImageRequest.clientSoftwareVersion,
				PoeType = saveConsumerProfileImageRequest.poeType,
				ChannelType = saveConsumerProfileImageRequest.channelType,
				OperatorName = saveConsumerProfileImageRequest.operatorName,
				TargetAudience = saveConsumerProfileImageRequest.targetAudience,
				PoeCapabilities = saveConsumerProfileImageRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.RegisterHardTokenRequest ToDomain(SERVICE.RegisterHardTokenRequest registerHardTokenRequest)
		{
			var domainModel = new DOMAIN.RegisterHardTokenRequest {
				LdapUserId = registerHardTokenRequest.ldapUserId,
				HardToken = registerHardTokenRequest.hardToken,
				UnitProfileID = registerHardTokenRequest.unitProfileIDSpecified == true ? (int?)registerHardTokenRequest.unitProfileID : null,
				AgentID = registerHardTokenRequest.agentID,
				AgentSequence = registerHardTokenRequest.agentSequence,
				Language = registerHardTokenRequest.language,
				MgiSessionID = registerHardTokenRequest.mgiSessionID,
				TimeStamp = registerHardTokenRequest.timeStamp,
				ClientSoftwareVersion = registerHardTokenRequest.clientSoftwareVersion,
				PoeType = registerHardTokenRequest.poeType,
				ChannelType = registerHardTokenRequest.channelType,
				OperatorName = registerHardTokenRequest.operatorName,
				TargetAudience = registerHardTokenRequest.targetAudience,
				PoeCapabilities = registerHardTokenRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiveValidationRequest ToDomain(SERVICE.ReceiveValidationRequest receiveValidationRequest)
		{
			var domainModel = new DOMAIN.ReceiveValidationRequest {
				GAFVersionNumber = receiveValidationRequest.GAFVersionNumber,
				TransactionStaging = receiveValidationRequest.transactionStaging,
				ReceiveCurrency = receiveValidationRequest.receiveCurrency,
				ReceiveAmount = receiveValidationRequest.receiveAmount,
				FieldValues = receiveValidationRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				VerifiedFields = receiveValidationRequest.verifiedFields?.ToList(),
				PrimaryReceiptLanguage = receiveValidationRequest.primaryReceiptLanguage,
				SecondaryReceiptLanguage = receiveValidationRequest.secondaryReceiptLanguage,
				ReceiptImages = receiveValidationRequest.receiptImages?.Select(x => x.ConvertToDomain<SERVICE.ReceiptImageContentType, DOMAIN.ReceiptImageContentType>()).ToList(),
				UnitProfileID = receiveValidationRequest.unitProfileIDSpecified == true ? (int?)receiveValidationRequest.unitProfileID : null,
				AgentID = receiveValidationRequest.agentID,
				AgentSequence = receiveValidationRequest.agentSequence,
				Language = receiveValidationRequest.language,
				MgiSessionID = receiveValidationRequest.mgiSessionID,
				TimeStamp = receiveValidationRequest.timeStamp,
				ClientSoftwareVersion = receiveValidationRequest.clientSoftwareVersion,
				PoeType = receiveValidationRequest.poeType,
				ChannelType = receiveValidationRequest.channelType,
				OperatorName = receiveValidationRequest.operatorName,
				TargetAudience = receiveValidationRequest.targetAudience,
				PoeCapabilities = receiveValidationRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiveReversalValidationRequest ToDomain(SERVICE.ReceiveReversalValidationRequest receiveReversalValidationRequest)
		{
			var domainModel = new DOMAIN.ReceiveReversalValidationRequest {
				GAFVersionNumber = receiveReversalValidationRequest.GAFVersionNumber,
				ReceiveAmount = receiveReversalValidationRequest.receiveAmount,
				ReceiveCurrency = receiveReversalValidationRequest.receiveCurrency,
				FieldValues = receiveReversalValidationRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				VerifiedFields = receiveReversalValidationRequest.verifiedFields?.ToList(),
				PrimaryReceiptLanguage = receiveReversalValidationRequest.primaryReceiptLanguage,
				SecondaryReceiptLanguage = receiveReversalValidationRequest.secondaryReceiptLanguage,
				ReceiptImages = receiveReversalValidationRequest.receiptImages?.Select(x => x.ConvertToDomain<SERVICE.ReceiptImageContentType, DOMAIN.ReceiptImageContentType>()).ToList(),
				UnitProfileID = receiveReversalValidationRequest.unitProfileIDSpecified == true ? (int?)receiveReversalValidationRequest.unitProfileID : null,
				AgentID = receiveReversalValidationRequest.agentID,
				AgentSequence = receiveReversalValidationRequest.agentSequence,
				Language = receiveReversalValidationRequest.language,
				MgiSessionID = receiveReversalValidationRequest.mgiSessionID,
				TimeStamp = receiveReversalValidationRequest.timeStamp,
				ClientSoftwareVersion = receiveReversalValidationRequest.clientSoftwareVersion,
				PoeType = receiveReversalValidationRequest.poeType,
				ChannelType = receiveReversalValidationRequest.channelType,
				OperatorName = receiveReversalValidationRequest.operatorName,
				TargetAudience = receiveReversalValidationRequest.targetAudience,
				PoeCapabilities = receiveReversalValidationRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ReceiptsFormatDetailsRequest ToDomain(SERVICE.ReceiptsFormatDetailsRequest receiptsFormatDetailsRequest)
		{
			var domainModel = new DOMAIN.ReceiptsFormatDetailsRequest {
				PaperFormat = receiptsFormatDetailsRequest.paperFormat,
				MimeType = receiptsFormatDetailsRequest.mimeType,
				DownloadAsAttachment = receiptsFormatDetailsRequest.downloadAsAttachmentSpecified == true ? (bool?)receiptsFormatDetailsRequest.downloadAsAttachment : null,
				Languages = receiptsFormatDetailsRequest.languages?.ToList(),
				DcaTokenValues = receiptsFormatDetailsRequest.dcaTokenValues?.Select(x => x.ConvertToDomain<SERVICE.DCATokenType, DOMAIN.DCATokenType>()).ToList(),
				ReceiptTypeValues = receiptsFormatDetailsRequest.receiptTypeValues?.Select(x => x.ConvertToDomain<SERVICE.ReceiptType, DOMAIN.ReceiptType>()).ToList(),
				UnitProfileID = receiptsFormatDetailsRequest.unitProfileIDSpecified == true ? (int?)receiptsFormatDetailsRequest.unitProfileID : null,
				AgentID = receiptsFormatDetailsRequest.agentID,
				AgentSequence = receiptsFormatDetailsRequest.agentSequence,
				Language = receiptsFormatDetailsRequest.language,
				MgiSessionID = receiptsFormatDetailsRequest.mgiSessionID,
				TimeStamp = receiptsFormatDetailsRequest.timeStamp,
				ClientSoftwareVersion = receiptsFormatDetailsRequest.clientSoftwareVersion,
				PoeType = receiptsFormatDetailsRequest.poeType,
				ChannelType = receiptsFormatDetailsRequest.channelType,
				OperatorName = receiptsFormatDetailsRequest.operatorName,
				TargetAudience = receiptsFormatDetailsRequest.targetAudience,
				PoeCapabilities = receiptsFormatDetailsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.PromotionLookupByCodeRequest ToDomain(SERVICE.PromotionLookupByCodeRequest promotionLookupByCodeRequest)
		{
			var domainModel = new DOMAIN.PromotionLookupByCodeRequest {
				PromotionCode = promotionLookupByCodeRequest.promotionCode,
				UnitProfileID = promotionLookupByCodeRequest.unitProfileIDSpecified == true ? (int?)promotionLookupByCodeRequest.unitProfileID : null,
				AgentID = promotionLookupByCodeRequest.agentID,
				AgentSequence = promotionLookupByCodeRequest.agentSequence,
				Language = promotionLookupByCodeRequest.language,
				MgiSessionID = promotionLookupByCodeRequest.mgiSessionID,
				TimeStamp = promotionLookupByCodeRequest.timeStamp,
				ClientSoftwareVersion = promotionLookupByCodeRequest.clientSoftwareVersion,
				PoeType = promotionLookupByCodeRequest.poeType,
				ChannelType = promotionLookupByCodeRequest.channelType,
				OperatorName = promotionLookupByCodeRequest.operatorName,
				TargetAudience = promotionLookupByCodeRequest.targetAudience,
				PoeCapabilities = promotionLookupByCodeRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ProfileRequest ToDomain(SERVICE.ProfileRequest profileRequest)
		{
			var domainModel = new DOMAIN.ProfileRequest {
				UnitProfileID = profileRequest.unitProfileIDSpecified == true ? (int?)profileRequest.unitProfileID : null,
				AgentID = profileRequest.agentID,
				AgentSequence = profileRequest.agentSequence,
				Language = profileRequest.language,
				MgiSessionID = profileRequest.mgiSessionID,
				TimeStamp = profileRequest.timeStamp,
				ClientSoftwareVersion = profileRequest.clientSoftwareVersion,
				PoeType = profileRequest.poeType,
				ChannelType = profileRequest.channelType,
				OperatorName = profileRequest.operatorName,
				TargetAudience = profileRequest.targetAudience,
				PoeCapabilities = profileRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ProfileChangeRequest ToDomain(SERVICE.ProfileChangeRequest profileChangeRequest)
		{
			var domainModel = new DOMAIN.ProfileChangeRequest {
				Profile = profileChangeRequest.profile,
				UnitProfileID = profileChangeRequest.unitProfileIDSpecified == true ? (int?)profileChangeRequest.unitProfileID : null,
				AgentID = profileChangeRequest.agentID,
				AgentSequence = profileChangeRequest.agentSequence,
				Language = profileChangeRequest.language,
				MgiSessionID = profileChangeRequest.mgiSessionID,
				TimeStamp = profileChangeRequest.timeStamp,
				ClientSoftwareVersion = profileChangeRequest.clientSoftwareVersion,
				PoeType = profileChangeRequest.poeType,
				ChannelType = profileChangeRequest.channelType,
				OperatorName = profileChangeRequest.operatorName,
				TargetAudience = profileChangeRequest.targetAudience,
				PoeCapabilities = profileChangeRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.OpenOTPLoginRequest ToDomain(SERVICE.OpenOTPLoginRequest openOTPLoginRequest)
		{
			var domainModel = new DOMAIN.OpenOTPLoginRequest {
				LdapUserId = openOTPLoginRequest.ldapUserId,
				Password = openOTPLoginRequest.password,
				UnitProfileID = openOTPLoginRequest.unitProfileIDSpecified == true ? (int?)openOTPLoginRequest.unitProfileID : null,
				AgentID = openOTPLoginRequest.agentID,
				AgentSequence = openOTPLoginRequest.agentSequence,
				Language = openOTPLoginRequest.language,
				MgiSessionID = openOTPLoginRequest.mgiSessionID,
				TimeStamp = openOTPLoginRequest.timeStamp,
				ClientSoftwareVersion = openOTPLoginRequest.clientSoftwareVersion,
				PoeType = openOTPLoginRequest.poeType,
				ChannelType = openOTPLoginRequest.channelType,
				OperatorName = openOTPLoginRequest.operatorName,
				TargetAudience = openOTPLoginRequest.targetAudience,
				PoeCapabilities = openOTPLoginRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyOrderTotalRequest ToDomain(SERVICE.MoneyOrderTotalRequest moneyOrderTotalRequest)
		{
			var domainModel = new DOMAIN.MoneyOrderTotalRequest {
				BatchID = moneyOrderTotalRequest.batchID,
				BatchCount = moneyOrderTotalRequest.batchCount,
				BatchTotal = moneyOrderTotalRequest.batchTotalSpecified == true ? (decimal?)moneyOrderTotalRequest.batchTotal : null,
				MoAccountNumber = moneyOrderTotalRequest.moAccountNumber,
				UnitProfileID = moneyOrderTotalRequest.unitProfileIDSpecified == true ? (int?)moneyOrderTotalRequest.unitProfileID : null,
				AgentID = moneyOrderTotalRequest.agentID,
				AgentSequence = moneyOrderTotalRequest.agentSequence,
				Language = moneyOrderTotalRequest.language,
				MgiSessionID = moneyOrderTotalRequest.mgiSessionID,
				TimeStamp = moneyOrderTotalRequest.timeStamp,
				ClientSoftwareVersion = moneyOrderTotalRequest.clientSoftwareVersion,
				PoeType = moneyOrderTotalRequest.poeType,
				ChannelType = moneyOrderTotalRequest.channelType,
				OperatorName = moneyOrderTotalRequest.operatorName,
				TargetAudience = moneyOrderTotalRequest.targetAudience,
				PoeCapabilities = moneyOrderTotalRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendSummaryReportRequest ToDomain(SERVICE.MoneyGramSendSummaryReportRequest moneyGramSendSummaryReportRequest)
		{
			var domainModel = new DOMAIN.MoneyGramSendSummaryReportRequest {
				ActivityDate = moneyGramSendSummaryReportRequest.activityDate,
				UnitProfileID = moneyGramSendSummaryReportRequest.unitProfileIDSpecified == true ? (int?)moneyGramSendSummaryReportRequest.unitProfileID : null,
				AgentID = moneyGramSendSummaryReportRequest.agentID,
				AgentSequence = moneyGramSendSummaryReportRequest.agentSequence,
				Language = moneyGramSendSummaryReportRequest.language,
				MgiSessionID = moneyGramSendSummaryReportRequest.mgiSessionID,
				TimeStamp = moneyGramSendSummaryReportRequest.timeStamp,
				ClientSoftwareVersion = moneyGramSendSummaryReportRequest.clientSoftwareVersion,
				PoeType = moneyGramSendSummaryReportRequest.poeType,
				ChannelType = moneyGramSendSummaryReportRequest.channelType,
				OperatorName = moneyGramSendSummaryReportRequest.operatorName,
				TargetAudience = moneyGramSendSummaryReportRequest.targetAudience,
				PoeCapabilities = moneyGramSendSummaryReportRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendDetailReportWithTaxRequest ToDomain(SERVICE.MoneyGramSendDetailReportWithTaxRequest moneyGramSendDetailReportWithTaxRequest)
		{
			var domainModel = new DOMAIN.MoneyGramSendDetailReportWithTaxRequest {
				ActivityDate = moneyGramSendDetailReportWithTaxRequest.activityDate,
				UnitProfileID = moneyGramSendDetailReportWithTaxRequest.unitProfileIDSpecified == true ? (int?)moneyGramSendDetailReportWithTaxRequest.unitProfileID : null,
				AgentID = moneyGramSendDetailReportWithTaxRequest.agentID,
				AgentSequence = moneyGramSendDetailReportWithTaxRequest.agentSequence,
				Language = moneyGramSendDetailReportWithTaxRequest.language,
				MgiSessionID = moneyGramSendDetailReportWithTaxRequest.mgiSessionID,
				TimeStamp = moneyGramSendDetailReportWithTaxRequest.timeStamp,
				ClientSoftwareVersion = moneyGramSendDetailReportWithTaxRequest.clientSoftwareVersion,
				PoeType = moneyGramSendDetailReportWithTaxRequest.poeType,
				ChannelType = moneyGramSendDetailReportWithTaxRequest.channelType,
				OperatorName = moneyGramSendDetailReportWithTaxRequest.operatorName,
				TargetAudience = moneyGramSendDetailReportWithTaxRequest.targetAudience,
				PoeCapabilities = moneyGramSendDetailReportWithTaxRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramSendDetailReportRequest ToDomain(SERVICE.MoneyGramSendDetailReportRequest moneyGramSendDetailReportRequest)
		{
			var domainModel = new DOMAIN.MoneyGramSendDetailReportRequest {
				ActivityDate = moneyGramSendDetailReportRequest.activityDate,
				UnitProfileID = moneyGramSendDetailReportRequest.unitProfileIDSpecified == true ? (int?)moneyGramSendDetailReportRequest.unitProfileID : null,
				AgentID = moneyGramSendDetailReportRequest.agentID,
				AgentSequence = moneyGramSendDetailReportRequest.agentSequence,
				Language = moneyGramSendDetailReportRequest.language,
				MgiSessionID = moneyGramSendDetailReportRequest.mgiSessionID,
				TimeStamp = moneyGramSendDetailReportRequest.timeStamp,
				ClientSoftwareVersion = moneyGramSendDetailReportRequest.clientSoftwareVersion,
				PoeType = moneyGramSendDetailReportRequest.poeType,
				ChannelType = moneyGramSendDetailReportRequest.channelType,
				OperatorName = moneyGramSendDetailReportRequest.operatorName,
				TargetAudience = moneyGramSendDetailReportRequest.targetAudience,
				PoeCapabilities = moneyGramSendDetailReportRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramReceiveSummaryReportRequest ToDomain(SERVICE.MoneyGramReceiveSummaryReportRequest moneyGramReceiveSummaryReportRequest)
		{
			var domainModel = new DOMAIN.MoneyGramReceiveSummaryReportRequest {
				ActivityDate = moneyGramReceiveSummaryReportRequest.activityDate,
				UnitProfileID = moneyGramReceiveSummaryReportRequest.unitProfileIDSpecified == true ? (int?)moneyGramReceiveSummaryReportRequest.unitProfileID : null,
				AgentID = moneyGramReceiveSummaryReportRequest.agentID,
				AgentSequence = moneyGramReceiveSummaryReportRequest.agentSequence,
				Language = moneyGramReceiveSummaryReportRequest.language,
				MgiSessionID = moneyGramReceiveSummaryReportRequest.mgiSessionID,
				TimeStamp = moneyGramReceiveSummaryReportRequest.timeStamp,
				ClientSoftwareVersion = moneyGramReceiveSummaryReportRequest.clientSoftwareVersion,
				PoeType = moneyGramReceiveSummaryReportRequest.poeType,
				ChannelType = moneyGramReceiveSummaryReportRequest.channelType,
				OperatorName = moneyGramReceiveSummaryReportRequest.operatorName,
				TargetAudience = moneyGramReceiveSummaryReportRequest.targetAudience,
				PoeCapabilities = moneyGramReceiveSummaryReportRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.MoneyGramReceiveDetailReportRequest ToDomain(SERVICE.MoneyGramReceiveDetailReportRequest moneyGramReceiveDetailReportRequest)
		{
			var domainModel = new DOMAIN.MoneyGramReceiveDetailReportRequest {
				ActivityDate = moneyGramReceiveDetailReportRequest.activityDate,
				UnitProfileID = moneyGramReceiveDetailReportRequest.unitProfileIDSpecified == true ? (int?)moneyGramReceiveDetailReportRequest.unitProfileID : null,
				AgentID = moneyGramReceiveDetailReportRequest.agentID,
				AgentSequence = moneyGramReceiveDetailReportRequest.agentSequence,
				Language = moneyGramReceiveDetailReportRequest.language,
				MgiSessionID = moneyGramReceiveDetailReportRequest.mgiSessionID,
				TimeStamp = moneyGramReceiveDetailReportRequest.timeStamp,
				ClientSoftwareVersion = moneyGramReceiveDetailReportRequest.clientSoftwareVersion,
				PoeType = moneyGramReceiveDetailReportRequest.poeType,
				ChannelType = moneyGramReceiveDetailReportRequest.channelType,
				OperatorName = moneyGramReceiveDetailReportRequest.operatorName,
				TargetAudience = moneyGramReceiveDetailReportRequest.targetAudience,
				PoeCapabilities = moneyGramReceiveDetailReportRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.InjectedInstructionRequest ToDomain(SERVICE.InjectedInstructionRequest injectedInstructionRequest)
		{
			var domainModel = new DOMAIN.InjectedInstructionRequest {
				PreviousPOETransactionID = injectedInstructionRequest.previousPOETransactionID,
				AdditionalTransactionInfo = injectedInstructionRequest.additionalTransactionInfo,
				UnitProfileID = injectedInstructionRequest.unitProfileIDSpecified == true ? (int?)injectedInstructionRequest.unitProfileID : null,
				AgentID = injectedInstructionRequest.agentID,
				AgentSequence = injectedInstructionRequest.agentSequence,
				Language = injectedInstructionRequest.language,
				MgiSessionID = injectedInstructionRequest.mgiSessionID,
				TimeStamp = injectedInstructionRequest.timeStamp,
				ClientSoftwareVersion = injectedInstructionRequest.clientSoftwareVersion,
				PoeType = injectedInstructionRequest.poeType,
				ChannelType = injectedInstructionRequest.channelType,
				OperatorName = injectedInstructionRequest.operatorName,
				TargetAudience = injectedInstructionRequest.targetAudience,
				PoeCapabilities = injectedInstructionRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.InitialSetupRequest ToDomain(SERVICE.InitialSetupRequest initialSetupRequest)
		{
			var domainModel = new DOMAIN.InitialSetupRequest {
				Password = initialSetupRequest.password,
				TimeZoneName = initialSetupRequest.timeZoneName,
				UnitProfileID = initialSetupRequest.unitProfileIDSpecified == true ? (int?)initialSetupRequest.unitProfileID : null,
				AgentID = initialSetupRequest.agentID,
				AgentSequence = initialSetupRequest.agentSequence,
				Language = initialSetupRequest.language,
				MgiSessionID = initialSetupRequest.mgiSessionID,
				TimeStamp = initialSetupRequest.timeStamp,
				ClientSoftwareVersion = initialSetupRequest.clientSoftwareVersion,
				PoeType = initialSetupRequest.poeType,
				ChannelType = initialSetupRequest.channelType,
				OperatorName = initialSetupRequest.operatorName,
				TargetAudience = initialSetupRequest.targetAudience,
				PoeCapabilities = initialSetupRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DwInitialSetupRequest ToDomain(SERVICE.DwInitialSetupRequest dwInitialSetupRequest)
		{
			var domainModel = new DOMAIN.DwInitialSetupRequest {
				DeviceID = dwInitialSetupRequest.deviceID,
				ServiceTagNumber = dwInitialSetupRequest.serviceTagNumber,
				Password = dwInitialSetupRequest.password,
				TimeZoneName = dwInitialSetupRequest.timeZoneName,
				UnitProfileID = dwInitialSetupRequest.unitProfileIDSpecified == true ? (int?)dwInitialSetupRequest.unitProfileID : null,
				AgentID = dwInitialSetupRequest.agentID,
				AgentSequence = dwInitialSetupRequest.agentSequence,
				Language = dwInitialSetupRequest.language,
				MgiSessionID = dwInitialSetupRequest.mgiSessionID,
				TimeStamp = dwInitialSetupRequest.timeStamp,
				ClientSoftwareVersion = dwInitialSetupRequest.clientSoftwareVersion,
				PoeType = dwInitialSetupRequest.poeType,
				ChannelType = dwInitialSetupRequest.channelType,
				OperatorName = dwInitialSetupRequest.operatorName,
				TargetAudience = dwInitialSetupRequest.targetAudience,
				PoeCapabilities = dwInitialSetupRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.IndustryRequest ToDomain(SERVICE.IndustryRequest industryRequest)
		{
			var domainModel = new DOMAIN.IndustryRequest {
				UnitProfileID = industryRequest.unitProfileIDSpecified == true ? (int?)industryRequest.unitProfileID : null,
				AgentID = industryRequest.agentID,
				AgentSequence = industryRequest.agentSequence,
				Language = industryRequest.language,
				MgiSessionID = industryRequest.mgiSessionID,
				TimeStamp = industryRequest.timeStamp,
				ClientSoftwareVersion = industryRequest.clientSoftwareVersion,
				PoeType = industryRequest.poeType,
				ChannelType = industryRequest.channelType,
				OperatorName = industryRequest.operatorName,
				TargetAudience = industryRequest.targetAudience,
				PoeCapabilities = industryRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetUCPByConsumerAttributesRequest ToDomain(SERVICE.GetUCPByConsumerAttributesRequest getUCPByConsumerAttributesRequest)
		{
			var domainModel = new DOMAIN.GetUCPByConsumerAttributesRequest {
				FunctionName = getUCPByConsumerAttributesRequest.functionName,
				RepeatRequest = getUCPByConsumerAttributesRequest.repeatRequest,
				PlusEnrollmentFlag = getUCPByConsumerAttributesRequest.plusEnrollmentFlag,
				ResponseFilter = getUCPByConsumerAttributesRequest.responseFilter,
				ConsumerProfile = (getUCPByConsumerAttributesRequest.consumerProfile != null ? getUCPByConsumerAttributesRequest.consumerProfile.ConvertToDomain<SERVICE.UCPRequestProfileType, DOMAIN.UCPRequestProfileType>() : null),
				Id = getUCPByConsumerAttributesRequest.id,
				Type = getUCPByConsumerAttributesRequest.type,
				UnitProfileID = getUCPByConsumerAttributesRequest.unitProfileIDSpecified == true ? (int?)getUCPByConsumerAttributesRequest.unitProfileID : null,
				AgentID = getUCPByConsumerAttributesRequest.agentID,
				AgentSequence = getUCPByConsumerAttributesRequest.agentSequence,
				Language = getUCPByConsumerAttributesRequest.language,
				MgiSessionID = getUCPByConsumerAttributesRequest.mgiSessionID,
				TimeStamp = getUCPByConsumerAttributesRequest.timeStamp,
				ClientSoftwareVersion = getUCPByConsumerAttributesRequest.clientSoftwareVersion,
				PoeType = getUCPByConsumerAttributesRequest.poeType,
				ChannelType = getUCPByConsumerAttributesRequest.channelType,
				OperatorName = getUCPByConsumerAttributesRequest.operatorName,
				TargetAudience = getUCPByConsumerAttributesRequest.targetAudience,
				PoeCapabilities = getUCPByConsumerAttributesRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetServiceOptionsRequest ToDomain(SERVICE.GetServiceOptionsRequest getServiceOptionsRequest)
		{
			var domainModel = new DOMAIN.GetServiceOptionsRequest {
				AgentAllowedOnly = getServiceOptionsRequest.agentAllowedOnly,
				DestinationCountry = getServiceOptionsRequest.destinationCountry,
				UnitProfileID = getServiceOptionsRequest.unitProfileIDSpecified == true ? (int?)getServiceOptionsRequest.unitProfileID : null,
				AgentID = getServiceOptionsRequest.agentID,
				AgentSequence = getServiceOptionsRequest.agentSequence,
				Language = getServiceOptionsRequest.language,
				MgiSessionID = getServiceOptionsRequest.mgiSessionID,
				TimeStamp = getServiceOptionsRequest.timeStamp,
				ClientSoftwareVersion = getServiceOptionsRequest.clientSoftwareVersion,
				PoeType = getServiceOptionsRequest.poeType,
				ChannelType = getServiceOptionsRequest.channelType,
				OperatorName = getServiceOptionsRequest.operatorName,
				TargetAudience = getServiceOptionsRequest.targetAudience,
				PoeCapabilities = getServiceOptionsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetReceiptForReprintRequest ToDomain(SERVICE.GetReceiptForReprintRequest getReceiptForReprintRequest)
		{
			var domainModel = new DOMAIN.GetReceiptForReprintRequest {
				ReferenceNumber = getReceiptForReprintRequest.referenceNumber,
				ReceiptType = getReceiptForReprintRequest.receiptType,
				UnitProfileID = getReceiptForReprintRequest.unitProfileIDSpecified == true ? (int?)getReceiptForReprintRequest.unitProfileID : null,
				AgentID = getReceiptForReprintRequest.agentID,
				AgentSequence = getReceiptForReprintRequest.agentSequence,
				Language = getReceiptForReprintRequest.language,
				MgiSessionID = getReceiptForReprintRequest.mgiSessionID,
				TimeStamp = getReceiptForReprintRequest.timeStamp,
				ClientSoftwareVersion = getReceiptForReprintRequest.clientSoftwareVersion,
				PoeType = getReceiptForReprintRequest.poeType,
				ChannelType = getReceiptForReprintRequest.channelType,
				OperatorName = getReceiptForReprintRequest.operatorName,
				TargetAudience = getReceiptForReprintRequest.targetAudience,
				PoeCapabilities = getReceiptForReprintRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetProfileSenderRequest ToDomain(SERVICE.GetProfileSenderRequest getProfileSenderRequest)
		{
			var domainModel = new DOMAIN.GetProfileSenderRequest {
				GAFVersionNumber = getProfileSenderRequest.GAFVersionNumber,
				ConsumerProfileID = getProfileSenderRequest.consumerProfileID,
				ConsumerProfileIDType = getProfileSenderRequest.consumerProfileIDType,
				MaxReceiversToReturn = getProfileSenderRequest.maxReceiversToReturn,
				MaxBillersToReturn = getProfileSenderRequest.maxBillersToReturn,
				UnitProfileID = getProfileSenderRequest.unitProfileIDSpecified == true ? (int?)getProfileSenderRequest.unitProfileID : null,
				AgentID = getProfileSenderRequest.agentID,
				AgentSequence = getProfileSenderRequest.agentSequence,
				Language = getProfileSenderRequest.language,
				MgiSessionID = getProfileSenderRequest.mgiSessionID,
				TimeStamp = getProfileSenderRequest.timeStamp,
				ClientSoftwareVersion = getProfileSenderRequest.clientSoftwareVersion,
				PoeType = getProfileSenderRequest.poeType,
				ChannelType = getProfileSenderRequest.channelType,
				OperatorName = getProfileSenderRequest.operatorName,
				TargetAudience = getProfileSenderRequest.targetAudience,
				PoeCapabilities = getProfileSenderRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetProfileReceiverRequest ToDomain(SERVICE.GetProfileReceiverRequest getProfileReceiverRequest)
		{
			var domainModel = new DOMAIN.GetProfileReceiverRequest {
				GAFVersionNumber = getProfileReceiverRequest.GAFVersionNumber,
				ConsumerProfileID = getProfileReceiverRequest.consumerProfileID,
				ConsumerProfileIDType = getProfileReceiverRequest.consumerProfileIDType,
				UnitProfileID = getProfileReceiverRequest.unitProfileIDSpecified == true ? (int?)getProfileReceiverRequest.unitProfileID : null,
				AgentID = getProfileReceiverRequest.agentID,
				AgentSequence = getProfileReceiverRequest.agentSequence,
				Language = getProfileReceiverRequest.language,
				MgiSessionID = getProfileReceiverRequest.mgiSessionID,
				TimeStamp = getProfileReceiverRequest.timeStamp,
				ClientSoftwareVersion = getProfileReceiverRequest.clientSoftwareVersion,
				PoeType = getProfileReceiverRequest.poeType,
				ChannelType = getProfileReceiverRequest.channelType,
				OperatorName = getProfileReceiverRequest.operatorName,
				TargetAudience = getProfileReceiverRequest.targetAudience,
				PoeCapabilities = getProfileReceiverRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetProfileConsumerRequest ToDomain(SERVICE.GetProfileConsumerRequest getProfileConsumerRequest)
		{
			var domainModel = new DOMAIN.GetProfileConsumerRequest {
				GAFVersionNumber = getProfileConsumerRequest.GAFVersionNumber,
				ConsumerProfileID = getProfileConsumerRequest.consumerProfileID,
				ConsumerProfileIDType = getProfileConsumerRequest.consumerProfileIDType,
				UnitProfileID = getProfileConsumerRequest.unitProfileIDSpecified == true ? (int?)getProfileConsumerRequest.unitProfileID : null,
				AgentID = getProfileConsumerRequest.agentID,
				AgentSequence = getProfileConsumerRequest.agentSequence,
				Language = getProfileConsumerRequest.language,
				MgiSessionID = getProfileConsumerRequest.mgiSessionID,
				TimeStamp = getProfileConsumerRequest.timeStamp,
				ClientSoftwareVersion = getProfileConsumerRequest.clientSoftwareVersion,
				PoeType = getProfileConsumerRequest.poeType,
				ChannelType = getProfileConsumerRequest.channelType,
				OperatorName = getProfileConsumerRequest.operatorName,
				TargetAudience = getProfileConsumerRequest.targetAudience,
				PoeCapabilities = getProfileConsumerRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetConsumerProfileDocumentRequest ToDomain(SERVICE.GetConsumerProfileDocumentRequest getConsumerProfileDocumentRequest)
		{
			var domainModel = new DOMAIN.GetConsumerProfileDocumentRequest {
				ConsumerProfileID = getConsumerProfileDocumentRequest.consumerProfileID,
				ConsumerProfileIDType = getConsumerProfileDocumentRequest.consumerProfileIDType,
				UnitProfileID = getConsumerProfileDocumentRequest.unitProfileIDSpecified == true ? (int?)getConsumerProfileDocumentRequest.unitProfileID : null,
				AgentID = getConsumerProfileDocumentRequest.agentID,
				AgentSequence = getConsumerProfileDocumentRequest.agentSequence,
				Language = getConsumerProfileDocumentRequest.language,
				MgiSessionID = getConsumerProfileDocumentRequest.mgiSessionID,
				TimeStamp = getConsumerProfileDocumentRequest.timeStamp,
				ClientSoftwareVersion = getConsumerProfileDocumentRequest.clientSoftwareVersion,
				PoeType = getConsumerProfileDocumentRequest.poeType,
				ChannelType = getConsumerProfileDocumentRequest.channelType,
				OperatorName = getConsumerProfileDocumentRequest.operatorName,
				TargetAudience = getConsumerProfileDocumentRequest.targetAudience,
				PoeCapabilities = getConsumerProfileDocumentRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetPersonalIDImageRequest ToDomain(SERVICE.GetPersonalIDImageRequest getPersonalIDImageRequest)
		{
			var domainModel = new DOMAIN.GetPersonalIDImageRequest {
				ConsumerProfileID = getPersonalIDImageRequest.consumerProfileID,
				ConsumerProfileIDType = getPersonalIDImageRequest.consumerProfileIDType,
				PersonalIDChoice = getPersonalIDImageRequest.personalIDChoice,
				PersonalIDVerificationStr = getPersonalIDImageRequest.personalIDVerificationStr,
				UnitProfileID = getPersonalIDImageRequest.unitProfileIDSpecified == true ? (int?)getPersonalIDImageRequest.unitProfileID : null,
				AgentID = getPersonalIDImageRequest.agentID,
				AgentSequence = getPersonalIDImageRequest.agentSequence,
				Language = getPersonalIDImageRequest.language,
				MgiSessionID = getPersonalIDImageRequest.mgiSessionID,
				TimeStamp = getPersonalIDImageRequest.timeStamp,
				ClientSoftwareVersion = getPersonalIDImageRequest.clientSoftwareVersion,
				PoeType = getPersonalIDImageRequest.poeType,
				ChannelType = getPersonalIDImageRequest.channelType,
				OperatorName = getPersonalIDImageRequest.operatorName,
				TargetAudience = getPersonalIDImageRequest.targetAudience,
				PoeCapabilities = getPersonalIDImageRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetEnumerationsRequest ToDomain(SERVICE.GetEnumerationsRequest getEnumerationsRequest)
		{
			var domainModel = new DOMAIN.GetEnumerationsRequest {
				CachedVersion = getEnumerationsRequest.cachedVersion,
				EnumerationName = getEnumerationsRequest.enumerationName,
				UnitProfileID = getEnumerationsRequest.unitProfileIDSpecified == true ? (int?)getEnumerationsRequest.unitProfileID : null,
				AgentID = getEnumerationsRequest.agentID,
				AgentSequence = getEnumerationsRequest.agentSequence,
				Language = getEnumerationsRequest.language,
				MgiSessionID = getEnumerationsRequest.mgiSessionID,
				TimeStamp = getEnumerationsRequest.timeStamp,
				ClientSoftwareVersion = getEnumerationsRequest.clientSoftwareVersion,
				PoeType = getEnumerationsRequest.poeType,
				ChannelType = getEnumerationsRequest.channelType,
				OperatorName = getEnumerationsRequest.operatorName,
				TargetAudience = getEnumerationsRequest.targetAudience,
				PoeCapabilities = getEnumerationsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetDepositInformationRequest ToDomain(SERVICE.GetDepositInformationRequest getDepositInformationRequest)
		{
			var domainModel = new DOMAIN.GetDepositInformationRequest {
				MaxDepositsToReturn = getDepositInformationRequest.maxDepositsToReturn,
				UnitProfileID = getDepositInformationRequest.unitProfileIDSpecified == true ? (int?)getDepositInformationRequest.unitProfileID : null,
				AgentID = getDepositInformationRequest.agentID,
				AgentSequence = getDepositInformationRequest.agentSequence,
				Language = getDepositInformationRequest.language,
				MgiSessionID = getDepositInformationRequest.mgiSessionID,
				TimeStamp = getDepositInformationRequest.timeStamp,
				ClientSoftwareVersion = getDepositInformationRequest.clientSoftwareVersion,
				PoeType = getDepositInformationRequest.poeType,
				ChannelType = getDepositInformationRequest.channelType,
				OperatorName = getDepositInformationRequest.operatorName,
				TargetAudience = getDepositInformationRequest.targetAudience,
				PoeCapabilities = getDepositInformationRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetDepositBankListRequest ToDomain(SERVICE.GetDepositBankListRequest getDepositBankListRequest)
		{
			var domainModel = new DOMAIN.GetDepositBankListRequest {
				CountryCode = getDepositBankListRequest.countryCode,
				UnitProfileID = getDepositBankListRequest.unitProfileIDSpecified == true ? (int?)getDepositBankListRequest.unitProfileID : null,
				AgentID = getDepositBankListRequest.agentID,
				AgentSequence = getDepositBankListRequest.agentSequence,
				Language = getDepositBankListRequest.language,
				MgiSessionID = getDepositBankListRequest.mgiSessionID,
				TimeStamp = getDepositBankListRequest.timeStamp,
				ClientSoftwareVersion = getDepositBankListRequest.clientSoftwareVersion,
				PoeType = getDepositBankListRequest.poeType,
				ChannelType = getDepositBankListRequest.channelType,
				OperatorName = getDepositBankListRequest.operatorName,
				TargetAudience = getDepositBankListRequest.targetAudience,
				PoeCapabilities = getDepositBankListRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetDebugDataRequest ToDomain(SERVICE.GetDebugDataRequest getDebugDataRequest)
		{
			var domainModel = new DOMAIN.GetDebugDataRequest {
				CurrentDate = getDebugDataRequest.currentDateSpecified == true ? (DateTime?)getDebugDataRequest.currentDate : null,
				SequenceNumber = getDebugDataRequest.sequenceNumber,
				NextTransmission = getDebugDataRequest.nextTransmissionSpecified == true ? (bool?)getDebugDataRequest.nextTransmission : null,
				UnitProfileID = getDebugDataRequest.unitProfileIDSpecified == true ? (int?)getDebugDataRequest.unitProfileID : null,
				AgentID = getDebugDataRequest.agentID,
				AgentSequence = getDebugDataRequest.agentSequence,
				Language = getDebugDataRequest.language,
				MgiSessionID = getDebugDataRequest.mgiSessionID,
				TimeStamp = getDebugDataRequest.timeStamp,
				ClientSoftwareVersion = getDebugDataRequest.clientSoftwareVersion,
				PoeType = getDebugDataRequest.poeType,
				ChannelType = getDebugDataRequest.channelType,
				OperatorName = getDebugDataRequest.operatorName,
				TargetAudience = getDebugDataRequest.targetAudience,
				PoeCapabilities = getDebugDataRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetCurrencyInfoRequest ToDomain(SERVICE.GetCurrencyInfoRequest getCurrencyInfoRequest)
		{
			var domainModel = new DOMAIN.GetCurrencyInfoRequest {
				Version = getCurrencyInfoRequest.version,
				UnitProfileID = getCurrencyInfoRequest.unitProfileIDSpecified == true ? (int?)getCurrencyInfoRequest.unitProfileID : null,
				AgentID = getCurrencyInfoRequest.agentID,
				AgentSequence = getCurrencyInfoRequest.agentSequence,
				Language = getCurrencyInfoRequest.language,
				MgiSessionID = getCurrencyInfoRequest.mgiSessionID,
				TimeStamp = getCurrencyInfoRequest.timeStamp,
				ClientSoftwareVersion = getCurrencyInfoRequest.clientSoftwareVersion,
				PoeType = getCurrencyInfoRequest.poeType,
				ChannelType = getCurrencyInfoRequest.channelType,
				OperatorName = getCurrencyInfoRequest.operatorName,
				TargetAudience = getCurrencyInfoRequest.targetAudience,
				PoeCapabilities = getCurrencyInfoRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetCountrySubdivisionRequest ToDomain(SERVICE.GetCountrySubdivisionRequest getCountrySubdivisionRequest)
		{
			var domainModel = new DOMAIN.GetCountrySubdivisionRequest {
				CachedVersion = getCountrySubdivisionRequest.cachedVersion,
				CountryCode = getCountrySubdivisionRequest.countryCode,
				UnitProfileID = getCountrySubdivisionRequest.unitProfileIDSpecified == true ? (int?)getCountrySubdivisionRequest.unitProfileID : null,
				AgentID = getCountrySubdivisionRequest.agentID,
				AgentSequence = getCountrySubdivisionRequest.agentSequence,
				Language = getCountrySubdivisionRequest.language,
				MgiSessionID = getCountrySubdivisionRequest.mgiSessionID,
				TimeStamp = getCountrySubdivisionRequest.timeStamp,
				ClientSoftwareVersion = getCountrySubdivisionRequest.clientSoftwareVersion,
				PoeType = getCountrySubdivisionRequest.poeType,
				ChannelType = getCountrySubdivisionRequest.channelType,
				OperatorName = getCountrySubdivisionRequest.operatorName,
				TargetAudience = getCountrySubdivisionRequest.targetAudience,
				PoeCapabilities = getCountrySubdivisionRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetCountryInfoRequest ToDomain(SERVICE.GetCountryInfoRequest getCountryInfoRequest)
		{
			var domainModel = new DOMAIN.GetCountryInfoRequest {
				CachedVersion = getCountryInfoRequest.cachedVersion,
				LookupKey = getCountryInfoRequest.lookupKey,
				UnitProfileID = getCountryInfoRequest.unitProfileIDSpecified == true ? (int?)getCountryInfoRequest.unitProfileID : null,
				AgentID = getCountryInfoRequest.agentID,
				AgentSequence = getCountryInfoRequest.agentSequence,
				Language = getCountryInfoRequest.language,
				MgiSessionID = getCountryInfoRequest.mgiSessionID,
				TimeStamp = getCountryInfoRequest.timeStamp,
				ClientSoftwareVersion = getCountryInfoRequest.clientSoftwareVersion,
				PoeType = getCountryInfoRequest.poeType,
				ChannelType = getCountryInfoRequest.channelType,
				OperatorName = getCountryInfoRequest.operatorName,
				TargetAudience = getCountryInfoRequest.targetAudience,
				PoeCapabilities = getCountryInfoRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetConsumerProfileTransactionHistoryRequest ToDomain(SERVICE.GetConsumerProfileTransactionHistoryRequest getConsumerProfileTransactionHistoryRequest)
		{
			var domainModel = new DOMAIN.GetConsumerProfileTransactionHistoryRequest {
				GAFVersionNumber = getConsumerProfileTransactionHistoryRequest.GAFVersionNumber,
				ConsumerProfileID = getConsumerProfileTransactionHistoryRequest.consumerProfileID,
				ConsumerProfileIDType = getConsumerProfileTransactionHistoryRequest.consumerProfileIDType,
				StartDate = getConsumerProfileTransactionHistoryRequest.startDateSpecified == true ? (DateTime?)getConsumerProfileTransactionHistoryRequest.startDate : null,
				EndDate = getConsumerProfileTransactionHistoryRequest.endDateSpecified == true ? (DateTime?)getConsumerProfileTransactionHistoryRequest.endDate : null,
				MaxRowsToReturn = getConsumerProfileTransactionHistoryRequest.maxRowsToReturn,
				SortDateOrder = getConsumerProfileTransactionHistoryRequest.sortDateOrder,
				UnitProfileID = getConsumerProfileTransactionHistoryRequest.unitProfileIDSpecified == true ? (int?)getConsumerProfileTransactionHistoryRequest.unitProfileID : null,
				AgentID = getConsumerProfileTransactionHistoryRequest.agentID,
				AgentSequence = getConsumerProfileTransactionHistoryRequest.agentSequence,
				Language = getConsumerProfileTransactionHistoryRequest.language,
				MgiSessionID = getConsumerProfileTransactionHistoryRequest.mgiSessionID,
				TimeStamp = getConsumerProfileTransactionHistoryRequest.timeStamp,
				ClientSoftwareVersion = getConsumerProfileTransactionHistoryRequest.clientSoftwareVersion,
				PoeType = getConsumerProfileTransactionHistoryRequest.poeType,
				ChannelType = getConsumerProfileTransactionHistoryRequest.channelType,
				OperatorName = getConsumerProfileTransactionHistoryRequest.operatorName,
				TargetAudience = getConsumerProfileTransactionHistoryRequest.targetAudience,
				PoeCapabilities = getConsumerProfileTransactionHistoryRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetBroadcastMessagesRequest ToDomain(SERVICE.GetBroadcastMessagesRequest getBroadcastMessagesRequest)
		{
			var domainModel = new DOMAIN.GetBroadcastMessagesRequest {
				MsgLanguageCode = getBroadcastMessagesRequest.msgLanguageCode,
				OffsetGMT = getBroadcastMessagesRequest.offsetGMT,
				MessageInfos = getBroadcastMessagesRequest.messageInfos?.Select(x => x.ConvertToDomain<SERVICE.MessageInfo, DOMAIN.MessageInfo>()).ToList(),
				CustomFields = getBroadcastMessagesRequest.customFields?.Select(x => x.ConvertToDomain<SERVICE.CustomFieldsType, DOMAIN.CustomFieldsType>()).ToList(),
				UnitProfileID = getBroadcastMessagesRequest.unitProfileIDSpecified == true ? (int?)getBroadcastMessagesRequest.unitProfileID : null,
				AgentID = getBroadcastMessagesRequest.agentID,
				AgentSequence = getBroadcastMessagesRequest.agentSequence,
				Language = getBroadcastMessagesRequest.language,
				MgiSessionID = getBroadcastMessagesRequest.mgiSessionID,
				TimeStamp = getBroadcastMessagesRequest.timeStamp,
				ClientSoftwareVersion = getBroadcastMessagesRequest.clientSoftwareVersion,
				PoeType = getBroadcastMessagesRequest.poeType,
				ChannelType = getBroadcastMessagesRequest.channelType,
				OperatorName = getBroadcastMessagesRequest.operatorName,
				TargetAudience = getBroadcastMessagesRequest.targetAudience,
				PoeCapabilities = getBroadcastMessagesRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetBankDetailsRequest ToDomain(SERVICE.GetBankDetailsRequest getBankDetailsRequest)
		{
			var domainModel = new DOMAIN.GetBankDetailsRequest {
				CountryCode = getBankDetailsRequest.countryCode,
				InfoKey = getBankDetailsRequest.infoKey,
				Value = getBankDetailsRequest.value,
				UnitProfileID = getBankDetailsRequest.unitProfileIDSpecified == true ? (int?)getBankDetailsRequest.unitProfileID : null,
				AgentID = getBankDetailsRequest.agentID,
				AgentSequence = getBankDetailsRequest.agentSequence,
				Language = getBankDetailsRequest.language,
				MgiSessionID = getBankDetailsRequest.mgiSessionID,
				TimeStamp = getBankDetailsRequest.timeStamp,
				ClientSoftwareVersion = getBankDetailsRequest.clientSoftwareVersion,
				PoeType = getBankDetailsRequest.poeType,
				ChannelType = getBankDetailsRequest.channelType,
				OperatorName = getBankDetailsRequest.operatorName,
				TargetAudience = getBankDetailsRequest.targetAudience,
				PoeCapabilities = getBankDetailsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetBankDetailsByLevelRequest ToDomain(SERVICE.GetBankDetailsByLevelRequest getBankDetailsByLevelRequest)
		{
			var domainModel = new DOMAIN.GetBankDetailsByLevelRequest {
				CountryCode = getBankDetailsByLevelRequest.countryCode,
				HierarchyLevelNumber = getBankDetailsByLevelRequest.hierarchyLevelNumber,
				PreviousLevelElementNumber = getBankDetailsByLevelRequest.previousLevelElementNumberSpecified == true ? (int?)getBankDetailsByLevelRequest.previousLevelElementNumber : null,
				UnitProfileID = getBankDetailsByLevelRequest.unitProfileIDSpecified == true ? (int?)getBankDetailsByLevelRequest.unitProfileID : null,
				AgentID = getBankDetailsByLevelRequest.agentID,
				AgentSequence = getBankDetailsByLevelRequest.agentSequence,
				Language = getBankDetailsByLevelRequest.language,
				MgiSessionID = getBankDetailsByLevelRequest.mgiSessionID,
				TimeStamp = getBankDetailsByLevelRequest.timeStamp,
				ClientSoftwareVersion = getBankDetailsByLevelRequest.clientSoftwareVersion,
				PoeType = getBankDetailsByLevelRequest.poeType,
				ChannelType = getBankDetailsByLevelRequest.channelType,
				OperatorName = getBankDetailsByLevelRequest.operatorName,
				TargetAudience = getBankDetailsByLevelRequest.targetAudience,
				PoeCapabilities = getBankDetailsByLevelRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetAllFieldsRequest ToDomain(SERVICE.GetAllFieldsRequest getAllFieldsRequest)
		{
			var domainModel = new DOMAIN.GetAllFieldsRequest {
				CachedVersion = getAllFieldsRequest.cachedVersion,
				TransactionType = getAllFieldsRequest.transactionType,
				UnitProfileID = getAllFieldsRequest.unitProfileIDSpecified == true ? (int?)getAllFieldsRequest.unitProfileID : null,
				AgentID = getAllFieldsRequest.agentID,
				AgentSequence = getAllFieldsRequest.agentSequence,
				Language = getAllFieldsRequest.language,
				MgiSessionID = getAllFieldsRequest.mgiSessionID,
				TimeStamp = getAllFieldsRequest.timeStamp,
				ClientSoftwareVersion = getAllFieldsRequest.clientSoftwareVersion,
				PoeType = getAllFieldsRequest.poeType,
				ChannelType = getAllFieldsRequest.channelType,
				OperatorName = getAllFieldsRequest.operatorName,
				TargetAudience = getAllFieldsRequest.targetAudience,
				PoeCapabilities = getAllFieldsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.GetAllErrorsRequest ToDomain(SERVICE.GetAllErrorsRequest getAllErrorsRequest)
		{
			var domainModel = new DOMAIN.GetAllErrorsRequest {
				CachedVersion = getAllErrorsRequest.cachedVersion,
				UnitProfileID = getAllErrorsRequest.unitProfileIDSpecified == true ? (int?)getAllErrorsRequest.unitProfileID : null,
				AgentID = getAllErrorsRequest.agentID,
				AgentSequence = getAllErrorsRequest.agentSequence,
				Language = getAllErrorsRequest.language,
				MgiSessionID = getAllErrorsRequest.mgiSessionID,
				TimeStamp = getAllErrorsRequest.timeStamp,
				ClientSoftwareVersion = getAllErrorsRequest.clientSoftwareVersion,
				PoeType = getAllErrorsRequest.poeType,
				ChannelType = getAllErrorsRequest.channelType,
				OperatorName = getAllErrorsRequest.operatorName,
				TargetAudience = getAllErrorsRequest.targetAudience,
				PoeCapabilities = getAllErrorsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FeeLookupRequest ToDomain(SERVICE.FeeLookupRequest feeLookupRequest)
		{
			var domainModel = new DOMAIN.FeeLookupRequest {
				MgiSessionType = (DOMAIN.SessionType)feeLookupRequest.mgiSessionType,
				ProductVariant = feeLookupRequest.productVariantSpecified == true ? (DOMAIN.ProductVariantType?)feeLookupRequest.productVariant : null,
				Item = feeLookupRequest.Item,
				ItemElementName = (DOMAIN.ItemChoiceType1)feeLookupRequest.ItemElementName,
				DestinationCountry = feeLookupRequest.destinationCountry,
				DestinationCountrySubdivisionCode = feeLookupRequest.destinationCountrySubdivisionCode,
				SendCountry = feeLookupRequest.sendCountry,
				ServiceOption = feeLookupRequest.serviceOption,
				MgiRewardsNumber = feeLookupRequest.mgiRewardsNumber,
				ReceiveCode = feeLookupRequest.receiveCode,
				ReceiveAgentID = feeLookupRequest.receiveAgentID,
				ReceiveCurrency = feeLookupRequest.receiveCurrency,
				SendCurrency = feeLookupRequest.sendCurrency,
				MgCustomerReceiveNumber = feeLookupRequest.mgCustomerReceiveNumber,
				DefaultInformationalFee = feeLookupRequest.defaultInformationalFeeSpecified == true ? (decimal?)feeLookupRequest.defaultInformationalFee : null,
				ServiceOfferingID = feeLookupRequest.serviceOfferingID,
				DefaultMaxFee = feeLookupRequest.defaultMaxFee,
				AllOptions = feeLookupRequest.allOptions,
				PromoCodes = feeLookupRequest.promoCodes?.ToList(),
				UnitProfileID = feeLookupRequest.unitProfileIDSpecified == true ? (int?)feeLookupRequest.unitProfileID : null,
				AgentID = feeLookupRequest.agentID,
				AgentSequence = feeLookupRequest.agentSequence,
				Language = feeLookupRequest.language,
				MgiSessionID = feeLookupRequest.mgiSessionID,
				TimeStamp = feeLookupRequest.timeStamp,
				ClientSoftwareVersion = feeLookupRequest.clientSoftwareVersion,
				PoeType = feeLookupRequest.poeType,
				ChannelType = feeLookupRequest.channelType,
				OperatorName = feeLookupRequest.operatorName,
				TargetAudience = feeLookupRequest.targetAudience,
				PoeCapabilities = feeLookupRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.FeeLookupBySendCountryRequest ToDomain(SERVICE.FeeLookupBySendCountryRequest feeLookupBySendCountryRequest)
		{
			var domainModel = new DOMAIN.FeeLookupBySendCountryRequest {
				MgiSessionType = (DOMAIN.SessionType)feeLookupBySendCountryRequest.mgiSessionType,
				ProductVariant = feeLookupBySendCountryRequest.productVariantSpecified == true ? (DOMAIN.ProductVariantType?)feeLookupBySendCountryRequest.productVariant : null,
				Item = feeLookupBySendCountryRequest.Item,
				ItemElementName = (DOMAIN.ItemChoiceType)feeLookupBySendCountryRequest.ItemElementName,
				ReceiveCountry = feeLookupBySendCountryRequest.receiveCountry,
				ServiceOption = feeLookupBySendCountryRequest.serviceOption,
				FreqCustCardNumber = feeLookupBySendCountryRequest.freqCustCardNumber,
				PromotionCode = feeLookupBySendCountryRequest.promotionCode,
				ReceiveCode = feeLookupBySendCountryRequest.receiveCode,
				IndicativeReceiveCurrency = feeLookupBySendCountryRequest.indicativeReceiveCurrency,
				IssueFreqCustCard = feeLookupBySendCountryRequest.issueFreqCustCardSpecified == true ? (bool?)feeLookupBySendCountryRequest.issueFreqCustCard : null,
				ReceiveAgentID = feeLookupBySendCountryRequest.receiveAgentID,
				ReceiveCurrency = feeLookupBySendCountryRequest.receiveCurrency,
				MgCustomerReceiveNumber = feeLookupBySendCountryRequest.mgCustomerReceiveNumber,
				SendCountry = feeLookupBySendCountryRequest.sendCountry,
				SendCurrency = feeLookupBySendCountryRequest.sendCurrency,
				AllOptions = feeLookupBySendCountryRequest.allOptions,
				UnitProfileID = feeLookupBySendCountryRequest.unitProfileIDSpecified == true ? (int?)feeLookupBySendCountryRequest.unitProfileID : null,
				AgentID = feeLookupBySendCountryRequest.agentID,
				AgentSequence = feeLookupBySendCountryRequest.agentSequence,
				Language = feeLookupBySendCountryRequest.language,
				MgiSessionID = feeLookupBySendCountryRequest.mgiSessionID,
				TimeStamp = feeLookupBySendCountryRequest.timeStamp,
				ClientSoftwareVersion = feeLookupBySendCountryRequest.clientSoftwareVersion,
				PoeType = feeLookupBySendCountryRequest.poeType,
				ChannelType = feeLookupBySendCountryRequest.channelType,
				OperatorName = feeLookupBySendCountryRequest.operatorName,
				TargetAudience = feeLookupBySendCountryRequest.targetAudience,
				PoeCapabilities = feeLookupBySendCountryRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DwProfileRequest ToDomain(SERVICE.DwProfileRequest dwProfileRequest)
		{
			var domainModel = new DOMAIN.DwProfileRequest {
				UnitProfileID = dwProfileRequest.unitProfileIDSpecified == true ? (int?)dwProfileRequest.unitProfileID : null,
				AgentID = dwProfileRequest.agentID,
				AgentSequence = dwProfileRequest.agentSequence,
				Language = dwProfileRequest.language,
				MgiSessionID = dwProfileRequest.mgiSessionID,
				TimeStamp = dwProfileRequest.timeStamp,
				ClientSoftwareVersion = dwProfileRequest.clientSoftwareVersion,
				PoeType = dwProfileRequest.poeType,
				ChannelType = dwProfileRequest.channelType,
				OperatorName = dwProfileRequest.operatorName,
				TargetAudience = dwProfileRequest.targetAudience,
				PoeCapabilities = dwProfileRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DwPasswordRequest ToDomain(SERVICE.DwPasswordRequest dwPasswordRequest)
		{
			var domainModel = new DOMAIN.DwPasswordRequest {
				EmployeeNumber = dwPasswordRequest.employeeNumber,
				CurrentPassword = dwPasswordRequest.currentPassword,
				NewPassword = dwPasswordRequest.newPassword,
				UnitProfileID = dwPasswordRequest.unitProfileIDSpecified == true ? (int?)dwPasswordRequest.unitProfileID : null,
				AgentID = dwPasswordRequest.agentID,
				AgentSequence = dwPasswordRequest.agentSequence,
				Language = dwPasswordRequest.language,
				MgiSessionID = dwPasswordRequest.mgiSessionID,
				TimeStamp = dwPasswordRequest.timeStamp,
				ClientSoftwareVersion = dwPasswordRequest.clientSoftwareVersion,
				PoeType = dwPasswordRequest.poeType,
				ChannelType = dwPasswordRequest.channelType,
				OperatorName = dwPasswordRequest.operatorName,
				TargetAudience = dwPasswordRequest.targetAudience,
				PoeCapabilities = dwPasswordRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DoddFrankStateRegulatorInfoRequest ToDomain(SERVICE.DoddFrankStateRegulatorInfoRequest doddFrankStateRegulatorInfoRequest)
		{
			var domainModel = new DOMAIN.DoddFrankStateRegulatorInfoRequest {
				DfJurisdiction = doddFrankStateRegulatorInfoRequest.dfJurisdiction,
				Languages = doddFrankStateRegulatorInfoRequest.languages?.ToList(),
				UnitProfileID = doddFrankStateRegulatorInfoRequest.unitProfileIDSpecified == true ? (int?)doddFrankStateRegulatorInfoRequest.unitProfileID : null,
				AgentID = doddFrankStateRegulatorInfoRequest.agentID,
				AgentSequence = doddFrankStateRegulatorInfoRequest.agentSequence,
				Language = doddFrankStateRegulatorInfoRequest.language,
				MgiSessionID = doddFrankStateRegulatorInfoRequest.mgiSessionID,
				TimeStamp = doddFrankStateRegulatorInfoRequest.timeStamp,
				ClientSoftwareVersion = doddFrankStateRegulatorInfoRequest.clientSoftwareVersion,
				PoeType = doddFrankStateRegulatorInfoRequest.poeType,
				ChannelType = doddFrankStateRegulatorInfoRequest.channelType,
				OperatorName = doddFrankStateRegulatorInfoRequest.operatorName,
				TargetAudience = doddFrankStateRegulatorInfoRequest.targetAudience,
				PoeCapabilities = doddFrankStateRegulatorInfoRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DisclosureTextDetailsRequest ToDomain(SERVICE.DisclosureTextDetailsRequest disclosureTextDetailsRequest)
		{
			var domainModel = new DOMAIN.DisclosureTextDetailsRequest {
				PaperFormat = disclosureTextDetailsRequest.paperFormat,
				MimeType = disclosureTextDetailsRequest.mimeType,
				DownloadAsAttachment = disclosureTextDetailsRequest.downloadAsAttachmentSpecified == true ? (bool?)disclosureTextDetailsRequest.downloadAsAttachment : null,
				Languages = disclosureTextDetailsRequest.languages?.ToList(),
				DcaTokenValues = disclosureTextDetailsRequest.dcaTokenValues?.Select(x => x.ConvertToDomain<SERVICE.DCATokenType, DOMAIN.DCATokenType>()).ToList(),
				Province = disclosureTextDetailsRequest.province,
				DestinationCountry = disclosureTextDetailsRequest.destinationCountry,
				DisclosureTextRevisionNumber = disclosureTextDetailsRequest.disclosureTextRevisionNumber,
				DcaTextTagValues = disclosureTextDetailsRequest.dcaTextTagValues?.ToList(),
				UnitProfileID = disclosureTextDetailsRequest.unitProfileIDSpecified == true ? (int?)disclosureTextDetailsRequest.unitProfileID : null,
				AgentID = disclosureTextDetailsRequest.agentID,
				AgentSequence = disclosureTextDetailsRequest.agentSequence,
				Language = disclosureTextDetailsRequest.language,
				MgiSessionID = disclosureTextDetailsRequest.mgiSessionID,
				TimeStamp = disclosureTextDetailsRequest.timeStamp,
				ClientSoftwareVersion = disclosureTextDetailsRequest.clientSoftwareVersion,
				PoeType = disclosureTextDetailsRequest.poeType,
				ChannelType = disclosureTextDetailsRequest.channelType,
				OperatorName = disclosureTextDetailsRequest.operatorName,
				TargetAudience = disclosureTextDetailsRequest.targetAudience,
				PoeCapabilities = disclosureTextDetailsRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DirectoryOfAgentsByZipRequest ToDomain(SERVICE.DirectoryOfAgentsByZipRequest directoryOfAgentsByZipRequest)
		{
			var domainModel = new DOMAIN.DirectoryOfAgentsByZipRequest {
				ZipCode = directoryOfAgentsByZipRequest.zipCode,
				Country = directoryOfAgentsByZipRequest.country,
				MaxRowsToReturn = directoryOfAgentsByZipRequest.maxRowsToReturn,
				UnitProfileID = directoryOfAgentsByZipRequest.unitProfileIDSpecified == true ? (int?)directoryOfAgentsByZipRequest.unitProfileID : null,
				AgentID = directoryOfAgentsByZipRequest.agentID,
				AgentSequence = directoryOfAgentsByZipRequest.agentSequence,
				Language = directoryOfAgentsByZipRequest.language,
				MgiSessionID = directoryOfAgentsByZipRequest.mgiSessionID,
				TimeStamp = directoryOfAgentsByZipRequest.timeStamp,
				ClientSoftwareVersion = directoryOfAgentsByZipRequest.clientSoftwareVersion,
				PoeType = directoryOfAgentsByZipRequest.poeType,
				ChannelType = directoryOfAgentsByZipRequest.channelType,
				OperatorName = directoryOfAgentsByZipRequest.operatorName,
				TargetAudience = directoryOfAgentsByZipRequest.targetAudience,
				PoeCapabilities = directoryOfAgentsByZipRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DirectoryOfAgentsByCityRequest ToDomain(SERVICE.DirectoryOfAgentsByCityRequest directoryOfAgentsByCityRequest)
		{
			var domainModel = new DOMAIN.DirectoryOfAgentsByCityRequest {
				Country = directoryOfAgentsByCityRequest.country,
				CountrySubdivisionCode = directoryOfAgentsByCityRequest.countrySubdivisionCode,
				City = directoryOfAgentsByCityRequest.city,
				MaxRowsToReturn = directoryOfAgentsByCityRequest.maxRowsToReturn,
				UnitProfileID = directoryOfAgentsByCityRequest.unitProfileIDSpecified == true ? (int?)directoryOfAgentsByCityRequest.unitProfileID : null,
				AgentID = directoryOfAgentsByCityRequest.agentID,
				AgentSequence = directoryOfAgentsByCityRequest.agentSequence,
				Language = directoryOfAgentsByCityRequest.language,
				MgiSessionID = directoryOfAgentsByCityRequest.mgiSessionID,
				TimeStamp = directoryOfAgentsByCityRequest.timeStamp,
				ClientSoftwareVersion = directoryOfAgentsByCityRequest.clientSoftwareVersion,
				PoeType = directoryOfAgentsByCityRequest.poeType,
				ChannelType = directoryOfAgentsByCityRequest.channelType,
				OperatorName = directoryOfAgentsByCityRequest.operatorName,
				TargetAudience = directoryOfAgentsByCityRequest.targetAudience,
				PoeCapabilities = directoryOfAgentsByCityRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DirectoryOfAgentsByAreaCodePrefixRequest ToDomain(SERVICE.DirectoryOfAgentsByAreaCodePrefixRequest directoryOfAgentsByAreaCodePrefixRequest)
		{
			var domainModel = new DOMAIN.DirectoryOfAgentsByAreaCodePrefixRequest {
				AreaCodePrefix = directoryOfAgentsByAreaCodePrefixRequest.areaCodePrefix,
				Country = directoryOfAgentsByAreaCodePrefixRequest.country,
				MaxRowsToReturn = directoryOfAgentsByAreaCodePrefixRequest.maxRowsToReturn,
				UnitProfileID = directoryOfAgentsByAreaCodePrefixRequest.unitProfileIDSpecified == true ? (int?)directoryOfAgentsByAreaCodePrefixRequest.unitProfileID : null,
				AgentID = directoryOfAgentsByAreaCodePrefixRequest.agentID,
				AgentSequence = directoryOfAgentsByAreaCodePrefixRequest.agentSequence,
				Language = directoryOfAgentsByAreaCodePrefixRequest.language,
				MgiSessionID = directoryOfAgentsByAreaCodePrefixRequest.mgiSessionID,
				TimeStamp = directoryOfAgentsByAreaCodePrefixRequest.timeStamp,
				ClientSoftwareVersion = directoryOfAgentsByAreaCodePrefixRequest.clientSoftwareVersion,
				PoeType = directoryOfAgentsByAreaCodePrefixRequest.poeType,
				ChannelType = directoryOfAgentsByAreaCodePrefixRequest.channelType,
				OperatorName = directoryOfAgentsByAreaCodePrefixRequest.operatorName,
				TargetAudience = directoryOfAgentsByAreaCodePrefixRequest.targetAudience,
				PoeCapabilities = directoryOfAgentsByAreaCodePrefixRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.DepositAnnouncementRequest ToDomain(SERVICE.DepositAnnouncementRequest depositAnnouncementRequest)
		{
			var domainModel = new DOMAIN.DepositAnnouncementRequest {
				MgiEmployeeAutoAccept = depositAnnouncementRequest.mgiEmployeeAutoAccept,
				DepositReferenceNumber = depositAnnouncementRequest.depositReferenceNumber,
				DepositDate = depositAnnouncementRequest.depositDate,
				AnnouncementDate = depositAnnouncementRequest.announcementDate,
				AnnouncementAmount = depositAnnouncementRequest.announcementAmount,
				AnnouncementCurrencyCode = depositAnnouncementRequest.announcementCurrencyCode,
				PaymentTypeCode = depositAnnouncementRequest.paymentTypeCode,
				BankShortCode = depositAnnouncementRequest.bankShortCode,
				BankName = depositAnnouncementRequest.bankName,
				AnnouncementRemarks = depositAnnouncementRequest.announcementRemarks,
				AgentEmployeeID = depositAnnouncementRequest.agentEmployeeID,
				ProofImage = depositAnnouncementRequest.proofImage?.ToList(),
				UnitProfileID = depositAnnouncementRequest.unitProfileIDSpecified == true ? (int?)depositAnnouncementRequest.unitProfileID : null,
				AgentID = depositAnnouncementRequest.agentID,
				AgentSequence = depositAnnouncementRequest.agentSequence,
				Language = depositAnnouncementRequest.language,
				MgiSessionID = depositAnnouncementRequest.mgiSessionID,
				TimeStamp = depositAnnouncementRequest.timeStamp,
				ClientSoftwareVersion = depositAnnouncementRequest.clientSoftwareVersion,
				PoeType = depositAnnouncementRequest.poeType,
				ChannelType = depositAnnouncementRequest.channelType,
				OperatorName = depositAnnouncementRequest.operatorName,
				TargetAudience = depositAnnouncementRequest.targetAudience,
				PoeCapabilities = depositAnnouncementRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreateOrUpdateProfileSenderRequest ToDomain(SERVICE.CreateOrUpdateProfileSenderRequest createOrUpdateProfileSenderRequest)
		{
			var domainModel = new DOMAIN.CreateOrUpdateProfileSenderRequest {
				GAFVersionNumber = createOrUpdateProfileSenderRequest.GAFVersionNumber,
				ConsumerProfileID = createOrUpdateProfileSenderRequest.consumerProfileID,
				ConsumerProfileIDType = createOrUpdateProfileSenderRequest.consumerProfileIDType,
				ConsumerProfileIDTypeToReturn = createOrUpdateProfileSenderRequest.consumerProfileIDTypeToReturn,
				FieldValues = createOrUpdateProfileSenderRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				VerifiedFields = createOrUpdateProfileSenderRequest.verifiedFields?.ToList(),
				UnitProfileID = createOrUpdateProfileSenderRequest.unitProfileIDSpecified == true ? (int?)createOrUpdateProfileSenderRequest.unitProfileID : null,
				AgentID = createOrUpdateProfileSenderRequest.agentID,
				AgentSequence = createOrUpdateProfileSenderRequest.agentSequence,
				Language = createOrUpdateProfileSenderRequest.language,
				MgiSessionID = createOrUpdateProfileSenderRequest.mgiSessionID,
				TimeStamp = createOrUpdateProfileSenderRequest.timeStamp,
				ClientSoftwareVersion = createOrUpdateProfileSenderRequest.clientSoftwareVersion,
				PoeType = createOrUpdateProfileSenderRequest.poeType,
				ChannelType = createOrUpdateProfileSenderRequest.channelType,
				OperatorName = createOrUpdateProfileSenderRequest.operatorName,
				TargetAudience = createOrUpdateProfileSenderRequest.targetAudience,
				PoeCapabilities = createOrUpdateProfileSenderRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreateOrUpdateProfileReceiverRequest ToDomain(SERVICE.CreateOrUpdateProfileReceiverRequest createOrUpdateProfileReceiverRequest)
		{
			var domainModel = new DOMAIN.CreateOrUpdateProfileReceiverRequest {
				GAFVersionNumber = createOrUpdateProfileReceiverRequest.GAFVersionNumber,
				ConsumerProfileID = createOrUpdateProfileReceiverRequest.consumerProfileID,
				ConsumerProfileIDType = createOrUpdateProfileReceiverRequest.consumerProfileIDType,
				ConsumerProfileIDTypeToReturn = createOrUpdateProfileReceiverRequest.consumerProfileIDTypeToReturn,
				FieldValues = createOrUpdateProfileReceiverRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				VerifiedFields = createOrUpdateProfileReceiverRequest.verifiedFields?.ToList(),
				UnitProfileID = createOrUpdateProfileReceiverRequest.unitProfileIDSpecified == true ? (int?)createOrUpdateProfileReceiverRequest.unitProfileID : null,
				AgentID = createOrUpdateProfileReceiverRequest.agentID,
				AgentSequence = createOrUpdateProfileReceiverRequest.agentSequence,
				Language = createOrUpdateProfileReceiverRequest.language,
				MgiSessionID = createOrUpdateProfileReceiverRequest.mgiSessionID,
				TimeStamp = createOrUpdateProfileReceiverRequest.timeStamp,
				ClientSoftwareVersion = createOrUpdateProfileReceiverRequest.clientSoftwareVersion,
				PoeType = createOrUpdateProfileReceiverRequest.poeType,
				ChannelType = createOrUpdateProfileReceiverRequest.channelType,
				OperatorName = createOrUpdateProfileReceiverRequest.operatorName,
				TargetAudience = createOrUpdateProfileReceiverRequest.targetAudience,
				PoeCapabilities = createOrUpdateProfileReceiverRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CreateOrUpdateProfileConsumerRequest ToDomain(SERVICE.CreateOrUpdateProfileConsumerRequest createOrUpdateProfileConsumerRequest)
		{
			var domainModel = new DOMAIN.CreateOrUpdateProfileConsumerRequest {
				GAFVersionNumber = createOrUpdateProfileConsumerRequest.GAFVersionNumber,
				ConsumerProfileID = createOrUpdateProfileConsumerRequest.consumerProfileID,
				ConsumerProfileIDType = createOrUpdateProfileConsumerRequest.consumerProfileIDType,
				ConsumerProfileIDTypeToReturn = createOrUpdateProfileConsumerRequest.consumerProfileIDTypeToReturn,
				FieldValues = createOrUpdateProfileConsumerRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				VerifiedFields = createOrUpdateProfileConsumerRequest.verifiedFields?.ToList(),
				UnitProfileID = createOrUpdateProfileConsumerRequest.unitProfileIDSpecified == true ? (int?)createOrUpdateProfileConsumerRequest.unitProfileID : null,
				AgentID = createOrUpdateProfileConsumerRequest.agentID,
				AgentSequence = createOrUpdateProfileConsumerRequest.agentSequence,
				Language = createOrUpdateProfileConsumerRequest.language,
				MgiSessionID = createOrUpdateProfileConsumerRequest.mgiSessionID,
				TimeStamp = createOrUpdateProfileConsumerRequest.timeStamp,
				ClientSoftwareVersion = createOrUpdateProfileConsumerRequest.clientSoftwareVersion,
				PoeType = createOrUpdateProfileConsumerRequest.poeType,
				ChannelType = createOrUpdateProfileConsumerRequest.channelType,
				OperatorName = createOrUpdateProfileConsumerRequest.operatorName,
				TargetAudience = createOrUpdateProfileConsumerRequest.targetAudience,
				PoeCapabilities = createOrUpdateProfileConsumerRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConsumerHistoryLookupRequest ToDomain(SERVICE.ConsumerHistoryLookupRequest consumerHistoryLookupRequest)
		{
			var domainModel = new DOMAIN.ConsumerHistoryLookupRequest {
				GAFVersionNumber = consumerHistoryLookupRequest.GAFVersionNumber,
				ConsumerPhone = consumerHistoryLookupRequest.consumerPhone,
				MgiRewardsNumber = consumerHistoryLookupRequest.mgiRewardsNumber,
				BillerAccountNumber = consumerHistoryLookupRequest.billerAccountNumber,
				AgentFrequentCustomerNumber = consumerHistoryLookupRequest.agentFrequentCustomerNumber,
				MaxSendersToReturn = consumerHistoryLookupRequest.maxSendersToReturn,
				MaxReceiversToReturn = consumerHistoryLookupRequest.maxReceiversToReturn,
				MgiSessionType = (DOMAIN.SessionType)consumerHistoryLookupRequest.mgiSessionType,
				UnitProfileID = consumerHistoryLookupRequest.unitProfileIDSpecified == true ? (int?)consumerHistoryLookupRequest.unitProfileID : null,
				AgentID = consumerHistoryLookupRequest.agentID,
				AgentSequence = consumerHistoryLookupRequest.agentSequence,
				Language = consumerHistoryLookupRequest.language,
				MgiSessionID = consumerHistoryLookupRequest.mgiSessionID,
				TimeStamp = consumerHistoryLookupRequest.timeStamp,
				ClientSoftwareVersion = consumerHistoryLookupRequest.clientSoftwareVersion,
				PoeType = consumerHistoryLookupRequest.poeType,
				ChannelType = consumerHistoryLookupRequest.channelType,
				OperatorName = consumerHistoryLookupRequest.operatorName,
				TargetAudience = consumerHistoryLookupRequest.targetAudience,
				PoeCapabilities = consumerHistoryLookupRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ConfirmTokenRequest ToDomain(SERVICE.ConfirmTokenRequest confirmTokenRequest)
		{
			var domainModel = new DOMAIN.ConfirmTokenRequest {
				CodeTableVersion = confirmTokenRequest.codeTableVersion,
				ClientTableVersions = confirmTokenRequest.clientTableVersions?.Select(x => x.ConvertToDomain<SERVICE.VersionInfo, DOMAIN.VersionInfo>()).ToList(),
				UnitProfileID = confirmTokenRequest.unitProfileIDSpecified == true ? (int?)confirmTokenRequest.unitProfileID : null,
				AgentID = confirmTokenRequest.agentID,
				AgentSequence = confirmTokenRequest.agentSequence,
				Language = confirmTokenRequest.language,
				MgiSessionID = confirmTokenRequest.mgiSessionID,
				TimeStamp = confirmTokenRequest.timeStamp,
				ClientSoftwareVersion = confirmTokenRequest.clientSoftwareVersion,
				PoeType = confirmTokenRequest.poeType,
				ChannelType = confirmTokenRequest.channelType,
				OperatorName = confirmTokenRequest.operatorName,
				TargetAudience = confirmTokenRequest.targetAudience,
				PoeCapabilities = confirmTokenRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.ComplianceTransactionRequest ToDomain(SERVICE.ComplianceTransactionRequest complianceTransactionRequest)
		{
			var domainModel = new DOMAIN.ComplianceTransactionRequest {
				RequestType = (DOMAIN.ComplianceTransactionRequestType)complianceTransactionRequest.requestType,
				Cci = (complianceTransactionRequest.cci != null ? complianceTransactionRequest.cci.ConvertToDomain<SERVICE.CustomerComplianceInfo, DOMAIN.CustomerComplianceInfo>() : null),
				MgReferenceNumber = complianceTransactionRequest.mgReferenceNumber,
				MoneyOrder = complianceTransactionRequest.moneyOrder?.Select(x => x.ConvertToDomain<SERVICE.MoneyOrderInfo, DOMAIN.MoneyOrderInfo>()).ToList(),
				UnitProfileID = complianceTransactionRequest.unitProfileIDSpecified == true ? (int?)complianceTransactionRequest.unitProfileID : null,
				AgentID = complianceTransactionRequest.agentID,
				AgentSequence = complianceTransactionRequest.agentSequence,
				Language = complianceTransactionRequest.language,
				MgiSessionID = complianceTransactionRequest.mgiSessionID,
				TimeStamp = complianceTransactionRequest.timeStamp,
				ClientSoftwareVersion = complianceTransactionRequest.clientSoftwareVersion,
				PoeType = complianceTransactionRequest.poeType,
				ChannelType = complianceTransactionRequest.channelType,
				OperatorName = complianceTransactionRequest.operatorName,
				TargetAudience = complianceTransactionRequest.targetAudience,
				PoeCapabilities = complianceTransactionRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CompleteSessionRequest ToDomain(SERVICE.CompleteSessionRequest completeSessionRequest)
		{
			var domainModel = new DOMAIN.CompleteSessionRequest {
				Commit = completeSessionRequest.commit,
				MgiSessionType = (DOMAIN.SessionType)completeSessionRequest.mgiSessionType,
				ReceiptImages = completeSessionRequest.receiptImages?.Select(x => x.ConvertToDomain<SERVICE.ReceiptImageContentType, DOMAIN.ReceiptImageContentType>()).ToList(),
				UnitProfileID = completeSessionRequest.unitProfileIDSpecified == true ? (int?)completeSessionRequest.unitProfileID : null,
				AgentID = completeSessionRequest.agentID,
				AgentSequence = completeSessionRequest.agentSequence,
				Language = completeSessionRequest.language,
				MgiSessionID = completeSessionRequest.mgiSessionID,
				TimeStamp = completeSessionRequest.timeStamp,
				ClientSoftwareVersion = completeSessionRequest.clientSoftwareVersion,
				PoeType = completeSessionRequest.poeType,
				ChannelType = completeSessionRequest.channelType,
				OperatorName = completeSessionRequest.operatorName,
				TargetAudience = completeSessionRequest.targetAudience,
				PoeCapabilities = completeSessionRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CityListRequest ToDomain(SERVICE.CityListRequest cityListRequest)
		{
			var domainModel = new DOMAIN.CityListRequest {
				Country = cityListRequest.country,
				CountrySubdivisionCode = cityListRequest.countrySubdivisionCode,
				City = cityListRequest.city,
				MaxRowsToReturn = cityListRequest.maxRowsToReturn,
				UnitProfileID = cityListRequest.unitProfileIDSpecified == true ? (int?)cityListRequest.unitProfileID : null,
				AgentID = cityListRequest.agentID,
				AgentSequence = cityListRequest.agentSequence,
				Language = cityListRequest.language,
				MgiSessionID = cityListRequest.mgiSessionID,
				TimeStamp = cityListRequest.timeStamp,
				ClientSoftwareVersion = cityListRequest.clientSoftwareVersion,
				PoeType = cityListRequest.poeType,
				ChannelType = cityListRequest.channelType,
				OperatorName = cityListRequest.operatorName,
				TargetAudience = cityListRequest.targetAudience,
				PoeCapabilities = cityListRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.CheckInRequest ToDomain(SERVICE.CheckInRequest checkInRequest)
		{
			var domainModel = new DOMAIN.CheckInRequest {
				UnitProfileID = checkInRequest.unitProfileIDSpecified == true ? (int?)checkInRequest.unitProfileID : null,
				AgentID = checkInRequest.agentID,
				AgentSequence = checkInRequest.agentSequence,
				Language = checkInRequest.language,
				MgiSessionID = checkInRequest.mgiSessionID,
				TimeStamp = checkInRequest.timeStamp,
				ClientSoftwareVersion = checkInRequest.clientSoftwareVersion,
				PoeType = checkInRequest.poeType,
				ChannelType = checkInRequest.channelType,
				OperatorName = checkInRequest.operatorName,
				TargetAudience = checkInRequest.targetAudience,
				PoeCapabilities = checkInRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BPValidationRequest ToDomain(SERVICE.BPValidationRequest bPValidationRequest)
		{
			var domainModel = new DOMAIN.BPValidationRequest {
				GAFVersionNumber = bPValidationRequest.GAFVersionNumber,
				TransactionStaging = bPValidationRequest.transactionStaging,
				SendAmount = bPValidationRequest.sendAmount,
				FeeAmount = bPValidationRequest.feeAmountSpecified == true ? (decimal?)bPValidationRequest.feeAmount : null,
				PromoCodes = bPValidationRequest.promoCodes?.ToList(),
				SendCurrency = bPValidationRequest.sendCurrency,
				ReceiveCurrency = bPValidationRequest.receiveCurrency,
				DestinationCountry = bPValidationRequest.destinationCountry,
				ProductVariant = (DOMAIN.ProductVariantType)bPValidationRequest.productVariant,
				ServiceOfferingID = bPValidationRequest.serviceOfferingID,
				ReceiveCode = bPValidationRequest.receiveCode,
				ReceiveAgentID = bPValidationRequest.receiveAgentID,
				FieldValues = bPValidationRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				VerifiedFields = bPValidationRequest.verifiedFields?.ToList(),
				PrimaryReceiptLanguage = bPValidationRequest.primaryReceiptLanguage,
				SecondaryReceiptLanguage = bPValidationRequest.secondaryReceiptLanguage,
				ReceiptImages = bPValidationRequest.receiptImages?.Select(x => x.ConvertToDomain<SERVICE.ReceiptImageContentType, DOMAIN.ReceiptImageContentType>()).ToList(),
				UnitProfileID = bPValidationRequest.unitProfileIDSpecified == true ? (int?)bPValidationRequest.unitProfileID : null,
				AgentID = bPValidationRequest.agentID,
				AgentSequence = bPValidationRequest.agentSequence,
				Language = bPValidationRequest.language,
				MgiSessionID = bPValidationRequest.mgiSessionID,
				TimeStamp = bPValidationRequest.timeStamp,
				ClientSoftwareVersion = bPValidationRequest.clientSoftwareVersion,
				PoeType = bPValidationRequest.poeType,
				ChannelType = bPValidationRequest.channelType,
				OperatorName = bPValidationRequest.operatorName,
				TargetAudience = bPValidationRequest.targetAudience,
				PoeCapabilities = bPValidationRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillPaymentSummaryReportRequest ToDomain(SERVICE.BillPaymentSummaryReportRequest billPaymentSummaryReportRequest)
		{
			var domainModel = new DOMAIN.BillPaymentSummaryReportRequest {
				ActivityDate = billPaymentSummaryReportRequest.activityDate,
				ProductVariant = billPaymentSummaryReportRequest.productVariantSpecified == true ? (DOMAIN.ProductVariantType?)billPaymentSummaryReportRequest.productVariant : null,
				UnitProfileID = billPaymentSummaryReportRequest.unitProfileIDSpecified == true ? (int?)billPaymentSummaryReportRequest.unitProfileID : null,
				AgentID = billPaymentSummaryReportRequest.agentID,
				AgentSequence = billPaymentSummaryReportRequest.agentSequence,
				Language = billPaymentSummaryReportRequest.language,
				MgiSessionID = billPaymentSummaryReportRequest.mgiSessionID,
				TimeStamp = billPaymentSummaryReportRequest.timeStamp,
				ClientSoftwareVersion = billPaymentSummaryReportRequest.clientSoftwareVersion,
				PoeType = billPaymentSummaryReportRequest.poeType,
				ChannelType = billPaymentSummaryReportRequest.channelType,
				OperatorName = billPaymentSummaryReportRequest.operatorName,
				TargetAudience = billPaymentSummaryReportRequest.targetAudience,
				PoeCapabilities = billPaymentSummaryReportRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillPaymentDetailReportRequest ToDomain(SERVICE.BillPaymentDetailReportRequest billPaymentDetailReportRequest)
		{
			var domainModel = new DOMAIN.BillPaymentDetailReportRequest {
				ActivityDate = billPaymentDetailReportRequest.activityDate,
				ProductVariant = billPaymentDetailReportRequest.productVariantSpecified == true ? (DOMAIN.ProductVariantType?)billPaymentDetailReportRequest.productVariant : null,
				UnitProfileID = billPaymentDetailReportRequest.unitProfileIDSpecified == true ? (int?)billPaymentDetailReportRequest.unitProfileID : null,
				AgentID = billPaymentDetailReportRequest.agentID,
				AgentSequence = billPaymentDetailReportRequest.agentSequence,
				Language = billPaymentDetailReportRequest.language,
				MgiSessionID = billPaymentDetailReportRequest.mgiSessionID,
				TimeStamp = billPaymentDetailReportRequest.timeStamp,
				ClientSoftwareVersion = billPaymentDetailReportRequest.clientSoftwareVersion,
				PoeType = billPaymentDetailReportRequest.poeType,
				ChannelType = billPaymentDetailReportRequest.channelType,
				OperatorName = billPaymentDetailReportRequest.operatorName,
				TargetAudience = billPaymentDetailReportRequest.targetAudience,
				PoeCapabilities = billPaymentDetailReportRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.BillerSearchRequest ToDomain(SERVICE.BillerSearchRequest billerSearchRequest)
		{
			var domainModel = new DOMAIN.BillerSearchRequest {
				SearchType = (DOMAIN.BillerSearchType)billerSearchRequest.searchType,
				ProductVariant = billerSearchRequest.productVariantSpecified == true ? (DOMAIN.ProductVariantType?)billerSearchRequest.productVariant : null,
				IndustryID = billerSearchRequest.industryID,
				ReceiveCode = billerSearchRequest.receiveCode,
				BillerName = billerSearchRequest.billerName,
				ReceiveAgentID = billerSearchRequest.receiveAgentID,
				BinNumber = billerSearchRequest.binNumber,
				DefaultInformationalFee = billerSearchRequest.defaultInformationalFeeSpecified == true ? (decimal?)billerSearchRequest.defaultInformationalFee : null,
				DefaultMaxFee = billerSearchRequest.defaultMaxFeeSpecified == true ? (bool?)billerSearchRequest.defaultMaxFee : null,
				MaxRowsToReturn = billerSearchRequest.maxRowsToReturn,
				UnitProfileID = billerSearchRequest.unitProfileIDSpecified == true ? (int?)billerSearchRequest.unitProfileID : null,
				AgentID = billerSearchRequest.agentID,
				AgentSequence = billerSearchRequest.agentSequence,
				Language = billerSearchRequest.language,
				MgiSessionID = billerSearchRequest.mgiSessionID,
				TimeStamp = billerSearchRequest.timeStamp,
				ClientSoftwareVersion = billerSearchRequest.clientSoftwareVersion,
				PoeType = billerSearchRequest.poeType,
				ChannelType = billerSearchRequest.channelType,
				OperatorName = billerSearchRequest.operatorName,
				TargetAudience = billerSearchRequest.targetAudience,
				PoeCapabilities = billerSearchRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}
		public static DOMAIN.AmendValidationRequest ToDomain(SERVICE.AmendValidationRequest amendValidationRequest)
		{
			var domainModel = new DOMAIN.AmendValidationRequest {
				GAFVersionNumber = amendValidationRequest.GAFVersionNumber,
				FieldValues = amendValidationRequest.fieldValues?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
				VerifiedFields = amendValidationRequest.verifiedFields?.ToList(),
				PrimaryReceiptLanguage = amendValidationRequest.primaryReceiptLanguage,
				SecondaryReceiptLanguage = amendValidationRequest.secondaryReceiptLanguage,
				ReceiptImages = amendValidationRequest.receiptImages?.Select(x => x.ConvertToDomain<SERVICE.ReceiptImageContentType, DOMAIN.ReceiptImageContentType>()).ToList(),
				UnitProfileID = amendValidationRequest.unitProfileIDSpecified == true ? (int?)amendValidationRequest.unitProfileID : null,
				AgentID = amendValidationRequest.agentID,
				AgentSequence = amendValidationRequest.agentSequence,
				Language = amendValidationRequest.language,
				MgiSessionID = amendValidationRequest.mgiSessionID,
				TimeStamp = amendValidationRequest.timeStamp,
				ClientSoftwareVersion = amendValidationRequest.clientSoftwareVersion,
				PoeType = amendValidationRequest.poeType,
				ChannelType = amendValidationRequest.channelType,
				OperatorName = amendValidationRequest.operatorName,
				TargetAudience = amendValidationRequest.targetAudience,
				PoeCapabilities = amendValidationRequest.poeCapabilities?.Select(x => x.ConvertToDomain<SERVICE.KeyValuePairType, DOMAIN.KeyValuePairType>()).ToList(),
			};

			DomainTransformExtensions.NullifyWhiteSpaceStrings(domainModel);

			return domainModel;
		}

		private static IEnumerable<U> ConvertToDomain<T, U>(this IEnumerable<T> models) 
		{
		     var transformed = new List<U>();

            foreach (var model in models)
            {
				transformed.Add(model.ConvertToDomain<T, U>());
			}

			return transformed;
		}

		private static U ConvertToDomain<T, U>(this T model) 
		{
			dynamic castModel = Convert.ChangeType(model, model.GetType());
			var domainModel = ServiceToDomainExtensions.ToDomain(castModel);
			return domainModel;
		}
	}
}